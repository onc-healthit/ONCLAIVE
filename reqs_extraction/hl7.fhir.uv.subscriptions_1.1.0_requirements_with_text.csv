,URL*,ID*,Requirement*,Conformance*,Actor*,Sub-Requirement(s),Conditionality,Conditionality Description,Verifiable?,Verifiability Details,Planning To Test?,Planning To Test Details,Page,Section,Same As…,Section #,Grouping,Scope,Scope Description,Priority,Test Plan,Simulation Approach,client testing simulation implementation group,client simulation status,Test location,Test name,Notes,Questions,reference_text
0,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscription-topics-in-r4,2,"In order to allow for discovery of supported subscription topics, this guide defines the CapabilityStatement SubscriptionTopic Canonical extension. The extension allows server implementers to advertise the canonical URLs of topics available to clients and allows clients to see the list of supported topics on a server. The extension is expected to appear, if supported, on the Subscription resource entry. Note that servers are NOT required to advertise supported topics via this extension.",MAY,Server,,,,Yes,Worth checking even though this is a MAY,Yes,Worth checking even though this is a MAY,components,subscription-topics-in-r4,,2.2.1.1,Topic Discovery,,Tested?,,Retrieve the server's capability statement and then check if the SubscriptionTopic Canonical extension appears on the Subscription resource,SIMULATED: Inferno publishes a CapabilityStatement  with topics present.,CapabilityStatement,Requested,,,,"SIMULATION DESIGN: does Inferno publsih a static CapabilityStatement, or do we allow systems to provide one that Inferno will echo? Pros of the echo approach: flexibility and tailoring to specific implementation's needs. Cons: need to identify session when /metadata calls should be open. Likely, we should have a static capability statement with topics published and maybe there is a test that clients can discover and initiate a subscription for those topics, though there is no such explicit client requirement.","Subscription Topics in R4
SubscriptionTopic resources contain information that is difficult to model without an appropriate resource to start from.  There was an attempt to profile the Basic resource with extensions, but the complexity resulted in very low usability.  Combined with use-case evaluation indicated that the most urgent and likely support of topic-based subscriptions would be relying on pre-defined topics with fixed canonical URLs (e.g., topics defined by an Implementation Guide), it was decided to leave topic definitions out-of-scope in R4.SubscriptionTopicSubscriptionTopic resources contain information that is difficult to model without an appropriate resource to start from.  There was an attempt to profile the BasicBasic resource with extensions, but the complexity resulted in very low usability.  Combined with use-case evaluation indicated that the most urgent and likely support of topic-based subscriptions would be relying on pre-defined topics with fixed canonical URLs (e.g., topics defined by an Implementation Guide), it was decided to leave topic definitions out-of-scope in R4.
In order to allow for discovery of supported subscription topics, this guide defines the CapabilityStatement SubscriptionTopic Canonical extension.  The extension allows server implementers to advertise the canonical URLs of topics available to clients and allows clients to see the list of supported topics on a server.  The extension is expected to appear, if supported, on the Subscription resource entry.  Note that servers are NOT required to advertise supported topics via this extension.  Supported topics can also be advertised, for example, by the CapabilityStatement.instantiates or CapabilityStatement.implementationGuide elements of a CapabilityStatement, as defined by another Implementation Guide.  Finally, FHIR R4 servers MAY choose to leave topic discovery completely out-of-band and part of other steps, such as registration or integration.In order to allow for discovery of supported subscription topics, this guide defines the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension.  The extension allows server implementers to advertise the canonical URLs of topics available to clients and allows clients to see the list of supported topics on a server.  The extension is expected to appear, if supported, on the SubscriptionSubscription resource entry.  Note that servers are NOT required to advertise supported topics via this extension.  Supported topics can also be advertised, for example, by the CapabilityStatement.instantiatesCapabilityStatement.instantiates or CapabilityStatement.implementationGuideCapabilityStatement.implementationGuide elements of a CapabilityStatement, as defined by another Implementation Guide.  Finally, FHIR R4 servers MAY choose to leave topic discovery completely out-of-band and part of other steps, such as registration or integration.
Full definitions of subscription topics are considered out-of-scope for FHIR R4 implementations.  Since the full topic definitions are out-of-scope, FHIR R4 servers are not able to support custom topics submitted by clients.  If that functionality is required, a server may choose to expose a limited R4B endpoint to enable such support.Full definitions of subscription topics are considered out-of-scope for FHIR R4 implementations.  Since the full topic definitions are out-of-scope, FHIR R4 servers are not able to support custom topics submitted by clients.  If that functionality is required, a server may choose to expose a limited R4B endpoint to enable such support.
Implementers adding server-side support for topic-based subscriptions are encouraged (but not required) to use the R4B or R5 definitions internally, in order to ease the transition to future versions.Implementers adding server-side support for topic-based subscriptions are encouraged (but not required) to use the R4B or R5 definitions internally, in order to ease the transition to future versions.
Subscriptions"
1,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscription-topics-in-r4,3,"Supported topics can also be advertised, for example, by the CapabilityStatement.instantiates or CapabilityStatement.implementationGuide elements of a CapabilityStatement, as defined by another Implementation Guide.",MAY,Server,,,,No,Not precise enough to be consistently verified,No,Not Verifiable,components,subscription-topics-in-r4,Copy the formula above to the entire column to find duplicate requirements.,2.2.1.1,Topic Discovery,,,,,NOT SIMULATED: not enough detail.,NONE,,,,,,"Subscription Topics in R4
SubscriptionTopic resources contain information that is difficult to model without an appropriate resource to start from.  There was an attempt to profile the Basic resource with extensions, but the complexity resulted in very low usability.  Combined with use-case evaluation indicated that the most urgent and likely support of topic-based subscriptions would be relying on pre-defined topics with fixed canonical URLs (e.g., topics defined by an Implementation Guide), it was decided to leave topic definitions out-of-scope in R4.SubscriptionTopicSubscriptionTopic resources contain information that is difficult to model without an appropriate resource to start from.  There was an attempt to profile the BasicBasic resource with extensions, but the complexity resulted in very low usability.  Combined with use-case evaluation indicated that the most urgent and likely support of topic-based subscriptions would be relying on pre-defined topics with fixed canonical URLs (e.g., topics defined by an Implementation Guide), it was decided to leave topic definitions out-of-scope in R4.
In order to allow for discovery of supported subscription topics, this guide defines the CapabilityStatement SubscriptionTopic Canonical extension.  The extension allows server implementers to advertise the canonical URLs of topics available to clients and allows clients to see the list of supported topics on a server.  The extension is expected to appear, if supported, on the Subscription resource entry.  Note that servers are NOT required to advertise supported topics via this extension.  Supported topics can also be advertised, for example, by the CapabilityStatement.instantiates or CapabilityStatement.implementationGuide elements of a CapabilityStatement, as defined by another Implementation Guide.  Finally, FHIR R4 servers MAY choose to leave topic discovery completely out-of-band and part of other steps, such as registration or integration.In order to allow for discovery of supported subscription topics, this guide defines the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension.  The extension allows server implementers to advertise the canonical URLs of topics available to clients and allows clients to see the list of supported topics on a server.  The extension is expected to appear, if supported, on the SubscriptionSubscription resource entry.  Note that servers are NOT required to advertise supported topics via this extension.  Supported topics can also be advertised, for example, by the CapabilityStatement.instantiatesCapabilityStatement.instantiates or CapabilityStatement.implementationGuideCapabilityStatement.implementationGuide elements of a CapabilityStatement, as defined by another Implementation Guide.  Finally, FHIR R4 servers MAY choose to leave topic discovery completely out-of-band and part of other steps, such as registration or integration.
Full definitions of subscription topics are considered out-of-scope for FHIR R4 implementations.  Since the full topic definitions are out-of-scope, FHIR R4 servers are not able to support custom topics submitted by clients.  If that functionality is required, a server may choose to expose a limited R4B endpoint to enable such support.Full definitions of subscription topics are considered out-of-scope for FHIR R4 implementations.  Since the full topic definitions are out-of-scope, FHIR R4 servers are not able to support custom topics submitted by clients.  If that functionality is required, a server may choose to expose a limited R4B endpoint to enable such support.
Implementers adding server-side support for topic-based subscriptions are encouraged (but not required) to use the R4B or R5 definitions internally, in order to ease the transition to future versions.Implementers adding server-side support for topic-based subscriptions are encouraged (but not required) to use the R4B or R5 definitions internally, in order to ease the transition to future versions.
Subscriptions"
2,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscription-topics-in-r4,4,"FHIR R4 servers MAY choose to leave topic discovery completely out-of-band and part of other steps, such as registration or integration.",MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements. Additionally, meeting this requirement is simply the absence of other features.",components,subscription-topics-in-r4,,2.2.1.1,Topic Discovery,,,,,"SIMULATED: Inferno may provide topics for Subscribers to use within testing instructions and will accept any topic, advertised or not.",Topic Discovery,Requested,,,,,"Subscription Topics in R4
SubscriptionTopic resources contain information that is difficult to model without an appropriate resource to start from.  There was an attempt to profile the Basic resource with extensions, but the complexity resulted in very low usability.  Combined with use-case evaluation indicated that the most urgent and likely support of topic-based subscriptions would be relying on pre-defined topics with fixed canonical URLs (e.g., topics defined by an Implementation Guide), it was decided to leave topic definitions out-of-scope in R4.SubscriptionTopicSubscriptionTopic resources contain information that is difficult to model without an appropriate resource to start from.  There was an attempt to profile the BasicBasic resource with extensions, but the complexity resulted in very low usability.  Combined with use-case evaluation indicated that the most urgent and likely support of topic-based subscriptions would be relying on pre-defined topics with fixed canonical URLs (e.g., topics defined by an Implementation Guide), it was decided to leave topic definitions out-of-scope in R4.
In order to allow for discovery of supported subscription topics, this guide defines the CapabilityStatement SubscriptionTopic Canonical extension.  The extension allows server implementers to advertise the canonical URLs of topics available to clients and allows clients to see the list of supported topics on a server.  The extension is expected to appear, if supported, on the Subscription resource entry.  Note that servers are NOT required to advertise supported topics via this extension.  Supported topics can also be advertised, for example, by the CapabilityStatement.instantiates or CapabilityStatement.implementationGuide elements of a CapabilityStatement, as defined by another Implementation Guide.  Finally, FHIR R4 servers MAY choose to leave topic discovery completely out-of-band and part of other steps, such as registration or integration.In order to allow for discovery of supported subscription topics, this guide defines the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension.  The extension allows server implementers to advertise the canonical URLs of topics available to clients and allows clients to see the list of supported topics on a server.  The extension is expected to appear, if supported, on the SubscriptionSubscription resource entry.  Note that servers are NOT required to advertise supported topics via this extension.  Supported topics can also be advertised, for example, by the CapabilityStatement.instantiatesCapabilityStatement.instantiates or CapabilityStatement.implementationGuideCapabilityStatement.implementationGuide elements of a CapabilityStatement, as defined by another Implementation Guide.  Finally, FHIR R4 servers MAY choose to leave topic discovery completely out-of-band and part of other steps, such as registration or integration.
Full definitions of subscription topics are considered out-of-scope for FHIR R4 implementations.  Since the full topic definitions are out-of-scope, FHIR R4 servers are not able to support custom topics submitted by clients.  If that functionality is required, a server may choose to expose a limited R4B endpoint to enable such support.Full definitions of subscription topics are considered out-of-scope for FHIR R4 implementations.  Since the full topic definitions are out-of-scope, FHIR R4 servers are not able to support custom topics submitted by clients.  If that functionality is required, a server may choose to expose a limited R4B endpoint to enable such support.
Implementers adding server-side support for topic-based subscriptions are encouraged (but not required) to use the R4B or R5 definitions internally, in order to ease the transition to future versions.Implementers adding server-side support for topic-based subscriptions are encouraged (but not required) to use the R4B or R5 definitions internally, in order to ease the transition to future versions.
Subscriptions"
3,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscriptions,5,"In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements also described by this guide",DEPRECATED,,,,,,Planning To Test?,,,components,subscriptions,,2.2.2,,,,,,,,,,,DEPRECATED - split into 86 / 2.2.2-2 and 87 / 2.2.2-3,,"Subscriptions
The Subscription resource is used to request notifications for a specific client about a specific topic. Conceptually, a subscription is a concrete request for a single client to receive notifications per a single topic.The SubscriptionSubscription resource is used to request notifications for a specific client about a specific topic. Conceptually, a subscription is a concrete request for a single client to receive notifications per a single topic.
For example, a subscription may ask for notifications based on an âEncounter in-progressâ topic, such as the one briefly described as an example in Subscription Topics.  The subscription requires a link to the canonical URL of the topic, such as http://server.example.org/fhir/subscriptiontopics/encounter-in-progress, information about the channel, such as requesting notifications via rest-hook to the endpoint at http://client.example.org/notification-endpoint/abc), and payload configuration, such as requesting that bundles are encoded as application/fhir+json and include only identifiers (id-only).  Additionally, a subscription sets the filters which are applied to determine when notifications should be sent, such as indicating that only notifications for Patient/123 should be sent.  More details about filters can be found in the Subscription Filters section.For example, a subscription may ask for notifications based on an âEncounter in-progressâ topic, such as the one briefly described as an example in Subscription TopicsSubscription Topics.  The subscription requires a link to the canonical URL of the topic, such as http://server.example.org/fhir/subscriptiontopics/encounter-in-progresshttp://server.example.org/fhir/subscriptiontopics/encounter-in-progress, information about the channel, such as requesting notifications via rest-hookrest-hook to the endpoint at http://client.example.org/notification-endpoint/abchttp://client.example.org/notification-endpoint/abc), and payload configuration, such as requesting that bundles are encoded as application/fhir+jsonapplication/fhir+json and include only identifiers (id-onlyid-only).  Additionally, a subscription sets the filters which are applied to determine when notifications should be sent, such as indicating that only notifications for Patient/123Patient/123 should be sent.  More details about filters can be found in the Subscription FiltersSubscription Filters section.
In order to support topic-based subscriptions in R4, this guide defines several extensions for use on the R4 Subscription resource.  A list of extensions defined by this guide can be found on the Artifacts page. Note that the future FHIR R5 publication may define capabilities included in this specification as cross-version extensions. Since the FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements also described by this guideIn order to support topic-based subscriptions in R4, this guide defines several extensions for use on the R4 SubscriptionR4 Subscription resource.  A list of extensions defined by this guide can be found on the ArtifactsArtifacts page. Note that the future FHIR R5 publication may define capabilities included in this specification as cross-version extensions. Since the FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements also described by this guide
In order to link a Subscription to a SubscriptionTopic and prevent any confusion between the R4 query-based and topic-based implementations, the link to a SubscriptionTopic is specified in the Subscription.criteria field.  For more details, please see the Subscription Profile in this guide.In order to link a SubscriptionSubscription to a SubscriptionTopicSubscriptionTopic and prevent any confusion between the R4 query-based and topic-based implementations, the link to a SubscriptionTopicSubscriptionTopic is specified in the Subscription.criteriaSubscription.criteria field.  For more details, please see the Subscription ProfileSubscription Profile in this guide.
Subscription Filters"
4,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscriptions-and-fhir-versions,6,"Note that subscription notifications, by default, are made using the same FHIR version as the server. The Subscription.channel.payload element can be used to specify a different FHIR version, using syntax and values defined by the MIME Type Parameter. Servers SHALL look for this parameter during subscription negotiation and SHALL not accept requests for notification FHIR versions it cannot support (servers MAY reject or coerce, according to their policies).",DEPRECATED,,,,,,,,,components,subscriptions-and-fhir-versions,,2.2.2.2,,,,,,,,,,,DEPRECATED - split into 88 / 2.2.2.2-2 through 91 / 2.2.2.2-5,,"Subscriptions and FHIR Versions
Note that subscription notifications, by default, are made using the same FHIR version as the server.  The Subscription.channel.payload element can be used to specify a different FHIR version, using syntax and values defined by the MIME Type Parameter.  Servers SHALL look for this parameter during subscription negotiation and SHALL not accept requests for notification FHIR versions it cannot support (servers MAY reject or coerce, according to their policies).Note that subscription notifications, by default, are made using the same FHIR version as the server.  The Subscription.channel.payloadSubscription.channel.payload element can be used to specify a different FHIR version, using syntax and values defined by the MIME Type ParameterMIME Type Parameter.  Servers SHALL look for this parameter during subscription negotiation and SHALL not accept requests for notification FHIR versions it cannot support (servers MAY reject or coerce, according to their policies).
For example, a request for notifications encoded as application/fhir+json; fhirVersion=4.3 explicitly asks for notifications conforming to the FHIR R4B notification format, while a request for application/fhir+json; fhirVersion=4.0 explicitly asks for notifications conformant to FHIR R4.  This mechanism allows for more flexibility during upgrades, ensuring that servers and clients can continue to operate across version changes.For example, a request for notifications encoded as application/fhir+json; fhirVersion=4.3application/fhir+json; fhirVersion=4.3 explicitly asks for notifications conforming to the FHIR R4B notification format, while a request for application/fhir+json; fhirVersion=4.0application/fhir+json; fhirVersion=4.0 explicitly asks for notifications conformant to FHIR R4.  This mechanism allows for more flexibility during upgrades, ensuring that servers and clients can continue to operate across version changes.
More information about the differences in notifications can be found on the Notifications page.More information about the differences in notifications can be found on the NotificationsNotifications page.
Accepting Subscription Requests"
5,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#accepting-subscription-requests,7,"When a FHIR Server accepts a request to create a Subscription, the server is indicating to the client that the server:
 - is capable of detecting when events covered by the requested SubscriptionTopic occur, and
 - is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.",SHALL,Server,,,,Yes,,Yes,,components,accepting-subscription-requests,,2.2.2.3,Subscription Creation,,,,Submit a Subscription to the server and validate that it can send a notification.,"SIMULATED: Inferno will verify that it has the capabilities to support the requested Subscription, including
- Channel - initially only Rest Hook supported
- other details like heartbeat may not be supported.
If the provided Subscription is something that Inferno can't handle, an error will be returned and the relevant test will be skipped.",For Basic Workflow,Implemented,,,"At the current time, we are not trying to validate that triggers occur when appropriate. This will be challenging and may not be possible.",,"Accepting Subscription Requests
When a FHIR Server accepts a request to create a Subscription, the server is indicating to the client that the server:When a FHIR Server accepts a request to create a SubscriptionSubscription, the server is indicating to the client that the server:

is capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

is capable of detecting when events covered by the requested SubscriptionTopic occur, andis capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

When processing a request for a Subscription, following are some checks that a server SHOULD validate:When processing a request for a SubscriptionSubscription, following are somesome checks that a server SHOULD validate:

that the SubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

that the SubscriptionTopic is valid and implemented by the serverthat the SubscriptionTopicSubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the serverthat all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the serverthat the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the serverthat the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

Subscription Notifications"
6,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#accepting-subscription-requests,8,When processing a request for a Subscription...a server SHOULD validate…that the SubscriptionTopic is valid and implemented by the server,SHOULD,Server,,,,Yes,,Yes,,components,accepting-subscription-requests,,2.2.2.3,Subscription Creation,,,,"Identify a SubscriptionTopic not implemented by the server (e.g.,, by requesting one from the tester) and send a Subscription request for that topic. Validate that the server rejects or adjusts  the Subscription. ","SIMULATED: Inferno by default won't require specific topics and can support any, but may in some cases require specific ones.",Later,,,,,,"Accepting Subscription Requests
When a FHIR Server accepts a request to create a Subscription, the server is indicating to the client that the server:When a FHIR Server accepts a request to create a SubscriptionSubscription, the server is indicating to the client that the server:

is capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

is capable of detecting when events covered by the requested SubscriptionTopic occur, andis capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

When processing a request for a Subscription, following are some checks that a server SHOULD validate:When processing a request for a SubscriptionSubscription, following are somesome checks that a server SHOULD validate:

that the SubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

that the SubscriptionTopic is valid and implemented by the serverthat the SubscriptionTopicSubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the serverthat all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the serverthat the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the serverthat the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

Subscription Notifications"
7,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#accepting-subscription-requests,9,When processing a request for a Subscription...a server SHOULD validate…that all requested filters are defined in the requested topic and are implemented in the server,SHOULD,Server,,,,Yes,,Yes,,components,accepting-subscription-requests,,2.2.2.3,Subscription Creation,,,,"Identify a filter not implemented by the server (e.g., by requesting one from the tester) for a given topic and send a Subscription request with that filter. Validate that the server rejects or adjusts  the Subscription. ","NOT SIMULATED: Inferno will accept all filters because in R4 there is no ability to discover filters, so it assumes that this discovery happens out of band and is out of scope.",NONE,,,,,,"Accepting Subscription Requests
When a FHIR Server accepts a request to create a Subscription, the server is indicating to the client that the server:When a FHIR Server accepts a request to create a SubscriptionSubscription, the server is indicating to the client that the server:

is capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

is capable of detecting when events covered by the requested SubscriptionTopic occur, andis capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

When processing a request for a Subscription, following are some checks that a server SHOULD validate:When processing a request for a SubscriptionSubscription, following are somesome checks that a server SHOULD validate:

that the SubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

that the SubscriptionTopic is valid and implemented by the serverthat the SubscriptionTopicSubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the serverthat all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the serverthat the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the serverthat the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

Subscription Notifications"
8,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#accepting-subscription-requests,10,When processing a request for a Subscription...a server SHOULD validate…that the channel type is known and implemented by the server,SHOULD,Server,,,,Yes,,Yes,,components,accepting-subscription-requests,,2.2.2.3,Subscription Creation,,,,"Identify a channel type not implemented by the server (e.g.,, by requesting one from the tester) and send a Subscription request for that channel type. Validate that the server rejects or adjusts  the Subscription.",SIMULATED: Inferno will only accept rest hook subscriptions initially.,Duplicate - 7,Implemented,,,,,"Accepting Subscription Requests
When a FHIR Server accepts a request to create a Subscription, the server is indicating to the client that the server:When a FHIR Server accepts a request to create a SubscriptionSubscription, the server is indicating to the client that the server:

is capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

is capable of detecting when events covered by the requested SubscriptionTopic occur, andis capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

When processing a request for a Subscription, following are some checks that a server SHOULD validate:When processing a request for a SubscriptionSubscription, following are somesome checks that a server SHOULD validate:

that the SubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

that the SubscriptionTopic is valid and implemented by the serverthat the SubscriptionTopicSubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the serverthat all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the serverthat the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the serverthat the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

Subscription Notifications"
9,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#accepting-subscription-requests,11,"When processing a request for a Subscription...a server SHOULD validate…that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)",SHOULD,Server,,,,Yes,,Yes,,components,accepting-subscription-requests,,2.2.2.3,Subscription Creation,,,,Send a Subscription request for a channel type and include an invalid URL to send notifications. Validate that the server rejects or adjusts  the Subscription.,SIMULATED: Inferno will perform basic validation of rest hook endpoints (valid HTTP URL).,Subscription Validation,Implemented,,,,,"Accepting Subscription Requests
When a FHIR Server accepts a request to create a Subscription, the server is indicating to the client that the server:When a FHIR Server accepts a request to create a SubscriptionSubscription, the server is indicating to the client that the server:

is capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

is capable of detecting when events covered by the requested SubscriptionTopic occur, andis capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

When processing a request for a Subscription, following are some checks that a server SHOULD validate:When processing a request for a SubscriptionSubscription, following are somesome checks that a server SHOULD validate:

that the SubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

that the SubscriptionTopic is valid and implemented by the serverthat the SubscriptionTopicSubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the serverthat all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the serverthat the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the serverthat the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

Subscription Notifications"
10,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#accepting-subscription-requests,12,When processing a request for a Subscription...a server SHOULD validate…that the payload configuration is known and implemented by the server,SHOULD,Server,,,,Yes,,Yes,,components,accepting-subscription-requests,,2.2.2.3,Subscription Creation,,,,"Identify a payload type not implemented by the server (e.g.,, by requesting one from the tester) and send a Subscription request for that payload type. Validate that the server rejects or adjusts  the Subscription.","SIMULATED: Inferno will support all payload content types, so this is an empty check",EMPTY,,,,,,"Accepting Subscription Requests
When a FHIR Server accepts a request to create a Subscription, the server is indicating to the client that the server:When a FHIR Server accepts a request to create a SubscriptionSubscription, the server is indicating to the client that the server:

is capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

is capable of detecting when events covered by the requested SubscriptionTopic occur, andis capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

When processing a request for a Subscription, following are some checks that a server SHOULD validate:When processing a request for a SubscriptionSubscription, following are somesome checks that a server SHOULD validate:

that the SubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

that the SubscriptionTopic is valid and implemented by the serverthat the SubscriptionTopicSubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the serverthat all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the serverthat the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the serverthat the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

Subscription Notifications"
11,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#accepting-subscription-requests,13,"When processing a request for a Subscription...a server SHOULD validate…that the payload configuration is valid for the channel type requested (e.g., complies with the server’s security policy)",SHOULD,Server,,,,Yes,,Yes,,components,accepting-subscription-requests,,2.2.2.3,Subscription Creation,,,,"Identify a payload and channel type pair not supported by the server (e.g.,, by requesting one from the tester) and send a Subscription request for that combination. Validate that the server rejects or adjusts  the Subscription.","SIMULATED: Inferno will support all payload content types, so this is an empty check",EMPTY,,,,,,"Accepting Subscription Requests
When a FHIR Server accepts a request to create a Subscription, the server is indicating to the client that the server:When a FHIR Server accepts a request to create a SubscriptionSubscription, the server is indicating to the client that the server:

is capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

is capable of detecting when events covered by the requested SubscriptionTopic occur, andis capable of detecting when events covered by the requested SubscriptionTopic occur, and
is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.is willing to make a simple best effort attempt at delivering a notification for each occurrence of a matching event.

When processing a request for a Subscription, following are some checks that a server SHOULD validate:When processing a request for a SubscriptionSubscription, following are somesome checks that a server SHOULD validate:

that the SubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

that the SubscriptionTopic is valid and implemented by the serverthat the SubscriptionTopicSubscriptionTopic is valid and implemented by the server
that all requested filters are defined in the requested topic and are implemented in the serverthat all requested filters are defined in the requested topic and are implemented in the server
that the channel type is known and implemented by the serverthat the channel type is known and implemented by the server
that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)that the channel endpoint is valid for the channel provided (e.g., is it a valid URL of the expected type)
that the payload configuration is known and implemented by the serverthat the payload configuration is known and implemented by the server
that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)that the payload configuration is valid for the channel type requested (e.g., complies with the serverâs security policy)

Subscription Notifications"
12,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscription-notifications,14,"In ... FHIR R4 ... notifications are based on a history Bundle. The first entry always contains SubscriptionStatus information, encoded as ... a Parameters resource using the Backport SubscriptionStatus Profile in FHIR R4",SHALL,Server,,,,Yes,,Yes,,components,subscription-notifications,,2.2.3,Notification Content,,,,"When validating a notification (including handshakes, heartbeats, and events), check that  1. the body is a Bundle, 2. the Bundle has type 'history', and 3. the first entry is a Parameters instance that conforms to the Backport SubscriptionStatus Profile",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,Implemented,,notification_validation,,,"Subscription Notifications
In FHIR R5, a new type of Bundle has been introduced, which uses the new SubscriptionStatus resource to convey status information in notifications.  Support for earlier FHIR versions has been designed to offer similar functionality and serialized data.In FHIR R5, a new type of BundleBundle has been introduced, which uses the new SubscriptionStatusSubscriptionStatus resource to convey status information in notifications.  Support for earlier FHIR versions has been designed to offer similar functionality and serialized data.
In both FHIR R4 and R4B, notifications are based on a history Bundle.  The first entry always contains SubscriptionStatus information, encoded as either a Parameters resource using the Backport SubscriptionStatus Profile in FHIR R4 or a SubscriptionStatus resource in FHIR R4B.In both FHIR R4 and R4B, notifications are based on a history Bundlehistory Bundle.  The first entry always contains SubscriptionStatusSubscriptionStatus information, encoded as either a ParametersParameters resource using the Backport SubscriptionStatus ProfileBackport SubscriptionStatus Profile in FHIR R4 or a SubscriptionStatusSubscriptionStatus resource in FHIR R4B.
Note that since notifications use history type Bundles, all notifications need to comply with the requirements for that bundle type.  Specifically, there are two invariants on Bundle (bdl-3 and bdl-4) that require a Bundle.entry.request element for every Bundle.entry.Note that since notifications use historyhistory type Bundles, all notifications need to comply with the requirements for that bundle type.  Specifically, there are two invariants on Bundle (bdl-3bdl-3 and bdl-4bdl-4) that require a Bundle.entry.requestBundle.entry.request element for everyevery Bundle.entryBundle.entry.

For the status resource (entry[0]), the request SHALL be filled out to match a request to the $status operation.
For additional entries, the request SHOULD be filled out in a way that makes sense given the subscription (e.g., a POST or PUT operation on the resource, etc.).  However, a server MAY choose to simply include a GET to the relevant resource instead.

For the status resource (entry[0]), the request SHALL be filled out to match a request to the $status operation.For the status resource (entry[0]entry[0]), the request SHALL be filled out to match a request to the $status$status operation.
For additional entries, the request SHOULD be filled out in a way that makes sense given the subscription (e.g., a POST or PUT operation on the resource, etc.).  However, a server MAY choose to simply include a GET to the relevant resource instead.For additional entries, the request SHOULD be filled out in a way that makes sense given the subscription (e.g., a POSTPOST or PUTPUT operation on the resource, etc.).  However, a server MAY choose to simply include a GETGET to the relevant resource instead.

Detailed information about notifications, including the differences between FHIR R4 and R4B, can be found on the Notifications page.Detailed information about notifications, including the differences between FHIR R4 and R4B, can be found on the NotificationsNotifications page.
Scoping Responsibilities"
13,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscription-notifications,15,"Note that since notifications use history type Bundles, all notifications need to comply with the requirements for that bundle type. Specifically, there are two invariants on Bundle (bdl-3 and bdl-4) that require a Bundle.entry.request element for every Bundle.entry. 
- For the status resource (entry[0]) the request SHALL be filled out to match a request to the $status operation. 
- for additional entries  the request SHOULD be filled out in a way that makes sense given the subscription (e.g.,  a POST or PUT operation on the resource,  etc.). However,  a server MAY choose to simply include a GET to the relevant resource instead.",SHALL,Server,,,,Yes,,Yes,,components,subscription-notifications,,2.2.3,Notification Content,,,,"When validating a notification sent by the server (including handshakes, heartbeats, and events), check that in the first entry the `entry.request.url` has a url that ends with `Subscription/[Subscription_id]/$status`. HL7 validator checks will make sure that entry.request.url is populated on all entries, but no further valation will be done.",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,Implemented,,notification_validation,,,"Subscription Notifications
In FHIR R5, a new type of Bundle has been introduced, which uses the new SubscriptionStatus resource to convey status information in notifications.  Support for earlier FHIR versions has been designed to offer similar functionality and serialized data.In FHIR R5, a new type of BundleBundle has been introduced, which uses the new SubscriptionStatusSubscriptionStatus resource to convey status information in notifications.  Support for earlier FHIR versions has been designed to offer similar functionality and serialized data.
In both FHIR R4 and R4B, notifications are based on a history Bundle.  The first entry always contains SubscriptionStatus information, encoded as either a Parameters resource using the Backport SubscriptionStatus Profile in FHIR R4 or a SubscriptionStatus resource in FHIR R4B.In both FHIR R4 and R4B, notifications are based on a history Bundlehistory Bundle.  The first entry always contains SubscriptionStatusSubscriptionStatus information, encoded as either a ParametersParameters resource using the Backport SubscriptionStatus ProfileBackport SubscriptionStatus Profile in FHIR R4 or a SubscriptionStatusSubscriptionStatus resource in FHIR R4B.
Note that since notifications use history type Bundles, all notifications need to comply with the requirements for that bundle type.  Specifically, there are two invariants on Bundle (bdl-3 and bdl-4) that require a Bundle.entry.request element for every Bundle.entry.Note that since notifications use historyhistory type Bundles, all notifications need to comply with the requirements for that bundle type.  Specifically, there are two invariants on Bundle (bdl-3bdl-3 and bdl-4bdl-4) that require a Bundle.entry.requestBundle.entry.request element for everyevery Bundle.entryBundle.entry.

For the status resource (entry[0]), the request SHALL be filled out to match a request to the $status operation.
For additional entries, the request SHOULD be filled out in a way that makes sense given the subscription (e.g., a POST or PUT operation on the resource, etc.).  However, a server MAY choose to simply include a GET to the relevant resource instead.

For the status resource (entry[0]), the request SHALL be filled out to match a request to the $status operation.For the status resource (entry[0]entry[0]), the request SHALL be filled out to match a request to the $status$status operation.
For additional entries, the request SHOULD be filled out in a way that makes sense given the subscription (e.g., a POST or PUT operation on the resource, etc.).  However, a server MAY choose to simply include a GET to the relevant resource instead.For additional entries, the request SHOULD be filled out in a way that makes sense given the subscription (e.g., a POSTPOST or PUTPUT operation on the resource, etc.).  However, a server MAY choose to simply include a GETGET to the relevant resource instead.

Detailed information about notifications, including the differences between FHIR R4 and R4B, can be found on the Notifications page.Detailed information about notifications, including the differences between FHIR R4 and R4B, can be found on the NotificationsNotifications page.
Scoping Responsibilities"
14,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#scoping-responsibilities,16,"Unless otherwise specified by a server implementation and channel, the Subscriptions Framework does not involve guaranteed delivery of notifications. While the Subscriptions Framework is able to support such mechanisms, defining them are beyond the scope of the standard or this guide. - Servers SHOULD detect errors and take appropriate action where possible. In general,  this boundary is when the notification is delivered.",SHOULD,Server,,,,Yes,"On the edge Not Verifiable and Attestation - There are no formal details to verify, but could have an attestation that the server includes logic to detect errors and handle them.
- pro = having an attestation means that implementers need to think about this
- con = the attestation has no actual teeth",Yes,"On the edge Not Verifiable and Attestation - There are no formal details to verify, but could have an attestation that the server includes logic to detect errors and handle them.
- pro = having an attestation means that implementers need to think about this
- con = the attestation has no actual teeth",components,scoping-responsibilities,,2.2.3.1,Notification Delivery,,,,,NOT SIMULATED: no specific action to simulate.,NONE,,,,,,"Scoping Responsibilities
Unless otherwise specified by a server implementation and channel, the Subscriptions Framework does not involve guaranteed delivery of notifications. While the Subscriptions Framework is able to support such mechanisms, defining them are beyond the scope of the standard or this guide.Unless otherwise specified by a server implementation and channel, the Subscriptions Framework does not involve guaranteed delivery of notifications. While the Subscriptions Framework is able to support such mechanisms, defining them are beyond the scope of the standard or this guide.
Servers SHOULD detect errors and take appropriate action where possible.  In general, this boundary is when the notification is delivered.  For example, during a REST-hook notification, the subscription server can detect errors up until the REST endpoint returns a HTTP status code (e.g., 200).  This does not imply that a client successfully processed (or even received) a notification - simply that the server has sent the notification successfully.Servers SHOULD detect errors and take appropriate action where possible.  In general, this boundary is when the notification is delivered.  For example, during a REST-hook notification, the subscription server can detect errors up until the REST endpoint returns a HTTP status code (e.g., 200).  This does not imply that a client successfully processed (or even received) a notification - simply that the server has sent the notification successfully.
Therefore, clients SHOULD be aware of some limitations regarding delivery. In particular:Therefore, clients SHOULD be aware of some limitations regarding delivery. In particular:

Some notifications might not be delivered.
Some notifications might be delivered multiple times.

Some notifications might not be delivered.Some notifications might not be delivered.
Some notifications might be delivered multiple times.Some notifications might be delivered multiple times.

In order to mitigate the impact from the above issues, the Subscriptions Framework includes mechanisms to detect both scenarios.  Details can be found on the Errors Page.In order to mitigate the impact from the above issues, the Subscriptions Framework includes mechanisms to detect both scenarios.  Details can be found on the Errors PageErrors Page.
Cross Version Analysis"
15,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#scoping-responsibilities,17,"Therefore, clients SHOULD be aware of some limitations regarding delivery. In particular: - Some notifications might not be delivered.  Some notifications might be delivered multiple times",SHOULD,Client,,,,Yes,"On the edge between Not Verifiable and Attestation - there is no formal details to verify, but could put the client in these scenarils - miss an event, and deliver an event twice - and have them attest that their system handles those cases appropriately, whatever that means to the system.",Yes,"On the edge between Not Verifiable and Attestation - there is no formal details to verify, but could put the client in these scenarils - miss an event, and deliver an event twice - and have them attest that their system handles those cases appropriately, whatever that means to the system.",components,scoping-responsibilities,,2.2.3.1,Notification Delivery,,,,,NOT SIMULATED: no specific action to simulate.,NONE,,,,,,"Scoping Responsibilities
Unless otherwise specified by a server implementation and channel, the Subscriptions Framework does not involve guaranteed delivery of notifications. While the Subscriptions Framework is able to support such mechanisms, defining them are beyond the scope of the standard or this guide.Unless otherwise specified by a server implementation and channel, the Subscriptions Framework does not involve guaranteed delivery of notifications. While the Subscriptions Framework is able to support such mechanisms, defining them are beyond the scope of the standard or this guide.
Servers SHOULD detect errors and take appropriate action where possible.  In general, this boundary is when the notification is delivered.  For example, during a REST-hook notification, the subscription server can detect errors up until the REST endpoint returns a HTTP status code (e.g., 200).  This does not imply that a client successfully processed (or even received) a notification - simply that the server has sent the notification successfully.Servers SHOULD detect errors and take appropriate action where possible.  In general, this boundary is when the notification is delivered.  For example, during a REST-hook notification, the subscription server can detect errors up until the REST endpoint returns a HTTP status code (e.g., 200).  This does not imply that a client successfully processed (or even received) a notification - simply that the server has sent the notification successfully.
Therefore, clients SHOULD be aware of some limitations regarding delivery. In particular:Therefore, clients SHOULD be aware of some limitations regarding delivery. In particular:

Some notifications might not be delivered.
Some notifications might be delivered multiple times.

Some notifications might not be delivered.Some notifications might not be delivered.
Some notifications might be delivered multiple times.Some notifications might be delivered multiple times.

In order to mitigate the impact from the above issues, the Subscriptions Framework includes mechanisms to detect both scenarios.  Details can be found on the Errors Page.In order to mitigate the impact from the above issues, the Subscriptions Framework includes mechanisms to detect both scenarios.  Details can be found on the Errors PageErrors Page.
Cross Version Analysis"
16,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/workflow.html#workflow-fhir-r4,18,"[When a client requests a Subscription, the] Server MAY accept the Subscription request and mark it active (e.g., supported channel and payload, no handshake required). ",MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",workflow,workflow-fhir-r4,,2.3.3,Subscription Creation,,,,,"NOT SIMULATED: due to requirement 29 on the rest-hook channel, which is all that Inferno supports which requires the status be set to requested.",NONE,,,,"Some channel types, e.g. rest hook, have specific requirements around status when a Subscription is initially created.",,"Workflow: FHIR R4

FHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was created
Sequence diagram of creating a FHIR Subscription in FHIR R4B

FHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was createdFHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was createdFHIR R4 ServerFHIR R4 ServerFHIR R4 ServerFHIR R4 ServerClientClientClientClientEndpointEndpointServer ImplementationServer Implementation11Implement core Subscription functionalityImplement core Subscription functionality22Implement topics and optionally advertiseImplement topics and optionally advertiseClient Topic DiscoveryClient Topic Discovery[CapabilityStatement with Extension Discovery][CapabilityStatement with Extension Discovery]33Search for a supportedSearch for a supportedSubscriptionTopicSubscriptionTopiccanonical URL in acanonical URL in aCapabilityStatementCapabilityStatement, e.g.:, e.g.:GETÂ .../CapabilityStatementGETÂ .../CapabilityStatement44CapabilityStatementCapabilityStatementwith topic canonical URLswith topic canonical URLsininrest.resource[subscription].extension[rest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical].../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery][CapabilityStatement with Instantiates Discovery]55Search for a known IGSearch for a known IGCapabilityStatementCapabilityStatementinstantiated in a serverinstantiated in a serverCapabilityStatementCapabilityStatement66CapabilityStatementCapabilityStatementwith IG capability canonical URLswith IG capability canonical URLsin thein theinstantiatesinstantiateselementelement[CapabilityStatement with Implementation Guide Discovery][CapabilityStatement with Implementation Guide Discovery]77Search for a known IG canonicalSearch for a known IG canonicallisted in a serverlisted in a serverCapabilityStatementCapabilityStatement88CapabilityStatementCapabilityStatementwith IG canonical URLswith IG canonical URLsin thein theimplementationGuideimplementationGuideelementelementClient Topic DiscoveryClient Topic Discovery[Client Subscription Request][Client Subscription Request]99Create, configure, or initializeCreate, configure, or initializethe necessary Endpointthe necessary EndpointEndpointEndpoint1010Create a Subscription, e.g.:Create a Subscription, e.g.:POSTÂ .../SubscriptionPOSTÂ .../SubscriptionServer Accepting or Rejecting a SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake][Valid Subscription, without Handshake]1111Success: status =Success: status =activeactiveSend notifications...Send notifications...[Valid Subscription, with Handshake Success][Valid Subscription, with Handshake Success]1212Success: status =Success: status =requestedrequested1313HandshakeHandshake1414Success, e.g.:Success, e.g.:200:Â OK200:Â OKUpdate Subscription:Update Subscription:Subscription.status:Â activeSubscription.status:Â activeSend notifications...Send notifications...[Valid Subscription, with Handshake Failure][Valid Subscription, with Handshake Failure]1515Success: status =Success: status =requestedrequested1616HandshakeHandshake1717Failure, e.g.:Failure, e.g.:404:Â NotÂ Found404:Â NotÂ FoundUpdate Subscription:Update Subscription:Subscription.status:Â errorSubscription.status:Â error[Invalid Subscription][Invalid Subscription]1818Failure, e.g.:Failure, e.g.:400:Â BadÂ Request400:Â BadÂ RequestNo subscription was createdNo subscription was created
Sequence diagram of creating a FHIR Subscription in FHIR R4BSequence diagram of creating a FHIR Subscription in FHIR R4B


Server implements the core functionality required for subscriptions (see Conformance).
Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.
Optional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension.
Server responds with its CapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.instantiates element.
Server responds with its CapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.implementationGuide element.
Server responds with its CapabilityStatement.
Client ensures that the endpoint is prepared (if applicable - see Channels).
Client requests a Subscription (e.g., via POST, PUT, etc.).
Server MAY accept the Subscription request and mark it active (e.g., supported channel and payload, no handshake required).
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.
If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to active.
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.
If the handshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to error.
Server MAY reject the Subscription request (e.g., unsupported channel type).

Server implements the core functionality required for subscriptions (see Conformance).Server implements the core functionality required for subscriptions (see ConformanceConformance).
Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.
Optional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension.OptionalOptional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.instantiates element.OptionalOptional Client attempts topic discovery via the CapabilityStatement.instantiatesCapabilityStatement.instantiates element.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.implementationGuide element.OptionalOptional Client attempts topic discovery via the CapabilityStatement.implementationGuideCapabilityStatement.implementationGuide element.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Client ensures that the endpoint is prepared (if applicable - see Channels).Client ensures that the endpoint is prepared (if applicable - see ChannelsChannels).
Client requests a Subscription (e.g., via POST, PUT, etc.).Client requests a SubscriptionSubscription (e.g., via POSTPOST, PUTPUT, etc.).
Server MAY accept the Subscription request and mark it active (e.g., supported channel and payload, no handshake required).Server MAY accept the SubscriptionSubscription request and mark it activeactive (e.g., supported channel and payload, no handshake required).
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).Server MAY accept the SubscriptionSubscription request and mark it requestedrequested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.Server sends a handshakehandshake bundle to the endpoint.
If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to active.If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to activeactive.
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).Server MAY accept the SubscriptionSubscription request and mark it requestedrequested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.Server sends a handshakehandshake bundle to the endpoint.
If the handshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to error.If the handshakehandshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to errorerror.
Server MAY reject the Subscription request (e.g., unsupported channel type).Server MAY reject the SubscriptionSubscription request (e.g., unsupported channel type).

Once the subscription is active, notifications will be sent according to the Channel.  Note that error states may occur, see Handling Errors for more information.Once the subscription is active, notifications will be sent according to the ChannelChannel.  Note that error states may occur, see Handling ErrorsHandling Errors for more information.

 
 
 
 
 "
17,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/workflow.html#workflow-fhir-r4,19,"[When a client requests a Subscription, the] Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).",MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",workflow,workflow-fhir-r4,,2.3.3,Subscription Creation,,,,,SIMULATED: Inferno will accept rest-hook Subscriptions and mark them as requested as required by requirement 29.,For Basic Workflow,Implemented,,,"Some channel types, e.g. rest hook, have specific requirements around status when a Subscription is initially created.",,"Workflow: FHIR R4

FHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was created
Sequence diagram of creating a FHIR Subscription in FHIR R4B

FHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was createdFHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was createdFHIR R4 ServerFHIR R4 ServerFHIR R4 ServerFHIR R4 ServerClientClientClientClientEndpointEndpointServer ImplementationServer Implementation11Implement core Subscription functionalityImplement core Subscription functionality22Implement topics and optionally advertiseImplement topics and optionally advertiseClient Topic DiscoveryClient Topic Discovery[CapabilityStatement with Extension Discovery][CapabilityStatement with Extension Discovery]33Search for a supportedSearch for a supportedSubscriptionTopicSubscriptionTopiccanonical URL in acanonical URL in aCapabilityStatementCapabilityStatement, e.g.:, e.g.:GETÂ .../CapabilityStatementGETÂ .../CapabilityStatement44CapabilityStatementCapabilityStatementwith topic canonical URLswith topic canonical URLsininrest.resource[subscription].extension[rest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical].../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery][CapabilityStatement with Instantiates Discovery]55Search for a known IGSearch for a known IGCapabilityStatementCapabilityStatementinstantiated in a serverinstantiated in a serverCapabilityStatementCapabilityStatement66CapabilityStatementCapabilityStatementwith IG capability canonical URLswith IG capability canonical URLsin thein theinstantiatesinstantiateselementelement[CapabilityStatement with Implementation Guide Discovery][CapabilityStatement with Implementation Guide Discovery]77Search for a known IG canonicalSearch for a known IG canonicallisted in a serverlisted in a serverCapabilityStatementCapabilityStatement88CapabilityStatementCapabilityStatementwith IG canonical URLswith IG canonical URLsin thein theimplementationGuideimplementationGuideelementelementClient Topic DiscoveryClient Topic Discovery[Client Subscription Request][Client Subscription Request]99Create, configure, or initializeCreate, configure, or initializethe necessary Endpointthe necessary EndpointEndpointEndpoint1010Create a Subscription, e.g.:Create a Subscription, e.g.:POSTÂ .../SubscriptionPOSTÂ .../SubscriptionServer Accepting or Rejecting a SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake][Valid Subscription, without Handshake]1111Success: status =Success: status =activeactiveSend notifications...Send notifications...[Valid Subscription, with Handshake Success][Valid Subscription, with Handshake Success]1212Success: status =Success: status =requestedrequested1313HandshakeHandshake1414Success, e.g.:Success, e.g.:200:Â OK200:Â OKUpdate Subscription:Update Subscription:Subscription.status:Â activeSubscription.status:Â activeSend notifications...Send notifications...[Valid Subscription, with Handshake Failure][Valid Subscription, with Handshake Failure]1515Success: status =Success: status =requestedrequested1616HandshakeHandshake1717Failure, e.g.:Failure, e.g.:404:Â NotÂ Found404:Â NotÂ FoundUpdate Subscription:Update Subscription:Subscription.status:Â errorSubscription.status:Â error[Invalid Subscription][Invalid Subscription]1818Failure, e.g.:Failure, e.g.:400:Â BadÂ Request400:Â BadÂ RequestNo subscription was createdNo subscription was created
Sequence diagram of creating a FHIR Subscription in FHIR R4BSequence diagram of creating a FHIR Subscription in FHIR R4B


Server implements the core functionality required for subscriptions (see Conformance).
Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.
Optional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension.
Server responds with its CapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.instantiates element.
Server responds with its CapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.implementationGuide element.
Server responds with its CapabilityStatement.
Client ensures that the endpoint is prepared (if applicable - see Channels).
Client requests a Subscription (e.g., via POST, PUT, etc.).
Server MAY accept the Subscription request and mark it active (e.g., supported channel and payload, no handshake required).
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.
If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to active.
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.
If the handshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to error.
Server MAY reject the Subscription request (e.g., unsupported channel type).

Server implements the core functionality required for subscriptions (see Conformance).Server implements the core functionality required for subscriptions (see ConformanceConformance).
Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.
Optional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension.OptionalOptional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.instantiates element.OptionalOptional Client attempts topic discovery via the CapabilityStatement.instantiatesCapabilityStatement.instantiates element.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.implementationGuide element.OptionalOptional Client attempts topic discovery via the CapabilityStatement.implementationGuideCapabilityStatement.implementationGuide element.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Client ensures that the endpoint is prepared (if applicable - see Channels).Client ensures that the endpoint is prepared (if applicable - see ChannelsChannels).
Client requests a Subscription (e.g., via POST, PUT, etc.).Client requests a SubscriptionSubscription (e.g., via POSTPOST, PUTPUT, etc.).
Server MAY accept the Subscription request and mark it active (e.g., supported channel and payload, no handshake required).Server MAY accept the SubscriptionSubscription request and mark it activeactive (e.g., supported channel and payload, no handshake required).
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).Server MAY accept the SubscriptionSubscription request and mark it requestedrequested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.Server sends a handshakehandshake bundle to the endpoint.
If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to active.If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to activeactive.
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).Server MAY accept the SubscriptionSubscription request and mark it requestedrequested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.Server sends a handshakehandshake bundle to the endpoint.
If the handshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to error.If the handshakehandshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to errorerror.
Server MAY reject the Subscription request (e.g., unsupported channel type).Server MAY reject the SubscriptionSubscription request (e.g., unsupported channel type).

Once the subscription is active, notifications will be sent according to the Channel.  Note that error states may occur, see Handling Errors for more information.Once the subscription is active, notifications will be sent according to the ChannelChannel.  Note that error states may occur, see Handling ErrorsHandling Errors for more information.

 
 
 
 
 "
18,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/workflow.html#workflow-fhir-r4,20,"[When a server sends a handshake bundle to a Subscription endpoint] If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to active.",SHALL,Server,,,,Yes,,Yes,,workflow,workflow-fhir-r4,,2.3.3,Handshake,,,,"After a handshake response that indicates success, verify that there is a subsequent event notification and that its SubscriptionStatus instance indicates that the Subscription is active.",SIMULATED: Inferno will look for the presence of a successful  handshake (and other details) to determine the status of a Subscription when that information is requested or sent.,Subscription Status Tracking,Implemented,,,,SIMULATION DESIGN: how to handle Subscription reads and keeping the status consistent?,"Workflow: FHIR R4

FHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was created
Sequence diagram of creating a FHIR Subscription in FHIR R4B

FHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was createdFHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was createdFHIR R4 ServerFHIR R4 ServerFHIR R4 ServerFHIR R4 ServerClientClientClientClientEndpointEndpointServer ImplementationServer Implementation11Implement core Subscription functionalityImplement core Subscription functionality22Implement topics and optionally advertiseImplement topics and optionally advertiseClient Topic DiscoveryClient Topic Discovery[CapabilityStatement with Extension Discovery][CapabilityStatement with Extension Discovery]33Search for a supportedSearch for a supportedSubscriptionTopicSubscriptionTopiccanonical URL in acanonical URL in aCapabilityStatementCapabilityStatement, e.g.:, e.g.:GETÂ .../CapabilityStatementGETÂ .../CapabilityStatement44CapabilityStatementCapabilityStatementwith topic canonical URLswith topic canonical URLsininrest.resource[subscription].extension[rest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical].../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery][CapabilityStatement with Instantiates Discovery]55Search for a known IGSearch for a known IGCapabilityStatementCapabilityStatementinstantiated in a serverinstantiated in a serverCapabilityStatementCapabilityStatement66CapabilityStatementCapabilityStatementwith IG capability canonical URLswith IG capability canonical URLsin thein theinstantiatesinstantiateselementelement[CapabilityStatement with Implementation Guide Discovery][CapabilityStatement with Implementation Guide Discovery]77Search for a known IG canonicalSearch for a known IG canonicallisted in a serverlisted in a serverCapabilityStatementCapabilityStatement88CapabilityStatementCapabilityStatementwith IG canonical URLswith IG canonical URLsin thein theimplementationGuideimplementationGuideelementelementClient Topic DiscoveryClient Topic Discovery[Client Subscription Request][Client Subscription Request]99Create, configure, or initializeCreate, configure, or initializethe necessary Endpointthe necessary EndpointEndpointEndpoint1010Create a Subscription, e.g.:Create a Subscription, e.g.:POSTÂ .../SubscriptionPOSTÂ .../SubscriptionServer Accepting or Rejecting a SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake][Valid Subscription, without Handshake]1111Success: status =Success: status =activeactiveSend notifications...Send notifications...[Valid Subscription, with Handshake Success][Valid Subscription, with Handshake Success]1212Success: status =Success: status =requestedrequested1313HandshakeHandshake1414Success, e.g.:Success, e.g.:200:Â OK200:Â OKUpdate Subscription:Update Subscription:Subscription.status:Â activeSubscription.status:Â activeSend notifications...Send notifications...[Valid Subscription, with Handshake Failure][Valid Subscription, with Handshake Failure]1515Success: status =Success: status =requestedrequested1616HandshakeHandshake1717Failure, e.g.:Failure, e.g.:404:Â NotÂ Found404:Â NotÂ FoundUpdate Subscription:Update Subscription:Subscription.status:Â errorSubscription.status:Â error[Invalid Subscription][Invalid Subscription]1818Failure, e.g.:Failure, e.g.:400:Â BadÂ Request400:Â BadÂ RequestNo subscription was createdNo subscription was created
Sequence diagram of creating a FHIR Subscription in FHIR R4BSequence diagram of creating a FHIR Subscription in FHIR R4B


Server implements the core functionality required for subscriptions (see Conformance).
Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.
Optional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension.
Server responds with its CapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.instantiates element.
Server responds with its CapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.implementationGuide element.
Server responds with its CapabilityStatement.
Client ensures that the endpoint is prepared (if applicable - see Channels).
Client requests a Subscription (e.g., via POST, PUT, etc.).
Server MAY accept the Subscription request and mark it active (e.g., supported channel and payload, no handshake required).
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.
If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to active.
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.
If the handshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to error.
Server MAY reject the Subscription request (e.g., unsupported channel type).

Server implements the core functionality required for subscriptions (see Conformance).Server implements the core functionality required for subscriptions (see ConformanceConformance).
Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.
Optional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension.OptionalOptional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.instantiates element.OptionalOptional Client attempts topic discovery via the CapabilityStatement.instantiatesCapabilityStatement.instantiates element.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.implementationGuide element.OptionalOptional Client attempts topic discovery via the CapabilityStatement.implementationGuideCapabilityStatement.implementationGuide element.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Client ensures that the endpoint is prepared (if applicable - see Channels).Client ensures that the endpoint is prepared (if applicable - see ChannelsChannels).
Client requests a Subscription (e.g., via POST, PUT, etc.).Client requests a SubscriptionSubscription (e.g., via POSTPOST, PUTPUT, etc.).
Server MAY accept the Subscription request and mark it active (e.g., supported channel and payload, no handshake required).Server MAY accept the SubscriptionSubscription request and mark it activeactive (e.g., supported channel and payload, no handshake required).
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).Server MAY accept the SubscriptionSubscription request and mark it requestedrequested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.Server sends a handshakehandshake bundle to the endpoint.
If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to active.If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to activeactive.
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).Server MAY accept the SubscriptionSubscription request and mark it requestedrequested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.Server sends a handshakehandshake bundle to the endpoint.
If the handshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to error.If the handshakehandshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to errorerror.
Server MAY reject the Subscription request (e.g., unsupported channel type).Server MAY reject the SubscriptionSubscription request (e.g., unsupported channel type).

Once the subscription is active, notifications will be sent according to the Channel.  Note that error states may occur, see Handling Errors for more information.Once the subscription is active, notifications will be sent according to the ChannelChannel.  Note that error states may occur, see Handling ErrorsHandling Errors for more information.

 
 
 
 
 "
19,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/workflow.html#workflow-fhir-r4,21,"[When a server sends a handshake bundle to a Subscription endpoint] If the handshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to error.",SHALL,Server,,,,Yes,,Yes,,workflow,workflow-fhir-r4,,2.3.3,Handshake,,,,After a handshake response indicating failure. invoke the $status operation for the Subscription and validate that the Subscription status is `error`.,SIMULATED: Inferno will look for the presence of a error  handshake to determine the status of a Subscription when that information is requested or sent.,Subscription Status Tracking,Implemented,,,,SIMULATION DESIGN: how to handle Subscription reads and keeping the status consistent?,"Workflow: FHIR R4

FHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was created
Sequence diagram of creating a FHIR Subscription in FHIR R4B

FHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was createdFHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was createdFHIR R4 ServerFHIR R4 ServerFHIR R4 ServerFHIR R4 ServerClientClientClientClientEndpointEndpointServer ImplementationServer Implementation11Implement core Subscription functionalityImplement core Subscription functionality22Implement topics and optionally advertiseImplement topics and optionally advertiseClient Topic DiscoveryClient Topic Discovery[CapabilityStatement with Extension Discovery][CapabilityStatement with Extension Discovery]33Search for a supportedSearch for a supportedSubscriptionTopicSubscriptionTopiccanonical URL in acanonical URL in aCapabilityStatementCapabilityStatement, e.g.:, e.g.:GETÂ .../CapabilityStatementGETÂ .../CapabilityStatement44CapabilityStatementCapabilityStatementwith topic canonical URLswith topic canonical URLsininrest.resource[subscription].extension[rest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical].../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery][CapabilityStatement with Instantiates Discovery]55Search for a known IGSearch for a known IGCapabilityStatementCapabilityStatementinstantiated in a serverinstantiated in a serverCapabilityStatementCapabilityStatement66CapabilityStatementCapabilityStatementwith IG capability canonical URLswith IG capability canonical URLsin thein theinstantiatesinstantiateselementelement[CapabilityStatement with Implementation Guide Discovery][CapabilityStatement with Implementation Guide Discovery]77Search for a known IG canonicalSearch for a known IG canonicallisted in a serverlisted in a serverCapabilityStatementCapabilityStatement88CapabilityStatementCapabilityStatementwith IG canonical URLswith IG canonical URLsin thein theimplementationGuideimplementationGuideelementelementClient Topic DiscoveryClient Topic Discovery[Client Subscription Request][Client Subscription Request]99Create, configure, or initializeCreate, configure, or initializethe necessary Endpointthe necessary EndpointEndpointEndpoint1010Create a Subscription, e.g.:Create a Subscription, e.g.:POSTÂ .../SubscriptionPOSTÂ .../SubscriptionServer Accepting or Rejecting a SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake][Valid Subscription, without Handshake]1111Success: status =Success: status =activeactiveSend notifications...Send notifications...[Valid Subscription, with Handshake Success][Valid Subscription, with Handshake Success]1212Success: status =Success: status =requestedrequested1313HandshakeHandshake1414Success, e.g.:Success, e.g.:200:Â OK200:Â OKUpdate Subscription:Update Subscription:Subscription.status:Â activeSubscription.status:Â activeSend notifications...Send notifications...[Valid Subscription, with Handshake Failure][Valid Subscription, with Handshake Failure]1515Success: status =Success: status =requestedrequested1616HandshakeHandshake1717Failure, e.g.:Failure, e.g.:404:Â NotÂ Found404:Â NotÂ FoundUpdate Subscription:Update Subscription:Subscription.status:Â errorSubscription.status:Â error[Invalid Subscription][Invalid Subscription]1818Failure, e.g.:Failure, e.g.:400:Â BadÂ Request400:Â BadÂ RequestNo subscription was createdNo subscription was created
Sequence diagram of creating a FHIR Subscription in FHIR R4BSequence diagram of creating a FHIR Subscription in FHIR R4B


Server implements the core functionality required for subscriptions (see Conformance).
Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.
Optional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension.
Server responds with its CapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.instantiates element.
Server responds with its CapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.implementationGuide element.
Server responds with its CapabilityStatement.
Client ensures that the endpoint is prepared (if applicable - see Channels).
Client requests a Subscription (e.g., via POST, PUT, etc.).
Server MAY accept the Subscription request and mark it active (e.g., supported channel and payload, no handshake required).
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.
If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to active.
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.
If the handshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to error.
Server MAY reject the Subscription request (e.g., unsupported channel type).

Server implements the core functionality required for subscriptions (see Conformance).Server implements the core functionality required for subscriptions (see ConformanceConformance).
Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.
Optional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension.OptionalOptional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.instantiates element.OptionalOptional Client attempts topic discovery via the CapabilityStatement.instantiatesCapabilityStatement.instantiates element.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.implementationGuide element.OptionalOptional Client attempts topic discovery via the CapabilityStatement.implementationGuideCapabilityStatement.implementationGuide element.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Client ensures that the endpoint is prepared (if applicable - see Channels).Client ensures that the endpoint is prepared (if applicable - see ChannelsChannels).
Client requests a Subscription (e.g., via POST, PUT, etc.).Client requests a SubscriptionSubscription (e.g., via POSTPOST, PUTPUT, etc.).
Server MAY accept the Subscription request and mark it active (e.g., supported channel and payload, no handshake required).Server MAY accept the SubscriptionSubscription request and mark it activeactive (e.g., supported channel and payload, no handshake required).
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).Server MAY accept the SubscriptionSubscription request and mark it requestedrequested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.Server sends a handshakehandshake bundle to the endpoint.
If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to active.If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to activeactive.
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).Server MAY accept the SubscriptionSubscription request and mark it requestedrequested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.Server sends a handshakehandshake bundle to the endpoint.
If the handshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to error.If the handshakehandshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to errorerror.
Server MAY reject the Subscription request (e.g., unsupported channel type).Server MAY reject the SubscriptionSubscription request (e.g., unsupported channel type).

Once the subscription is active, notifications will be sent according to the Channel.  Note that error states may occur, see Handling Errors for more information.Once the subscription is active, notifications will be sent according to the ChannelChannel.  Note that error states may occur, see Handling ErrorsHandling Errors for more information.

 
 
 
 
 "
20,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/workflow.html#workflow-fhir-r4,22,"[When a client requests a Subscription, the] Server MAY reject the Subscription request (e.g., unsupported channel type).",MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",workflow,workflow-fhir-r4,,2.3.3,Subscription Creation,,,,,SIMULATED: Inferno will reject Subscriptions for channel types that it does not support (anything other than rest-hook).,,Implemented,,,,,"Workflow: FHIR R4

FHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was created
Sequence diagram of creating a FHIR Subscription in FHIR R4B

FHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was createdFHIR R4 ServerFHIR R4 ServerClientClientEndpointServer Implementation1Implement core Subscription functionality2Implement topics and optionally advertiseClient Topic Discovery[CapabilityStatement with Extension Discovery]3Search for a supportedSubscriptionTopiccanonical URL in aCapabilityStatement, e.g.:GETÂ .../CapabilityStatement4CapabilityStatementwith topic canonical URLsinrest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery]5Search for a known IGCapabilityStatementinstantiated in a serverCapabilityStatement6CapabilityStatementwith IG capability canonical URLsin theinstantiateselement[CapabilityStatement with Implementation Guide Discovery]7Search for a known IG canonicallisted in a serverCapabilityStatement8CapabilityStatementwith IG canonical URLsin theimplementationGuideelementClient Topic Discovery[Client Subscription Request]9Create, configure, or initializethe necessary EndpointEndpoint10Create a Subscription, e.g.:POSTÂ .../SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake]11Success: status =activeSend notifications...[Valid Subscription, with Handshake Success]12Success: status =requested13Handshake14Success, e.g.:200:Â OKUpdate Subscription:Subscription.status:Â activeSend notifications...[Valid Subscription, with Handshake Failure]15Success: status =requested16Handshake17Failure, e.g.:404:Â NotÂ FoundUpdate Subscription:Subscription.status:Â error[Invalid Subscription]18Failure, e.g.:400:Â BadÂ RequestNo subscription was createdFHIR R4 ServerFHIR R4 ServerFHIR R4 ServerFHIR R4 ServerClientClientClientClientEndpointEndpointServer ImplementationServer Implementation11Implement core Subscription functionalityImplement core Subscription functionality22Implement topics and optionally advertiseImplement topics and optionally advertiseClient Topic DiscoveryClient Topic Discovery[CapabilityStatement with Extension Discovery][CapabilityStatement with Extension Discovery]33Search for a supportedSearch for a supportedSubscriptionTopicSubscriptionTopiccanonical URL in acanonical URL in aCapabilityStatementCapabilityStatement, e.g.:, e.g.:GETÂ .../CapabilityStatementGETÂ .../CapabilityStatement44CapabilityStatementCapabilityStatementwith topic canonical URLswith topic canonical URLsininrest.resource[subscription].extension[rest.resource[subscription].extension[.../capabilitystatement-subscriptiontopic-canonical].../capabilitystatement-subscriptiontopic-canonical][CapabilityStatement with Instantiates Discovery][CapabilityStatement with Instantiates Discovery]55Search for a known IGSearch for a known IGCapabilityStatementCapabilityStatementinstantiated in a serverinstantiated in a serverCapabilityStatementCapabilityStatement66CapabilityStatementCapabilityStatementwith IG capability canonical URLswith IG capability canonical URLsin thein theinstantiatesinstantiateselementelement[CapabilityStatement with Implementation Guide Discovery][CapabilityStatement with Implementation Guide Discovery]77Search for a known IG canonicalSearch for a known IG canonicallisted in a serverlisted in a serverCapabilityStatementCapabilityStatement88CapabilityStatementCapabilityStatementwith IG canonical URLswith IG canonical URLsin thein theimplementationGuideimplementationGuideelementelementClient Topic DiscoveryClient Topic Discovery[Client Subscription Request][Client Subscription Request]99Create, configure, or initializeCreate, configure, or initializethe necessary Endpointthe necessary EndpointEndpointEndpoint1010Create a Subscription, e.g.:Create a Subscription, e.g.:POSTÂ .../SubscriptionPOSTÂ .../SubscriptionServer Accepting or Rejecting a SubscriptionServer Accepting or Rejecting a Subscription[Valid Subscription, without Handshake][Valid Subscription, without Handshake]1111Success: status =Success: status =activeactiveSend notifications...Send notifications...[Valid Subscription, with Handshake Success][Valid Subscription, with Handshake Success]1212Success: status =Success: status =requestedrequested1313HandshakeHandshake1414Success, e.g.:Success, e.g.:200:Â OK200:Â OKUpdate Subscription:Update Subscription:Subscription.status:Â activeSubscription.status:Â activeSend notifications...Send notifications...[Valid Subscription, with Handshake Failure][Valid Subscription, with Handshake Failure]1515Success: status =Success: status =requestedrequested1616HandshakeHandshake1717Failure, e.g.:Failure, e.g.:404:Â NotÂ Found404:Â NotÂ FoundUpdate Subscription:Update Subscription:Subscription.status:Â errorSubscription.status:Â error[Invalid Subscription][Invalid Subscription]1818Failure, e.g.:Failure, e.g.:400:Â BadÂ Request400:Â BadÂ RequestNo subscription was createdNo subscription was created
Sequence diagram of creating a FHIR Subscription in FHIR R4BSequence diagram of creating a FHIR Subscription in FHIR R4B


Server implements the core functionality required for subscriptions (see Conformance).
Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.
Optional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension.
Server responds with its CapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.instantiates element.
Server responds with its CapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.implementationGuide element.
Server responds with its CapabilityStatement.
Client ensures that the endpoint is prepared (if applicable - see Channels).
Client requests a Subscription (e.g., via POST, PUT, etc.).
Server MAY accept the Subscription request and mark it active (e.g., supported channel and payload, no handshake required).
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.
If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to active.
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.
If the handshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to error.
Server MAY reject the Subscription request (e.g., unsupported channel type).

Server implements the core functionality required for subscriptions (see Conformance).Server implements the core functionality required for subscriptions (see ConformanceConformance).
Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.Server implements one or more subscription topics.  Implementation is specific to each topic, and will vary between servers.
Optional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension.OptionalOptional Client attempts topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.instantiates element.OptionalOptional Client attempts topic discovery via the CapabilityStatement.instantiatesCapabilityStatement.instantiates element.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Optional Client attempts topic discovery via the CapabilityStatement.implementationGuide element.OptionalOptional Client attempts topic discovery via the CapabilityStatement.implementationGuideCapabilityStatement.implementationGuide element.
Server responds with its CapabilityStatement.Server responds with its CapabilityStatementCapabilityStatement.
Client ensures that the endpoint is prepared (if applicable - see Channels).Client ensures that the endpoint is prepared (if applicable - see ChannelsChannels).
Client requests a Subscription (e.g., via POST, PUT, etc.).Client requests a SubscriptionSubscription (e.g., via POSTPOST, PUTPUT, etc.).
Server MAY accept the Subscription request and mark it active (e.g., supported channel and payload, no handshake required).Server MAY accept the SubscriptionSubscription request and mark it activeactive (e.g., supported channel and payload, no handshake required).
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).Server MAY accept the SubscriptionSubscription request and mark it requestedrequested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.Server sends a handshakehandshake bundle to the endpoint.
If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to active.If the Endpoint responds appropriately, per the channel requirements (e.g., in REST an HTTP Success code such as 200), the Server updates the subscription to activeactive.
Server MAY accept the Subscription request and mark it requested (e.g., supported channel and payload, handshake required).Server MAY accept the SubscriptionSubscription request and mark it requestedrequested (e.g., supported channel and payload, handshake required).
Server sends a handshake bundle to the endpoint.Server sends a handshakehandshake bundle to the endpoint.
If the handshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to error.If the handshakehandshake fails (e.g., connection failure, bad response, etc.), the Server updates the subscription to errorerror.
Server MAY reject the Subscription request (e.g., unsupported channel type).Server MAY reject the SubscriptionSubscription request (e.g., unsupported channel type).

Once the subscription is active, notifications will be sent according to the Channel.  Note that error states may occur, see Handling Errors for more information.Once the subscription is active, notifications will be sent according to the ChannelChannel.  Note that error states may occur, see Handling ErrorsHandling Errors for more information.

 
 
 
 
 "
21,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/channels.html#rest-hook-1,23,"To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hook and set the endpoint to the appropriate client URL.",SHALL,Client,,,,Yes,,Yes,,channels,rest-hook-1,,2.4.0.1,Subscription Creation - Rest Hook,,,,Verify that client-provided subscriptions for a rest-hook channel use the appropriate channel type and have a valid http URL as the endpoint.,SIMULATED: Inferno will accept Subscription creation requests and verify that a Subscription provided by testers for use in server testing  is rest-hook and that it uses the Inferno notification URL.,,,,,,,"REST-Hook
To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hookrest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.
To convey an event notification, the server POSTs a Bundle to the clientâs nominated endpoint URL per the format requests in the Subscription:To convey an event notification, the server POSTs a BundleBundle to the clientâs nominated endpoint URL per the format requests in the Subscription:

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).The content-typecontent-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payloadSubscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.Each Subscription.channel.headerSubscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.The bundle SHALL comply with the Backported R5 Notification Bundle ProfileBackported R5 Notification Bundle Profile.

When a Subscription is created for a REST Hook channel type, the server SHALL set initial status to requested, pending verification of the nominated endpoint URL. After a successful handshake notification has been sent and accepted, the server SHALL update the status to active. Any errors in the initial handshake SHALL result in the status being changed to error.When a SubscriptionSubscription is created for a REST Hook channel type, the server SHALL set initial status to requestedrequested, pending verification of the nominated endpoint URL. After a successful handshakehandshake notification has been sent and accepted, the server SHALL update the status to activeactive. Any errors in the initial handshakehandshake SHALL result in the status being changed to errorerror.
An example workflow for establishing a rest-hook subscription is shown below.An example workflow for establishing a rest-hookrest-hook subscription is shown below.

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OK
Diagram showing a possible workflow for rest-hook subscriptions

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerFHIR ServerREST APIREST APIFHIR ServerFHIR ServerREST APIREST APIClientClientClientClientClient EndpointClient Endpoint(HTTP/S)(HTTP/S)Client EndpointClient Endpoint(HTTP/S)(HTTP/S)Subscription NegotiationSubscription Negotiation11Create SubscriptionCreate Subscriptionchannel.type:Â rest-hookchannel.type:Â rest-hook22SuccessSuccessSubscription.status:Â requestedSubscription.status:Â requested33HTTP POST - HandshakeHTTP POST - HandshakeBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â handshakeSubscriptionStatus.type:Â handshake44HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OKServer updates Subscription:Server updates Subscription:Subscription.status:Â activeSubscription.status:Â activeREST Subscription ProcessingREST Subscription Processing[Server sends heartbeat][Server sends heartbeat]55HTTP POST - HeartbeatHTTP POST - HeartbeatBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â heartbeatSubscriptionStatus.type:Â heartbeat66HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK[Server sends event-notification][Server sends event-notification]77HTTP POST - NotificationHTTP POST - NotificationBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â event-notificationSubscriptionStatus.type:Â event-notification88HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK
Diagram showing a possible workflow for rest-hook subscriptionsDiagram showing a possible workflow for rest-hook subscriptions


Client creates a Subscription with the channel.type set to rest-hook.
Server responds with a success code and creates the subscription with a state of requested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).
Server may send notifications of type heartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).
Server may send notifications of type event-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).

Client creates a Subscription with the channel.type set to rest-hook.Client creates a SubscriptionSubscription with the channel.typechannel.type set to rest-hookrest-hook.
Server responds with a success code and creates the subscription with a state of requested.Server responds with a success code and creates the subscription with a state of requestedrequested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.Server performs an HTTP POST to the requested endpoint with a handshakehandshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200200).
Server may send notifications of type heartbeat at any time.Server may send notifications of type heartbeatheartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).
Server may send notifications of type event-notification at any time.Server may send notifications of type event-notificationevent-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).

Security Notes"
22,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/channels.html#rest-hook-1,24,This URL [for the subscription notification endpoint] must be accessible by the hosting server.,SHALL,Client,,,,Yes,,Yes,,channels,rest-hook-1,,2.4.0.1,Subscription Creation - Rest Hook,,,,Verify that Inferno can reach the client-indicated URL using a handshake notification. Fail it it receives an error startus back.,SIMULATED: Inferno will host an endpoint that accepts POST notifications.,,,,,,,"REST-Hook
To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hookrest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.
To convey an event notification, the server POSTs a Bundle to the clientâs nominated endpoint URL per the format requests in the Subscription:To convey an event notification, the server POSTs a BundleBundle to the clientâs nominated endpoint URL per the format requests in the Subscription:

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).The content-typecontent-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payloadSubscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.Each Subscription.channel.headerSubscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.The bundle SHALL comply with the Backported R5 Notification Bundle ProfileBackported R5 Notification Bundle Profile.

When a Subscription is created for a REST Hook channel type, the server SHALL set initial status to requested, pending verification of the nominated endpoint URL. After a successful handshake notification has been sent and accepted, the server SHALL update the status to active. Any errors in the initial handshake SHALL result in the status being changed to error.When a SubscriptionSubscription is created for a REST Hook channel type, the server SHALL set initial status to requestedrequested, pending verification of the nominated endpoint URL. After a successful handshakehandshake notification has been sent and accepted, the server SHALL update the status to activeactive. Any errors in the initial handshakehandshake SHALL result in the status being changed to errorerror.
An example workflow for establishing a rest-hook subscription is shown below.An example workflow for establishing a rest-hookrest-hook subscription is shown below.

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OK
Diagram showing a possible workflow for rest-hook subscriptions

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerFHIR ServerREST APIREST APIFHIR ServerFHIR ServerREST APIREST APIClientClientClientClientClient EndpointClient Endpoint(HTTP/S)(HTTP/S)Client EndpointClient Endpoint(HTTP/S)(HTTP/S)Subscription NegotiationSubscription Negotiation11Create SubscriptionCreate Subscriptionchannel.type:Â rest-hookchannel.type:Â rest-hook22SuccessSuccessSubscription.status:Â requestedSubscription.status:Â requested33HTTP POST - HandshakeHTTP POST - HandshakeBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â handshakeSubscriptionStatus.type:Â handshake44HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OKServer updates Subscription:Server updates Subscription:Subscription.status:Â activeSubscription.status:Â activeREST Subscription ProcessingREST Subscription Processing[Server sends heartbeat][Server sends heartbeat]55HTTP POST - HeartbeatHTTP POST - HeartbeatBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â heartbeatSubscriptionStatus.type:Â heartbeat66HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK[Server sends event-notification][Server sends event-notification]77HTTP POST - NotificationHTTP POST - NotificationBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â event-notificationSubscriptionStatus.type:Â event-notification88HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK
Diagram showing a possible workflow for rest-hook subscriptionsDiagram showing a possible workflow for rest-hook subscriptions


Client creates a Subscription with the channel.type set to rest-hook.
Server responds with a success code and creates the subscription with a state of requested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).
Server may send notifications of type heartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).
Server may send notifications of type event-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).

Client creates a Subscription with the channel.type set to rest-hook.Client creates a SubscriptionSubscription with the channel.typechannel.type set to rest-hookrest-hook.
Server responds with a success code and creates the subscription with a state of requested.Server responds with a success code and creates the subscription with a state of requestedrequested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.Server performs an HTTP POST to the requested endpoint with a handshakehandshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200200).
Server may send notifications of type heartbeat at any time.Server may send notifications of type heartbeatheartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).
Server may send notifications of type event-notification at any time.Server may send notifications of type event-notificationevent-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).

Security Notes"
23,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/channels.html#rest-hook-1,25,"To convey an event notification, the server POSTs a Bundle to the client’s nominated endpoint URL",SHALL,Server,,,,Yes,,Yes,,channels,rest-hook-1,,2.4.0.1,Notification Delivery - Rest Hook,,,,We will have a test waiting to receive an incoming request on the subscription channel endpoint included in the Subscription resource sent to the server. It will only accept a POST request with a notification Bundle that has a SubscriptionStatus (Parameters) resource in it's first entry with type set to `event-notification` to differentiate from other notification request types,SIMULATED: Inferno will POST the client-provided notification.,For Basic Workflow,Implemented,,,,,"REST-Hook
To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hookrest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.
To convey an event notification, the server POSTs a Bundle to the clientâs nominated endpoint URL per the format requests in the Subscription:To convey an event notification, the server POSTs a BundleBundle to the clientâs nominated endpoint URL per the format requests in the Subscription:

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).The content-typecontent-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payloadSubscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.Each Subscription.channel.headerSubscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.The bundle SHALL comply with the Backported R5 Notification Bundle ProfileBackported R5 Notification Bundle Profile.

When a Subscription is created for a REST Hook channel type, the server SHALL set initial status to requested, pending verification of the nominated endpoint URL. After a successful handshake notification has been sent and accepted, the server SHALL update the status to active. Any errors in the initial handshake SHALL result in the status being changed to error.When a SubscriptionSubscription is created for a REST Hook channel type, the server SHALL set initial status to requestedrequested, pending verification of the nominated endpoint URL. After a successful handshakehandshake notification has been sent and accepted, the server SHALL update the status to activeactive. Any errors in the initial handshakehandshake SHALL result in the status being changed to errorerror.
An example workflow for establishing a rest-hook subscription is shown below.An example workflow for establishing a rest-hookrest-hook subscription is shown below.

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OK
Diagram showing a possible workflow for rest-hook subscriptions

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerFHIR ServerREST APIREST APIFHIR ServerFHIR ServerREST APIREST APIClientClientClientClientClient EndpointClient Endpoint(HTTP/S)(HTTP/S)Client EndpointClient Endpoint(HTTP/S)(HTTP/S)Subscription NegotiationSubscription Negotiation11Create SubscriptionCreate Subscriptionchannel.type:Â rest-hookchannel.type:Â rest-hook22SuccessSuccessSubscription.status:Â requestedSubscription.status:Â requested33HTTP POST - HandshakeHTTP POST - HandshakeBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â handshakeSubscriptionStatus.type:Â handshake44HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OKServer updates Subscription:Server updates Subscription:Subscription.status:Â activeSubscription.status:Â activeREST Subscription ProcessingREST Subscription Processing[Server sends heartbeat][Server sends heartbeat]55HTTP POST - HeartbeatHTTP POST - HeartbeatBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â heartbeatSubscriptionStatus.type:Â heartbeat66HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK[Server sends event-notification][Server sends event-notification]77HTTP POST - NotificationHTTP POST - NotificationBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â event-notificationSubscriptionStatus.type:Â event-notification88HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK
Diagram showing a possible workflow for rest-hook subscriptionsDiagram showing a possible workflow for rest-hook subscriptions


Client creates a Subscription with the channel.type set to rest-hook.
Server responds with a success code and creates the subscription with a state of requested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).
Server may send notifications of type heartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).
Server may send notifications of type event-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).

Client creates a Subscription with the channel.type set to rest-hook.Client creates a SubscriptionSubscription with the channel.typechannel.type set to rest-hookrest-hook.
Server responds with a success code and creates the subscription with a state of requested.Server responds with a success code and creates the subscription with a state of requestedrequested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.Server performs an HTTP POST to the requested endpoint with a handshakehandshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200200).
Server may send notifications of type heartbeat at any time.Server may send notifications of type heartbeatheartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).
Server may send notifications of type event-notification at any time.Server may send notifications of type event-notificationevent-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).

Security Notes"
24,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/channels.html#rest-hook-1,26,The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).,SHALL,Server,,,,Yes,,Yes,,channels,rest-hook-1,,2.4.0.1,Notification Delivery - Rest Hook,,,,"For a rest-hook subscription, verify that the content-type header of the POST request matches the Subscription's MIME type (including handshake and heartbeats).",SIMULATED: Inferno will use the MIME type from the subscription as the content-type when POSTing notifications,For Basic Workflow,requested,,notification_validation,,"IG AUTHORS: is Subscription.channel.payload required in addition to the content extension? Validation rules will pass without it because an element with children is considered to be populated.

TEST DESIGN: do we need to verify / adjust the provided notification body to make sure it meets the Subscription MIME type?","REST-Hook
To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hookrest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.
To convey an event notification, the server POSTs a Bundle to the clientâs nominated endpoint URL per the format requests in the Subscription:To convey an event notification, the server POSTs a BundleBundle to the clientâs nominated endpoint URL per the format requests in the Subscription:

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).The content-typecontent-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payloadSubscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.Each Subscription.channel.headerSubscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.The bundle SHALL comply with the Backported R5 Notification Bundle ProfileBackported R5 Notification Bundle Profile.

When a Subscription is created for a REST Hook channel type, the server SHALL set initial status to requested, pending verification of the nominated endpoint URL. After a successful handshake notification has been sent and accepted, the server SHALL update the status to active. Any errors in the initial handshake SHALL result in the status being changed to error.When a SubscriptionSubscription is created for a REST Hook channel type, the server SHALL set initial status to requestedrequested, pending verification of the nominated endpoint URL. After a successful handshakehandshake notification has been sent and accepted, the server SHALL update the status to activeactive. Any errors in the initial handshakehandshake SHALL result in the status being changed to errorerror.
An example workflow for establishing a rest-hook subscription is shown below.An example workflow for establishing a rest-hookrest-hook subscription is shown below.

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OK
Diagram showing a possible workflow for rest-hook subscriptions

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerFHIR ServerREST APIREST APIFHIR ServerFHIR ServerREST APIREST APIClientClientClientClientClient EndpointClient Endpoint(HTTP/S)(HTTP/S)Client EndpointClient Endpoint(HTTP/S)(HTTP/S)Subscription NegotiationSubscription Negotiation11Create SubscriptionCreate Subscriptionchannel.type:Â rest-hookchannel.type:Â rest-hook22SuccessSuccessSubscription.status:Â requestedSubscription.status:Â requested33HTTP POST - HandshakeHTTP POST - HandshakeBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â handshakeSubscriptionStatus.type:Â handshake44HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OKServer updates Subscription:Server updates Subscription:Subscription.status:Â activeSubscription.status:Â activeREST Subscription ProcessingREST Subscription Processing[Server sends heartbeat][Server sends heartbeat]55HTTP POST - HeartbeatHTTP POST - HeartbeatBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â heartbeatSubscriptionStatus.type:Â heartbeat66HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK[Server sends event-notification][Server sends event-notification]77HTTP POST - NotificationHTTP POST - NotificationBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â event-notificationSubscriptionStatus.type:Â event-notification88HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK
Diagram showing a possible workflow for rest-hook subscriptionsDiagram showing a possible workflow for rest-hook subscriptions


Client creates a Subscription with the channel.type set to rest-hook.
Server responds with a success code and creates the subscription with a state of requested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).
Server may send notifications of type heartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).
Server may send notifications of type event-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).

Client creates a Subscription with the channel.type set to rest-hook.Client creates a SubscriptionSubscription with the channel.typechannel.type set to rest-hookrest-hook.
Server responds with a success code and creates the subscription with a state of requested.Server responds with a success code and creates the subscription with a state of requestedrequested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.Server performs an HTTP POST to the requested endpoint with a handshakehandshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200200).
Server may send notifications of type heartbeat at any time.Server may send notifications of type heartbeatheartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).
Server may send notifications of type event-notification at any time.Server may send notifications of type event-notificationevent-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).

Security Notes"
25,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/channels.html#rest-hook-1,27,Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.,SHALL,Server,,,,Yes,,Yes,,channels,rest-hook-1,,2.4.0.1,Notification Delivery - Rest Hook,,,,"For a rest-hook subscription, verify that each Subscription.channel.header entry appears within the headers of the POST request for a notification (including handshake and heartbeats).",SIMULATED: Inferno will add headers from the Subscription to notifications,For Basic Workflow,requested,,notification_validation,,,"REST-Hook
To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hookrest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.
To convey an event notification, the server POSTs a Bundle to the clientâs nominated endpoint URL per the format requests in the Subscription:To convey an event notification, the server POSTs a BundleBundle to the clientâs nominated endpoint URL per the format requests in the Subscription:

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).The content-typecontent-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payloadSubscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.Each Subscription.channel.headerSubscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.The bundle SHALL comply with the Backported R5 Notification Bundle ProfileBackported R5 Notification Bundle Profile.

When a Subscription is created for a REST Hook channel type, the server SHALL set initial status to requested, pending verification of the nominated endpoint URL. After a successful handshake notification has been sent and accepted, the server SHALL update the status to active. Any errors in the initial handshake SHALL result in the status being changed to error.When a SubscriptionSubscription is created for a REST Hook channel type, the server SHALL set initial status to requestedrequested, pending verification of the nominated endpoint URL. After a successful handshakehandshake notification has been sent and accepted, the server SHALL update the status to activeactive. Any errors in the initial handshakehandshake SHALL result in the status being changed to errorerror.
An example workflow for establishing a rest-hook subscription is shown below.An example workflow for establishing a rest-hookrest-hook subscription is shown below.

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OK
Diagram showing a possible workflow for rest-hook subscriptions

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerFHIR ServerREST APIREST APIFHIR ServerFHIR ServerREST APIREST APIClientClientClientClientClient EndpointClient Endpoint(HTTP/S)(HTTP/S)Client EndpointClient Endpoint(HTTP/S)(HTTP/S)Subscription NegotiationSubscription Negotiation11Create SubscriptionCreate Subscriptionchannel.type:Â rest-hookchannel.type:Â rest-hook22SuccessSuccessSubscription.status:Â requestedSubscription.status:Â requested33HTTP POST - HandshakeHTTP POST - HandshakeBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â handshakeSubscriptionStatus.type:Â handshake44HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OKServer updates Subscription:Server updates Subscription:Subscription.status:Â activeSubscription.status:Â activeREST Subscription ProcessingREST Subscription Processing[Server sends heartbeat][Server sends heartbeat]55HTTP POST - HeartbeatHTTP POST - HeartbeatBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â heartbeatSubscriptionStatus.type:Â heartbeat66HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK[Server sends event-notification][Server sends event-notification]77HTTP POST - NotificationHTTP POST - NotificationBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â event-notificationSubscriptionStatus.type:Â event-notification88HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK
Diagram showing a possible workflow for rest-hook subscriptionsDiagram showing a possible workflow for rest-hook subscriptions


Client creates a Subscription with the channel.type set to rest-hook.
Server responds with a success code and creates the subscription with a state of requested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).
Server may send notifications of type heartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).
Server may send notifications of type event-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).

Client creates a Subscription with the channel.type set to rest-hook.Client creates a SubscriptionSubscription with the channel.typechannel.type set to rest-hookrest-hook.
Server responds with a success code and creates the subscription with a state of requested.Server responds with a success code and creates the subscription with a state of requestedrequested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.Server performs an HTTP POST to the requested endpoint with a handshakehandshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200200).
Server may send notifications of type heartbeat at any time.Server may send notifications of type heartbeatheartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).
Server may send notifications of type event-notification at any time.Server may send notifications of type event-notificationevent-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).

Security Notes"
26,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/channels.html#rest-hook-1,28,The bundle SHALL comply with the Backported R5 Notification Bundle Profile.,SHALL,Server,,,,Yes,,Yes,,channels,rest-hook-1,,2.4.0.1,Notification Content,,,,Verify using the HL7 validator.,TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,Implemented,,notification_validation,,,"REST-Hook
To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hookrest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.
To convey an event notification, the server POSTs a Bundle to the clientâs nominated endpoint URL per the format requests in the Subscription:To convey an event notification, the server POSTs a BundleBundle to the clientâs nominated endpoint URL per the format requests in the Subscription:

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).The content-typecontent-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payloadSubscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.Each Subscription.channel.headerSubscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.The bundle SHALL comply with the Backported R5 Notification Bundle ProfileBackported R5 Notification Bundle Profile.

When a Subscription is created for a REST Hook channel type, the server SHALL set initial status to requested, pending verification of the nominated endpoint URL. After a successful handshake notification has been sent and accepted, the server SHALL update the status to active. Any errors in the initial handshake SHALL result in the status being changed to error.When a SubscriptionSubscription is created for a REST Hook channel type, the server SHALL set initial status to requestedrequested, pending verification of the nominated endpoint URL. After a successful handshakehandshake notification has been sent and accepted, the server SHALL update the status to activeactive. Any errors in the initial handshakehandshake SHALL result in the status being changed to errorerror.
An example workflow for establishing a rest-hook subscription is shown below.An example workflow for establishing a rest-hookrest-hook subscription is shown below.

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OK
Diagram showing a possible workflow for rest-hook subscriptions

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerFHIR ServerREST APIREST APIFHIR ServerFHIR ServerREST APIREST APIClientClientClientClientClient EndpointClient Endpoint(HTTP/S)(HTTP/S)Client EndpointClient Endpoint(HTTP/S)(HTTP/S)Subscription NegotiationSubscription Negotiation11Create SubscriptionCreate Subscriptionchannel.type:Â rest-hookchannel.type:Â rest-hook22SuccessSuccessSubscription.status:Â requestedSubscription.status:Â requested33HTTP POST - HandshakeHTTP POST - HandshakeBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â handshakeSubscriptionStatus.type:Â handshake44HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OKServer updates Subscription:Server updates Subscription:Subscription.status:Â activeSubscription.status:Â activeREST Subscription ProcessingREST Subscription Processing[Server sends heartbeat][Server sends heartbeat]55HTTP POST - HeartbeatHTTP POST - HeartbeatBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â heartbeatSubscriptionStatus.type:Â heartbeat66HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK[Server sends event-notification][Server sends event-notification]77HTTP POST - NotificationHTTP POST - NotificationBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â event-notificationSubscriptionStatus.type:Â event-notification88HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK
Diagram showing a possible workflow for rest-hook subscriptionsDiagram showing a possible workflow for rest-hook subscriptions


Client creates a Subscription with the channel.type set to rest-hook.
Server responds with a success code and creates the subscription with a state of requested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).
Server may send notifications of type heartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).
Server may send notifications of type event-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).

Client creates a Subscription with the channel.type set to rest-hook.Client creates a SubscriptionSubscription with the channel.typechannel.type set to rest-hookrest-hook.
Server responds with a success code and creates the subscription with a state of requested.Server responds with a success code and creates the subscription with a state of requestedrequested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.Server performs an HTTP POST to the requested endpoint with a handshakehandshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200200).
Server may send notifications of type heartbeat at any time.Server may send notifications of type heartbeatheartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).
Server may send notifications of type event-notification at any time.Server may send notifications of type event-notificationevent-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).

Security Notes"
27,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/channels.html#rest-hook-1,29,"When a Subscription is created for a REST Hook channel type, the server SHALL set initial status to requested, pending verification of the nominated endpoint URL.",SHALL,Server,,,,Yes,,Yes,,channels,rest-hook-1,,2.4.0.1,Subscription Creation - Rest Hook,,,,"In the Subscription create test, the test will check that the returned Subscription from the create request has it's status set to `requested`. Then later the handshake validation test will ensure the SubscriptionStatus resource in the Bundle's first entry has a status of `requested` as well",SIMULATED: Inferno will look for the presence of a successful handshake to determine the status of a Subscription when that information is requested or sent.,Subscription Status Tracking,Implemented,,,,SIMULATION DESIGN: how to handle Subscription reads and keeping the status consistent?,"REST-Hook
To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hookrest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.
To convey an event notification, the server POSTs a Bundle to the clientâs nominated endpoint URL per the format requests in the Subscription:To convey an event notification, the server POSTs a BundleBundle to the clientâs nominated endpoint URL per the format requests in the Subscription:

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).The content-typecontent-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payloadSubscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.Each Subscription.channel.headerSubscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.The bundle SHALL comply with the Backported R5 Notification Bundle ProfileBackported R5 Notification Bundle Profile.

When a Subscription is created for a REST Hook channel type, the server SHALL set initial status to requested, pending verification of the nominated endpoint URL. After a successful handshake notification has been sent and accepted, the server SHALL update the status to active. Any errors in the initial handshake SHALL result in the status being changed to error.When a SubscriptionSubscription is created for a REST Hook channel type, the server SHALL set initial status to requestedrequested, pending verification of the nominated endpoint URL. After a successful handshakehandshake notification has been sent and accepted, the server SHALL update the status to activeactive. Any errors in the initial handshakehandshake SHALL result in the status being changed to errorerror.
An example workflow for establishing a rest-hook subscription is shown below.An example workflow for establishing a rest-hookrest-hook subscription is shown below.

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OK
Diagram showing a possible workflow for rest-hook subscriptions

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerFHIR ServerREST APIREST APIFHIR ServerFHIR ServerREST APIREST APIClientClientClientClientClient EndpointClient Endpoint(HTTP/S)(HTTP/S)Client EndpointClient Endpoint(HTTP/S)(HTTP/S)Subscription NegotiationSubscription Negotiation11Create SubscriptionCreate Subscriptionchannel.type:Â rest-hookchannel.type:Â rest-hook22SuccessSuccessSubscription.status:Â requestedSubscription.status:Â requested33HTTP POST - HandshakeHTTP POST - HandshakeBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â handshakeSubscriptionStatus.type:Â handshake44HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OKServer updates Subscription:Server updates Subscription:Subscription.status:Â activeSubscription.status:Â activeREST Subscription ProcessingREST Subscription Processing[Server sends heartbeat][Server sends heartbeat]55HTTP POST - HeartbeatHTTP POST - HeartbeatBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â heartbeatSubscriptionStatus.type:Â heartbeat66HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK[Server sends event-notification][Server sends event-notification]77HTTP POST - NotificationHTTP POST - NotificationBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â event-notificationSubscriptionStatus.type:Â event-notification88HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK
Diagram showing a possible workflow for rest-hook subscriptionsDiagram showing a possible workflow for rest-hook subscriptions


Client creates a Subscription with the channel.type set to rest-hook.
Server responds with a success code and creates the subscription with a state of requested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).
Server may send notifications of type heartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).
Server may send notifications of type event-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).

Client creates a Subscription with the channel.type set to rest-hook.Client creates a SubscriptionSubscription with the channel.typechannel.type set to rest-hookrest-hook.
Server responds with a success code and creates the subscription with a state of requested.Server responds with a success code and creates the subscription with a state of requestedrequested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.Server performs an HTTP POST to the requested endpoint with a handshakehandshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200200).
Server may send notifications of type heartbeat at any time.Server may send notifications of type heartbeatheartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).
Server may send notifications of type event-notification at any time.Server may send notifications of type event-notificationevent-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).

Security Notes"
28,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/channels.html#rest-hook-1,30,"After a successful handshake notification has been sent and accepted [for a REST Hook channel type], the server SHALL update the status to active.",SHALL,Server,,,,Yes,,Yes,,channels,rest-hook-1,,2.4.0.1,Handshake - Rest Hook,,,,"Create a rest-hook Subscription with a url that returns success, wait for a handshake, then verify that there is a subsequent event notification and that its SubscriptionStatus instance indicates that the Subscription is active.",SIMULATED: Inferno will look for the presence of a successful handshake to determine the status of a Subscription when that information is requested or sent.,Subscription Status Tracking,Implemented,,,"Emily's Original: After the handshake test, there will be a test for the $status operation on the Subscription resource. The returned Bundle will pull out the SubscriptionTopic (Parameters) resource which will be validated and the test will ensure the status is set to `active` since it will take place after the handshake

clarifying the test proceedure slightly",SIMULATION DESIGN: how to handle Subscription reads and keeping the status consistent?,"REST-Hook
To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hookrest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.
To convey an event notification, the server POSTs a Bundle to the clientâs nominated endpoint URL per the format requests in the Subscription:To convey an event notification, the server POSTs a BundleBundle to the clientâs nominated endpoint URL per the format requests in the Subscription:

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).The content-typecontent-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payloadSubscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.Each Subscription.channel.headerSubscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.The bundle SHALL comply with the Backported R5 Notification Bundle ProfileBackported R5 Notification Bundle Profile.

When a Subscription is created for a REST Hook channel type, the server SHALL set initial status to requested, pending verification of the nominated endpoint URL. After a successful handshake notification has been sent and accepted, the server SHALL update the status to active. Any errors in the initial handshake SHALL result in the status being changed to error.When a SubscriptionSubscription is created for a REST Hook channel type, the server SHALL set initial status to requestedrequested, pending verification of the nominated endpoint URL. After a successful handshakehandshake notification has been sent and accepted, the server SHALL update the status to activeactive. Any errors in the initial handshakehandshake SHALL result in the status being changed to errorerror.
An example workflow for establishing a rest-hook subscription is shown below.An example workflow for establishing a rest-hookrest-hook subscription is shown below.

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OK
Diagram showing a possible workflow for rest-hook subscriptions

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerFHIR ServerREST APIREST APIFHIR ServerFHIR ServerREST APIREST APIClientClientClientClientClient EndpointClient Endpoint(HTTP/S)(HTTP/S)Client EndpointClient Endpoint(HTTP/S)(HTTP/S)Subscription NegotiationSubscription Negotiation11Create SubscriptionCreate Subscriptionchannel.type:Â rest-hookchannel.type:Â rest-hook22SuccessSuccessSubscription.status:Â requestedSubscription.status:Â requested33HTTP POST - HandshakeHTTP POST - HandshakeBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â handshakeSubscriptionStatus.type:Â handshake44HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OKServer updates Subscription:Server updates Subscription:Subscription.status:Â activeSubscription.status:Â activeREST Subscription ProcessingREST Subscription Processing[Server sends heartbeat][Server sends heartbeat]55HTTP POST - HeartbeatHTTP POST - HeartbeatBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â heartbeatSubscriptionStatus.type:Â heartbeat66HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK[Server sends event-notification][Server sends event-notification]77HTTP POST - NotificationHTTP POST - NotificationBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â event-notificationSubscriptionStatus.type:Â event-notification88HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK
Diagram showing a possible workflow for rest-hook subscriptionsDiagram showing a possible workflow for rest-hook subscriptions


Client creates a Subscription with the channel.type set to rest-hook.
Server responds with a success code and creates the subscription with a state of requested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).
Server may send notifications of type heartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).
Server may send notifications of type event-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).

Client creates a Subscription with the channel.type set to rest-hook.Client creates a SubscriptionSubscription with the channel.typechannel.type set to rest-hookrest-hook.
Server responds with a success code and creates the subscription with a state of requested.Server responds with a success code and creates the subscription with a state of requestedrequested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.Server performs an HTTP POST to the requested endpoint with a handshakehandshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200200).
Server may send notifications of type heartbeat at any time.Server may send notifications of type heartbeatheartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).
Server may send notifications of type event-notification at any time.Server may send notifications of type event-notificationevent-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).

Security Notes"
29,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/channels.html#rest-hook-1,31,Any errors in the initial handshake [for a REST Hook channel type] SHALL result in the status being changed to error.,SHALL,Server,,,,Yes,,Yes,,channels,rest-hook-1,,2.4.0.1,Handshake - Rest Hook,,,,"Create a rest-hook Subscription with a url that returns a 404, wait for a handshake to that url, and then invoke the $status operation for the Subscription and validate that the Subscription status is `error`.",SIMULATED: Inferno will look for the presence of a error  handshake to determine the status of a Subscription when that information is requested or sent.,Subscription Status Tracking,Implemented,,,,SIMULATION DESIGN: how to handle Subscription reads and keeping the status consistent?,"REST-Hook
To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hookrest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.
To convey an event notification, the server POSTs a Bundle to the clientâs nominated endpoint URL per the format requests in the Subscription:To convey an event notification, the server POSTs a BundleBundle to the clientâs nominated endpoint URL per the format requests in the Subscription:

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).The content-typecontent-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payloadSubscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.Each Subscription.channel.headerSubscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.The bundle SHALL comply with the Backported R5 Notification Bundle ProfileBackported R5 Notification Bundle Profile.

When a Subscription is created for a REST Hook channel type, the server SHALL set initial status to requested, pending verification of the nominated endpoint URL. After a successful handshake notification has been sent and accepted, the server SHALL update the status to active. Any errors in the initial handshake SHALL result in the status being changed to error.When a SubscriptionSubscription is created for a REST Hook channel type, the server SHALL set initial status to requestedrequested, pending verification of the nominated endpoint URL. After a successful handshakehandshake notification has been sent and accepted, the server SHALL update the status to activeactive. Any errors in the initial handshakehandshake SHALL result in the status being changed to errorerror.
An example workflow for establishing a rest-hook subscription is shown below.An example workflow for establishing a rest-hookrest-hook subscription is shown below.

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OK
Diagram showing a possible workflow for rest-hook subscriptions

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerFHIR ServerREST APIREST APIFHIR ServerFHIR ServerREST APIREST APIClientClientClientClientClient EndpointClient Endpoint(HTTP/S)(HTTP/S)Client EndpointClient Endpoint(HTTP/S)(HTTP/S)Subscription NegotiationSubscription Negotiation11Create SubscriptionCreate Subscriptionchannel.type:Â rest-hookchannel.type:Â rest-hook22SuccessSuccessSubscription.status:Â requestedSubscription.status:Â requested33HTTP POST - HandshakeHTTP POST - HandshakeBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â handshakeSubscriptionStatus.type:Â handshake44HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OKServer updates Subscription:Server updates Subscription:Subscription.status:Â activeSubscription.status:Â activeREST Subscription ProcessingREST Subscription Processing[Server sends heartbeat][Server sends heartbeat]55HTTP POST - HeartbeatHTTP POST - HeartbeatBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â heartbeatSubscriptionStatus.type:Â heartbeat66HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK[Server sends event-notification][Server sends event-notification]77HTTP POST - NotificationHTTP POST - NotificationBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â event-notificationSubscriptionStatus.type:Â event-notification88HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK
Diagram showing a possible workflow for rest-hook subscriptionsDiagram showing a possible workflow for rest-hook subscriptions


Client creates a Subscription with the channel.type set to rest-hook.
Server responds with a success code and creates the subscription with a state of requested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).
Server may send notifications of type heartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).
Server may send notifications of type event-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).

Client creates a Subscription with the channel.type set to rest-hook.Client creates a SubscriptionSubscription with the channel.typechannel.type set to rest-hookrest-hook.
Server responds with a success code and creates the subscription with a state of requested.Server responds with a success code and creates the subscription with a state of requestedrequested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.Server performs an HTTP POST to the requested endpoint with a handshakehandshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200200).
Server may send notifications of type heartbeat at any time.Server may send notifications of type heartbeatheartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).
Server may send notifications of type event-notification at any time.Server may send notifications of type event-notificationevent-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).

Security Notes"
30,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/channels.html#security-notes,32,"HTTP is neither a secure nor an encrypted channel, nor does it provide endpoint verification. It is strongly recommended that implementations refuse requests to send notifications to URLs using the HTTP protocol (use HTTPS instead).",SHOULD,Server,,,,Yes,,Yes,,channels,security-notes,,2.4.0.0.1,Subscription Creation - Rest Hook,,,,Attempt to create a rest-hook Subscription with a HTTP endpoint and validate that the server rejects it or changes it to use HTTPS.,"SIMULATED: Inferno will not enforce this since clients are not prohibited, but a warning will be included when http endpoints are provided by the client.",Subscription Validation,,,,,,"Security Notes
HTTP is neither a secure nor an encrypted channel, nor does it provide endpoint verification. It is strongly recommended that implementations refuse requests to send notifications to URLs using the HTTP protocol (use HTTPS instead).HTTP is neither a secure nor an encrypted channel, nor does it provide endpoint verification. It is strongly recommended that implementations refuse requests to send notifications to URLs using the HTTP protocol (use HTTPS instead).
Websockets"
31,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/notifications.html#event-notifications-and-what-to-include,33,"In addition to the Subscription Status information, each notification MAY include additional resources or references to resources (URLs or ids).",MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",notifications,event-notifications-and-what-to-include,,2.5.3,Notification Content,,,,,TESTER-DIRECTED: Notifications that Inferno delivers are provided by the tester and verified against the relevant requirements. Tester can decide within those requirements whether this option is used or not.,,,,,,,"Event Notifications and What to Include
In addition to the Subscription Status information, each notification MAY include additional resources or references to resources (URLs or ids).  The notification shape SHALL be based on the definitions from the SubscriptionTopic relevant to the notification:In addition to the Subscription Status information, each notification MAY include additional resources or references to resources (URLs or ids).  The notification shape SHALL be based on the definitions from the SubscriptionTopicSubscriptionTopic relevant to the notification:
Focus Resource"
32,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/notifications.html#additional-resources,34,Servers MAY choose to include additional resources [other than the focus] with notifications that may be of interest to clients.,MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",notifications,additional-resources,,2.5.3.2,Notification Content,,,,,TESTER-DIRECTED: Notifications that Inferno delivers are provided by the tester and verified against the relevant requirements. Tester can decide within those requirements whether this option is used or not.,,,,,,,"Additional Resources
Servers MAY choose to include additional resources with notifications that may be of interest to clients.  Servers SHALL conform to the payload configuration of the subscription when adding additional resources (e.g., if the subscription is id-only, then only ids of additional resources may be provided; if the subscription is full-resource, then full resources should be provided).Servers MAY choose to include additional resources with notifications that may be of interest to clients.  Servers SHALL conform to the payload configuration of the subscription when adding additional resources (e.g., if the subscription is id-onlyid-only, then only ids of additional resources may be provided; if the subscription is full-resourcefull-resource, then full resources should be provided).
In order to aid servers in determining which resources may be of interest to clients, subscription topics can define a list of included resources (see SubscriptionTopic.notificationShape.include).  Included resources are matches based on the type of focus resource specified.In order to aid servers in determining which resources may be of interest to clients, subscription topics can define a list of included resources (see SubscriptionTopic.notificationShape.includeSubscriptionTopic.notificationShape.include).  Included resources are matches based on the type of focus resource specified.
Note that the include list MAY contain resources that do not exist in a particular context (e.g., an Encounter with no Observations) or that a user may not be authorized to access (e.g., an Observation tagged as sensitive that cannot be shared with the owner of a subscription).  Servers SHOULD attempt to provide the resources described in the topic, however clients SHALL expect that any resource beyond the focus resource are not guaranteed to be present.Note that the include list MAY contain resources that do not exist in a particular context (e.g., an Encounter with no Observations) or that a user may not be authorized to access (e.g., an Observation tagged as sensitive that cannot be shared with the owner of a subscription).  Servers SHOULD attempt to provide the resources described in the topic, however clients SHALL expect that any resource beyond the focus resource are not guaranteed to be present.

 
 
 
 
 "
33,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/notifications.html#additional-resources,35,"Servers SHALL conform to the payload configuration of the subscription when adding additional resources (e.g., if the subscription is id-only, then only ids of additional resources may be provided; if the subscription is full-resource, then full resources should be provided).",SHALL,Server,,,,Yes,,Yes,,notifications,additional-resources,,2.5.3.2,Notification Content,,,,Verify that the content of the notification matches the requirements of the Subscription's content type.,TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,Implemented,,,,,"Additional Resources
Servers MAY choose to include additional resources with notifications that may be of interest to clients.  Servers SHALL conform to the payload configuration of the subscription when adding additional resources (e.g., if the subscription is id-only, then only ids of additional resources may be provided; if the subscription is full-resource, then full resources should be provided).Servers MAY choose to include additional resources with notifications that may be of interest to clients.  Servers SHALL conform to the payload configuration of the subscription when adding additional resources (e.g., if the subscription is id-onlyid-only, then only ids of additional resources may be provided; if the subscription is full-resourcefull-resource, then full resources should be provided).
In order to aid servers in determining which resources may be of interest to clients, subscription topics can define a list of included resources (see SubscriptionTopic.notificationShape.include).  Included resources are matches based on the type of focus resource specified.In order to aid servers in determining which resources may be of interest to clients, subscription topics can define a list of included resources (see SubscriptionTopic.notificationShape.includeSubscriptionTopic.notificationShape.include).  Included resources are matches based on the type of focus resource specified.
Note that the include list MAY contain resources that do not exist in a particular context (e.g., an Encounter with no Observations) or that a user may not be authorized to access (e.g., an Observation tagged as sensitive that cannot be shared with the owner of a subscription).  Servers SHOULD attempt to provide the resources described in the topic, however clients SHALL expect that any resource beyond the focus resource are not guaranteed to be present.Note that the include list MAY contain resources that do not exist in a particular context (e.g., an Encounter with no Observations) or that a user may not be authorized to access (e.g., an Observation tagged as sensitive that cannot be shared with the owner of a subscription).  Servers SHOULD attempt to provide the resources described in the topic, however clients SHALL expect that any resource beyond the focus resource are not guaranteed to be present.

 
 
 
 
 "
34,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/payloads.html#payload-types,36,"If a server will not honor a payload type (e.g., will not send full-resource over HTTP), it SHOULD reject the Subscription request",SHOULD,Server,,,,Yes,,Yes,,payloads,payload-types,,2.6.1,Subscription Creation,,,,"Validate that the server can reject a Subscription by identifiying a Subscription that they will reject (e.g., from the user),  creating that Subscription, and validating that it is rejected.","SIMULATED: Inferno will support all payload content types, so this is an empty check",EMPTY,,,,,,"Payload Types
There are three options available when specifying the contents of a Notification: empty, id-only, and full-resource. These options change the level of detail conveyed in the notification Bundle.There are three options available when specifying the contents of a Notification: emptyempty, id-onlyid-only, and full-resourcefull-resource. These options change the level of detail conveyed in the notification Bundle.
When deciding which payload types to support, systems SHOULD consider both ease of processing and security of PHI. Clients often prefer the highest amount of data in notifications (e.g., full-resource) in order to reduce their processing burden.  Servers often prefer the lowest amount of data in notifications (e.g., empty) in order to mitigate the risk of information leakage (though also need to balance this against additional load caused by client queries). In practice, id-only provides a good balance between security and performance for many real-world scenarios.When deciding which payload types to support, systems SHOULD consider both ease of processing and security of PHI. Clients often prefer the highest amount of data in notifications (e.g., full-resourcefull-resource) in order to reduce their processing burden.  Servers often prefer the lowest amount of data in notifications (e.g., emptyempty) in order to mitigate the risk of information leakage (though also need to balance this against additional load caused by client queries). In practice, id-onlyid-only provides a good balance between security and performance for many real-world scenarios.
Some security guidance is included below, however implementers SHOULD use the minimum level of detail consistent with the use case and SHOULD conduct a security review to determine how the payload and channel type interact with respect to data security.Some security guidance is included below, however implementers SHOULD use the minimum level of detail consistent with the use case and SHOULD conduct a security review to determine how the payload and channel type interact with respect to data security.

FHIR ServerEmptyID OnlyFull ResourceFHIR ServerEmptyID OnlyFull ResourceSendevent-notificationemptyid-onlyfull-resourceHTTP 200: OKFHIR SearchQuery ResultsFetch FHIR ResourcesReturn FHIR ResourcesAdditional Requests:210
Diagram showing the different round-trips based on payload types

FHIR ServerEmptyID OnlyFull ResourceFHIR ServerEmptyID OnlyFull ResourceSendevent-notificationemptyid-onlyfull-resourceHTTP 200: OKFHIR SearchQuery ResultsFetch FHIR ResourcesReturn FHIR ResourcesAdditional Requests:210FHIR ServerEmptyID OnlyFull ResourceFHIR ServerEmptyID OnlyFull ResourceSendevent-notificationemptyid-onlyfull-resourceHTTP 200: OKFHIR SearchQuery ResultsFetch FHIR ResourcesReturn FHIR ResourcesAdditional Requests:210FHIR ServerFHIR ServerEmptyEmptyID OnlyID OnlyFull ResourceFull ResourceFHIR ServerFHIR ServerEmptyEmptyID OnlyID OnlyFull ResourceFull ResourceSendSendevent-notificationevent-notificationemptyemptyid-onlyid-onlyfull-resourcefull-resourceHTTP 200: OKHTTP 200: OKFHIR SearchFHIR SearchQuery ResultsQuery ResultsFetch FHIR ResourcesFetch FHIR ResourcesReturn FHIR ResourcesReturn FHIR ResourcesAdditional Requests:Additional Requests:221100
Diagram showing the different round-trips based on payload typesDiagram showing the different round-trips based on payload types

If a server will not honor a payload type (e.g., will not send full-resource over HTTP), it SHOULD reject the Subscription request, but the server MAY accept the subscription with modifications.If a server will not honor a payload type (e.g., will not send full-resourcefull-resource over HTTP), it SHOULD reject the Subscription request, but the server MAY accept the subscription with modifications.
Empty"
35,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/payloads.html#payload-types,37,"If a server will not honor a payload type (e.g., will not send full-resource over HTTP), it ... MAY accept the subscription with modifications.",MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",payloads,payload-types,,2.6.1,Subscription Creation,,,,,NOT SIMULATED: Inferno will support all payload content types and will not modify the requested content type.,,,,,,,"Payload Types
There are three options available when specifying the contents of a Notification: empty, id-only, and full-resource. These options change the level of detail conveyed in the notification Bundle.There are three options available when specifying the contents of a Notification: emptyempty, id-onlyid-only, and full-resourcefull-resource. These options change the level of detail conveyed in the notification Bundle.
When deciding which payload types to support, systems SHOULD consider both ease of processing and security of PHI. Clients often prefer the highest amount of data in notifications (e.g., full-resource) in order to reduce their processing burden.  Servers often prefer the lowest amount of data in notifications (e.g., empty) in order to mitigate the risk of information leakage (though also need to balance this against additional load caused by client queries). In practice, id-only provides a good balance between security and performance for many real-world scenarios.When deciding which payload types to support, systems SHOULD consider both ease of processing and security of PHI. Clients often prefer the highest amount of data in notifications (e.g., full-resourcefull-resource) in order to reduce their processing burden.  Servers often prefer the lowest amount of data in notifications (e.g., emptyempty) in order to mitigate the risk of information leakage (though also need to balance this against additional load caused by client queries). In practice, id-onlyid-only provides a good balance between security and performance for many real-world scenarios.
Some security guidance is included below, however implementers SHOULD use the minimum level of detail consistent with the use case and SHOULD conduct a security review to determine how the payload and channel type interact with respect to data security.Some security guidance is included below, however implementers SHOULD use the minimum level of detail consistent with the use case and SHOULD conduct a security review to determine how the payload and channel type interact with respect to data security.

FHIR ServerEmptyID OnlyFull ResourceFHIR ServerEmptyID OnlyFull ResourceSendevent-notificationemptyid-onlyfull-resourceHTTP 200: OKFHIR SearchQuery ResultsFetch FHIR ResourcesReturn FHIR ResourcesAdditional Requests:210
Diagram showing the different round-trips based on payload types

FHIR ServerEmptyID OnlyFull ResourceFHIR ServerEmptyID OnlyFull ResourceSendevent-notificationemptyid-onlyfull-resourceHTTP 200: OKFHIR SearchQuery ResultsFetch FHIR ResourcesReturn FHIR ResourcesAdditional Requests:210FHIR ServerEmptyID OnlyFull ResourceFHIR ServerEmptyID OnlyFull ResourceSendevent-notificationemptyid-onlyfull-resourceHTTP 200: OKFHIR SearchQuery ResultsFetch FHIR ResourcesReturn FHIR ResourcesAdditional Requests:210FHIR ServerFHIR ServerEmptyEmptyID OnlyID OnlyFull ResourceFull ResourceFHIR ServerFHIR ServerEmptyEmptyID OnlyID OnlyFull ResourceFull ResourceSendSendevent-notificationevent-notificationemptyemptyid-onlyid-onlyfull-resourcefull-resourceHTTP 200: OKHTTP 200: OKFHIR SearchFHIR SearchQuery ResultsQuery ResultsFetch FHIR ResourcesFetch FHIR ResourcesReturn FHIR ResourcesReturn FHIR ResourcesAdditional Requests:Additional Requests:221100
Diagram showing the different round-trips based on payload typesDiagram showing the different round-trips based on payload types

If a server will not honor a payload type (e.g., will not send full-resource over HTTP), it SHOULD reject the Subscription request, but the server MAY accept the subscription with modifications.If a server will not honor a payload type (e.g., will not send full-resourcefull-resource over HTTP), it SHOULD reject the Subscription request, but the server MAY accept the subscription with modifications.
Empty"
36,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/payloads.html#empty,38,"When populating the SubscriptionStatus.notificationEvent structure for a notification with an empty payload, a server SHALL NOT include references to resources (e.g., SubscriptionStatus.notificationEvent.focus and SubscriptionStatus.notificationEvent.additionalContext SHALL NOT be present).",SHALL NOT,Server,,,,Yes,,Yes,,payloads,empty,,2.6.1.1,Notification Content - empty,,,,"If the payload type is specified as being empty, the notification validation test will verify that the focus and additionalContext elements are empty",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,requested,,,,,"Empty
With the content type of empty, no information about the resources involved in triggering the notification is available via the subscription channel. This mitigates many security concerns by both removing most PHI from the notification and allows servers to consolidate authorization and authentication logic. When the client receives a notification of this type, it may query the server to fetch all the relevant resources based on the SubscriptionTopic and applicable filters. The client might include a _since= query parameter, supplying its last query timestamp to retrieve only the most recent resources. For example, if the notification is for a topic about patient admission, the client will generally query for recent Encounters for a patient or group of patients, then fetch them as needed.With the content type of emptyempty, no information about the resources involved in triggering the notification is available via the subscription channel. This mitigates many security concerns by both removing most PHI from the notification and allows servers to consolidate authorization and authentication logic. When the client receives a notification of this type, it may query the server to fetch all the relevant resources based on the SubscriptionTopic and applicable filters. The client might include a _since=_since= query parameter, supplying its last query timestamp to retrieve only the most recent resources. For example, if the notification is for a topic about patient admission, the client will generally query for recent EncountersEncounters for a patient or group of patients, then fetch them as needed.
When populating the SubscriptionStatus.notificationEvent structure for a notification with an empty payload, a server SHALL NOT include references to resources (e.g., SubscriptionStatus.notificationEvent.focus and SubscriptionStatus.notificationEvent.additionalContext SHALL NOT be present).When populating the SubscriptionStatus.notificationEventSubscriptionStatus.notificationEvent structure for a notification with an emptyempty payload, a server SHALL NOT include references to resources (e.g., SubscriptionStatus.notificationEvent.focusSubscriptionStatus.notificationEvent.focus and SubscriptionStatus.notificationEvent.additionalContextSubscriptionStatus.notificationEvent.additionalContext SHALL NOT be present).
When the content type is empty, notification bundles SHALL not contain Bundle.entry elements other than the SubscriptionStatus for the notification.When the content type is emptyempty, notification bundles SHALL not contain Bundle.entryBundle.entry elements other than the SubscriptionStatusSubscriptionStatus for the notification.
From a security perspective, empty payloads expose the lowest risk, since they contain no PHI. The trade-off is that clients need to perform queries against the server in order to discover what events have occurred, costing bot client and server additional time, data transfer, and processing.From a security perspective, emptyempty payloads expose the lowest risk, since they contain no PHI. The trade-off is that clients need to perform queries against the server in order to discover what events have occurred, costing bot client and server additional time, data transfer, and processing.
Id Only"
37,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/payloads.html#empty,39,"When the content type is empty, notification bundles SHALL not contain Bundle.entry elements other than the SubscriptionStatus for the notification.",SHALL NOT,Server,,,,Yes,,Yes,,payloads,empty,,2.6.1.1,Notification Content - empty,,,,"If the payload type is specified as being empty, the notification validation test will make sure there are no other entries in the Bundle other than the first SubscriptionStatus resource. . ",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,requested,,,,,"Empty
With the content type of empty, no information about the resources involved in triggering the notification is available via the subscription channel. This mitigates many security concerns by both removing most PHI from the notification and allows servers to consolidate authorization and authentication logic. When the client receives a notification of this type, it may query the server to fetch all the relevant resources based on the SubscriptionTopic and applicable filters. The client might include a _since= query parameter, supplying its last query timestamp to retrieve only the most recent resources. For example, if the notification is for a topic about patient admission, the client will generally query for recent Encounters for a patient or group of patients, then fetch them as needed.With the content type of emptyempty, no information about the resources involved in triggering the notification is available via the subscription channel. This mitigates many security concerns by both removing most PHI from the notification and allows servers to consolidate authorization and authentication logic. When the client receives a notification of this type, it may query the server to fetch all the relevant resources based on the SubscriptionTopic and applicable filters. The client might include a _since=_since= query parameter, supplying its last query timestamp to retrieve only the most recent resources. For example, if the notification is for a topic about patient admission, the client will generally query for recent EncountersEncounters for a patient or group of patients, then fetch them as needed.
When populating the SubscriptionStatus.notificationEvent structure for a notification with an empty payload, a server SHALL NOT include references to resources (e.g., SubscriptionStatus.notificationEvent.focus and SubscriptionStatus.notificationEvent.additionalContext SHALL NOT be present).When populating the SubscriptionStatus.notificationEventSubscriptionStatus.notificationEvent structure for a notification with an emptyempty payload, a server SHALL NOT include references to resources (e.g., SubscriptionStatus.notificationEvent.focusSubscriptionStatus.notificationEvent.focus and SubscriptionStatus.notificationEvent.additionalContextSubscriptionStatus.notificationEvent.additionalContext SHALL NOT be present).
When the content type is empty, notification bundles SHALL not contain Bundle.entry elements other than the SubscriptionStatus for the notification.When the content type is emptyempty, notification bundles SHALL not contain Bundle.entryBundle.entry elements other than the SubscriptionStatusSubscriptionStatus for the notification.
From a security perspective, empty payloads expose the lowest risk, since they contain no PHI. The trade-off is that clients need to perform queries against the server in order to discover what events have occurred, costing bot client and server additional time, data transfer, and processing.From a security perspective, emptyempty payloads expose the lowest risk, since they contain no PHI. The trade-off is that clients need to perform queries against the server in order to discover what events have occurred, costing bot client and server additional time, data transfer, and processing.
Id Only"
38,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/payloads.html#id-only,40,"When the content type is id-only, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focus element.",SHALL,Server,,,,Yes,,Yes,,payloads,id-only,,2.6.1.2,Notification Content - id-only,,,,"If the payload type is specified as being id-only, the notification validation test will ensure the SubscriptionStatus.notificationEvent.focus is populated and it will check that each additional entry in the Bundle has the fullUrl populated",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,requested,,,,,"Id Only
With the content type of id-only, the resources involved in triggering the notification are only available through other channels (e.g., REST API), but notifications include URLs which can be used to access those resources. This allows servers to consolidate authorization and authentication logic, while removing the need for expensive queries by clients. When a client receives a notification of this type, it may directly fetch all the relevant resources using the supplied resource ids. For example, if the notification is for a topic about patient admission, the client may fetch the Encounter resources for a patient or group of patients using URLs included in the notification.With the content type of id-onlyid-only, the resources involved in triggering the notification are only available through other channels (e.g., REST API), but notifications include URLs which can be used to access those resources. This allows servers to consolidate authorization and authentication logic, while removing the need for expensive queries by clients. When a client receives a notification of this type, it may directly fetch all the relevant resources using the supplied resource ids. For example, if the notification is for a topic about patient admission, the client may fetch the EncounterEncounter resources for a patient or group of patients using URLs included in the notification.
When the content type is id-only, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focus element.  This provides clients a fixed location to consolidate IDs for all notification types.When the content type is id-onlyid-only, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focusSubscriptionStatus.notificationEvent.focus element.  This provides clients a fixed location to consolidate IDs for all notification types.
Additionally, notification bundles MAY contain, in addition to the SubscriptionStatus used to convey status information, at least one Bundle.entry for each resource relevant to the notification. For example, a notification for a topic based on Encounter MAY include a reference to the Encounter and MAY also include additional resources deemed relevant (e.g., the linked Patient).Additionally, notification bundles MAY contain, in addition to the SubscriptionStatusSubscriptionStatus used to convey status information, at least one Bundle.entryBundle.entry for each resource relevant to the notification. For example, a notification for a topic based on EncounterEncounter MAY include a reference to the EncounterEncounter and MAY also include additional resources deemed relevant (e.g., the linked PatientPatient).
Each Bundle.entry for id-only notification SHALL contain a relevant resource URL in the fullUrl and request elements, as is required for history bundles.Each Bundle.entryBundle.entry for id-onlyid-only notification SHALL contain a relevant resource URL in the fullUrlfullUrl and requestrequest elements, as is required for historyhistory bundles.
From a security perspective, id-only payloads have a low risk of exposing PHI. While there is no PHI directly in the payload, some links to resources can be considered PHI. For example, if a system contains Medication resources using RxNorm codes as ids (e.g., Medication/RX10359383), a notification including a reference to that medication would communicate the patient has some interaction with ciprofloxacin 500 mg 24-hour extended release tablets.From a security perspective, id-onlyid-only payloads have a low risk of exposing PHI. While there is no PHI directly in the payload, some links to resources can be considered PHI. For example, if a system contains MedicationMedication resources using RxNormRxNorm codes as ids (e.g., Medication/RX10359383Medication/RX10359383), a notification including a reference to that medication would communicate the patient has some interaction with ciprofloxacin 500 mg 24-hour extended release tabletsciprofloxacin 500 mg 24-hour extended release tablets.
Full Resource"
39,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/payloads.html#id-only,41,"Additionally, [id-only] notification bundles MAY contain, in addition to the SubscriptionStatus used to convey status information, at least one Bundle.entry for each resource relevant to the notification. For example, a notification for a topic based on Encounter MAY include a reference to the Encounter and MAY also include additional resources deemed relevant (e.g., the linked Patient).",MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",payloads,id-only,,2.6.1.2,Notification Content - id-only,,,,,TESTER-DIRECTED: Notifications that Inferno delivers are provided by the tester and verified against the relevant requirements. Tester can decide within those requirements whether this option is used or not.,,,,,,,"Id Only
With the content type of id-only, the resources involved in triggering the notification are only available through other channels (e.g., REST API), but notifications include URLs which can be used to access those resources. This allows servers to consolidate authorization and authentication logic, while removing the need for expensive queries by clients. When a client receives a notification of this type, it may directly fetch all the relevant resources using the supplied resource ids. For example, if the notification is for a topic about patient admission, the client may fetch the Encounter resources for a patient or group of patients using URLs included in the notification.With the content type of id-onlyid-only, the resources involved in triggering the notification are only available through other channels (e.g., REST API), but notifications include URLs which can be used to access those resources. This allows servers to consolidate authorization and authentication logic, while removing the need for expensive queries by clients. When a client receives a notification of this type, it may directly fetch all the relevant resources using the supplied resource ids. For example, if the notification is for a topic about patient admission, the client may fetch the EncounterEncounter resources for a patient or group of patients using URLs included in the notification.
When the content type is id-only, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focus element.  This provides clients a fixed location to consolidate IDs for all notification types.When the content type is id-onlyid-only, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focusSubscriptionStatus.notificationEvent.focus element.  This provides clients a fixed location to consolidate IDs for all notification types.
Additionally, notification bundles MAY contain, in addition to the SubscriptionStatus used to convey status information, at least one Bundle.entry for each resource relevant to the notification. For example, a notification for a topic based on Encounter MAY include a reference to the Encounter and MAY also include additional resources deemed relevant (e.g., the linked Patient).Additionally, notification bundles MAY contain, in addition to the SubscriptionStatusSubscriptionStatus used to convey status information, at least one Bundle.entryBundle.entry for each resource relevant to the notification. For example, a notification for a topic based on EncounterEncounter MAY include a reference to the EncounterEncounter and MAY also include additional resources deemed relevant (e.g., the linked PatientPatient).
Each Bundle.entry for id-only notification SHALL contain a relevant resource URL in the fullUrl and request elements, as is required for history bundles.Each Bundle.entryBundle.entry for id-onlyid-only notification SHALL contain a relevant resource URL in the fullUrlfullUrl and requestrequest elements, as is required for historyhistory bundles.
From a security perspective, id-only payloads have a low risk of exposing PHI. While there is no PHI directly in the payload, some links to resources can be considered PHI. For example, if a system contains Medication resources using RxNorm codes as ids (e.g., Medication/RX10359383), a notification including a reference to that medication would communicate the patient has some interaction with ciprofloxacin 500 mg 24-hour extended release tablets.From a security perspective, id-onlyid-only payloads have a low risk of exposing PHI. While there is no PHI directly in the payload, some links to resources can be considered PHI. For example, if a system contains MedicationMedication resources using RxNormRxNorm codes as ids (e.g., Medication/RX10359383Medication/RX10359383), a notification including a reference to that medication would communicate the patient has some interaction with ciprofloxacin 500 mg 24-hour extended release tabletsciprofloxacin 500 mg 24-hour extended release tablets.
Full Resource"
40,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/payloads.html#id-only,42,"Each Bundle.entry for id-only notification SHALL contain a relevant resource URL in the fullUrl and request elements, as is required for history bundles.",SHALL,Server,,,,Yes,,Yes,,payloads,id-only,,2.6.1.2,Notification Content - id-only,,,,"If the payload type is specified as being id-only and the server includes additional Bundle.entry iterations, check that fullUrl is populated and resource is not populated (since id-only).",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,requested,,,"Emily's Original: If the payload type is specified as being id-only, the notification validation test will ensure the SubscriptionStatus.notificationEvent.focus is populated and it will check that each additional entry in the Bundle has the fullUrl populated

Updated to be more specific - check correspondence between the subscription status list and the bundle.entry list.",IG AUTHORS: Do the focus / additionalContext elements on the status(es) need to correspond to the list of additional entries if present?,"Id Only
With the content type of id-only, the resources involved in triggering the notification are only available through other channels (e.g., REST API), but notifications include URLs which can be used to access those resources. This allows servers to consolidate authorization and authentication logic, while removing the need for expensive queries by clients. When a client receives a notification of this type, it may directly fetch all the relevant resources using the supplied resource ids. For example, if the notification is for a topic about patient admission, the client may fetch the Encounter resources for a patient or group of patients using URLs included in the notification.With the content type of id-onlyid-only, the resources involved in triggering the notification are only available through other channels (e.g., REST API), but notifications include URLs which can be used to access those resources. This allows servers to consolidate authorization and authentication logic, while removing the need for expensive queries by clients. When a client receives a notification of this type, it may directly fetch all the relevant resources using the supplied resource ids. For example, if the notification is for a topic about patient admission, the client may fetch the EncounterEncounter resources for a patient or group of patients using URLs included in the notification.
When the content type is id-only, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focus element.  This provides clients a fixed location to consolidate IDs for all notification types.When the content type is id-onlyid-only, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focusSubscriptionStatus.notificationEvent.focus element.  This provides clients a fixed location to consolidate IDs for all notification types.
Additionally, notification bundles MAY contain, in addition to the SubscriptionStatus used to convey status information, at least one Bundle.entry for each resource relevant to the notification. For example, a notification for a topic based on Encounter MAY include a reference to the Encounter and MAY also include additional resources deemed relevant (e.g., the linked Patient).Additionally, notification bundles MAY contain, in addition to the SubscriptionStatusSubscriptionStatus used to convey status information, at least one Bundle.entryBundle.entry for each resource relevant to the notification. For example, a notification for a topic based on EncounterEncounter MAY include a reference to the EncounterEncounter and MAY also include additional resources deemed relevant (e.g., the linked PatientPatient).
Each Bundle.entry for id-only notification SHALL contain a relevant resource URL in the fullUrl and request elements, as is required for history bundles.Each Bundle.entryBundle.entry for id-onlyid-only notification SHALL contain a relevant resource URL in the fullUrlfullUrl and requestrequest elements, as is required for historyhistory bundles.
From a security perspective, id-only payloads have a low risk of exposing PHI. While there is no PHI directly in the payload, some links to resources can be considered PHI. For example, if a system contains Medication resources using RxNorm codes as ids (e.g., Medication/RX10359383), a notification including a reference to that medication would communicate the patient has some interaction with ciprofloxacin 500 mg 24-hour extended release tablets.From a security perspective, id-onlyid-only payloads have a low risk of exposing PHI. While there is no PHI directly in the payload, some links to resources can be considered PHI. For example, if a system contains MedicationMedication resources using RxNormRxNorm codes as ids (e.g., Medication/RX10359383Medication/RX10359383), a notification including a reference to that medication would communicate the patient has some interaction with ciprofloxacin 500 mg 24-hour extended release tabletsciprofloxacin 500 mg 24-hour extended release tablets.
Full Resource"
41,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/payloads.html#full-resource,43,"When the content type is full-resource, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focus element.",SHALL,Server,,,,Yes,,Yes,,payloads,full-resource,,2.6.1.3,Notification Content - full-resource,,,,"If the payload type is specified as being full-resource, the notification validation test will ensure the SubscriptionStatus.notificationEvent.focus is populated and it validate each resource contained in additional entries in the Bundle",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,requested,,,,,"Full Resource
With the content type of full-resource, the resources involved in triggering the notification are included in the notification bundle. When a client receives a notification of this type, resources are already present in the bundle, though the client may need to fetch additional resources from the server. For example, the if the notification is for a topic about patient admission, the client may require related Observation resources.With the content type of full-resourcefull-resource, the resources involved in triggering the notification are included in the notification bundle. When a client receives a notification of this type, resources are already present in the bundle, though the client may need to fetch additional resources from the server. For example, the if the notification is for a topic about patient admission, the client may require related ObservationObservation resources.
When the content type is full-resource, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focus element.  This provides clients a fixed location to consolidate IDs for all notification types.When the content type is full-resourcefull-resource, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focusSubscriptionStatus.notificationEvent.focus element.  This provides clients a fixed location to consolidate IDs for all notification types.
Notification bundles for full-resource subscriptions SHALL contain, in addition to the SubscriptionStatus, at least one Bundle.entry for each resource relevant to the notification. For example, a notification for a topic based on the Encounter resource SHALL include an Encounter and MAY include additional resources deemed relevant (e.g., the referenced Patient). Each Bundle.entry for a full-resource notification SHALL contain a relevant resource in the entry.resource element. If a server cannot include the resource contents due to an issue with a specific notification, the server SHALL populate the entry.request and/or entry.response elements.Notification bundles for full-resourcefull-resource subscriptions SHALL contain, in addition to the SubscriptionStatusSubscriptionStatus, at least one Bundle.entryBundle.entry for each resource relevant to the notification. For example, a notification for a topic based on the Encounter resource SHALL include an Encounter and MAY include additional resources deemed relevant (e.g., the referenced Patient). Each Bundle.entryBundle.entry for a full-resource notification SHALL contain a relevant resource in the entry.resourceentry.resource element. If a server cannot include the resource contents due to an issue with a specific notification, the server SHALL populate the entry.requestentry.request and/or entry.responseentry.response elements.
From a security perspective, full-resource payloads should only be used when the channel is secure - notifications will contain PHI.From a security perspective, full-resourcefull-resource payloads should only be used when the channel is secure - notifications willwill contain PHI.

 
 
 
 
 "
42,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/payloads.html#full-resource,44,"Notification bundles for full-resource subscriptions SHALL contain, in addition to the SubscriptionStatus, at least one Bundle.entry for each resource relevant to the notification. For example, a notification for a topic based on the Encounter resource SHALL include an Encounter and MAY include additional resources deemed relevant (e.g., the referenced Patient).",SHALL,Server,,,,Yes,,Yes,,payloads,full-resource,,2.6.1.3,Notification Content - full-resource,,,,"If the payload type is specified as being full-resource,  verify that for each reference in SubscriptionStatus.notificationEvent.focus there is an Bundle.entry instance with the content for that reference.",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Add additional server validation to tester-provided notifications,requested,,,"Emily's Original: If the payload type is specified as being full-resource, the notification validation test will ensure that each entry in the Bundle contains a resource or if not, a  entry.request and/or entry.response elements (this is a requirement for each entry in a history bundle)

Tightening this a bit.",,"Full Resource
With the content type of full-resource, the resources involved in triggering the notification are included in the notification bundle. When a client receives a notification of this type, resources are already present in the bundle, though the client may need to fetch additional resources from the server. For example, the if the notification is for a topic about patient admission, the client may require related Observation resources.With the content type of full-resourcefull-resource, the resources involved in triggering the notification are included in the notification bundle. When a client receives a notification of this type, resources are already present in the bundle, though the client may need to fetch additional resources from the server. For example, the if the notification is for a topic about patient admission, the client may require related ObservationObservation resources.
When the content type is full-resource, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focus element.  This provides clients a fixed location to consolidate IDs for all notification types.When the content type is full-resourcefull-resource, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focusSubscriptionStatus.notificationEvent.focus element.  This provides clients a fixed location to consolidate IDs for all notification types.
Notification bundles for full-resource subscriptions SHALL contain, in addition to the SubscriptionStatus, at least one Bundle.entry for each resource relevant to the notification. For example, a notification for a topic based on the Encounter resource SHALL include an Encounter and MAY include additional resources deemed relevant (e.g., the referenced Patient). Each Bundle.entry for a full-resource notification SHALL contain a relevant resource in the entry.resource element. If a server cannot include the resource contents due to an issue with a specific notification, the server SHALL populate the entry.request and/or entry.response elements.Notification bundles for full-resourcefull-resource subscriptions SHALL contain, in addition to the SubscriptionStatusSubscriptionStatus, at least one Bundle.entryBundle.entry for each resource relevant to the notification. For example, a notification for a topic based on the Encounter resource SHALL include an Encounter and MAY include additional resources deemed relevant (e.g., the referenced Patient). Each Bundle.entryBundle.entry for a full-resource notification SHALL contain a relevant resource in the entry.resourceentry.resource element. If a server cannot include the resource contents due to an issue with a specific notification, the server SHALL populate the entry.requestentry.request and/or entry.responseentry.response elements.
From a security perspective, full-resource payloads should only be used when the channel is secure - notifications will contain PHI.From a security perspective, full-resourcefull-resource payloads should only be used when the channel is secure - notifications willwill contain PHI.

 
 
 
 
 "
43,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/payloads.html#full-resource,45,"Each Bundle.entry for a full-resource notification SHALL contain a relevant resource in the entry.resource element. If a server cannot include the resource contents due to an issue with a specific notification, the server SHALL populate the entry.request and/or entry.response elements.",SHALL,Server,,,,Yes,,Yes,,payloads,full-resource,,2.6.1.3,Notification Content - full-resource,,,,"If the payload type is specified as being full-resource, the notification validation test will ensure that each entry in the Bundle contains a resource or if not, a  entry.request and/or entry.response elements (this is a requirement for each entry in a history bundle)",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,requested,,,,IG AUTHORS: What does this mean? It implies that it isn't a hard SHALL on including the resource. Entry.request or entry.response are already required by the history Bundle invariants.,"Full Resource
With the content type of full-resource, the resources involved in triggering the notification are included in the notification bundle. When a client receives a notification of this type, resources are already present in the bundle, though the client may need to fetch additional resources from the server. For example, the if the notification is for a topic about patient admission, the client may require related Observation resources.With the content type of full-resourcefull-resource, the resources involved in triggering the notification are included in the notification bundle. When a client receives a notification of this type, resources are already present in the bundle, though the client may need to fetch additional resources from the server. For example, the if the notification is for a topic about patient admission, the client may require related ObservationObservation resources.
When the content type is full-resource, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focus element.  This provides clients a fixed location to consolidate IDs for all notification types.When the content type is full-resourcefull-resource, notification bundles SHALL include references to the appropriate focus resources in the SubscriptionStatus.notificationEvent.focusSubscriptionStatus.notificationEvent.focus element.  This provides clients a fixed location to consolidate IDs for all notification types.
Notification bundles for full-resource subscriptions SHALL contain, in addition to the SubscriptionStatus, at least one Bundle.entry for each resource relevant to the notification. For example, a notification for a topic based on the Encounter resource SHALL include an Encounter and MAY include additional resources deemed relevant (e.g., the referenced Patient). Each Bundle.entry for a full-resource notification SHALL contain a relevant resource in the entry.resource element. If a server cannot include the resource contents due to an issue with a specific notification, the server SHALL populate the entry.request and/or entry.response elements.Notification bundles for full-resourcefull-resource subscriptions SHALL contain, in addition to the SubscriptionStatusSubscriptionStatus, at least one Bundle.entryBundle.entry for each resource relevant to the notification. For example, a notification for a topic based on the Encounter resource SHALL include an Encounter and MAY include additional resources deemed relevant (e.g., the referenced Patient). Each Bundle.entryBundle.entry for a full-resource notification SHALL contain a relevant resource in the entry.resourceentry.resource element. If a server cannot include the resource contents due to an issue with a specific notification, the server SHALL populate the entry.requestentry.request and/or entry.responseentry.response elements.
From a security perspective, full-resource payloads should only be used when the channel is secure - notifications will contain PHI.From a security perspective, full-resourcefull-resource payloads should only be used when the channel is secure - notifications willwill contain PHI.

 
 
 
 
 "
44,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#conformance-in-fhir-r4,46,"In order to claim conformance with this guide, a server…SHALL support the Subscription resource (read/write).",DEPRECATED,Server,,,,,,,,conformance,conformance-in-fhir-r4,,2.7.2,Subscription Creation,,,,,,,,,,split into 133 and 134,,"Conformance in FHIR R4
In order to claim conformance with this guide, a server:In order to claim conformance with this guide, a server:

SHALL support the Subscription resource (read/write).
SHALL support the $status operation on the Subscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload Type

SHALL support the Subscription resource (read/write).SHALL support the SubscriptionSubscription resource (read/write).
SHALL support the $status operation on the Subscription resource.SHALL support the $status$status operation on the SubscriptionSubscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extensionSHOULD support topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guideSHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload TypeSHALL support at least one Payload Type

Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription Components page.Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription ComponentsTopic-Based Subscription Components page.
Conformance Artifacts"
45,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#conformance-in-fhir-r4,47,"In order to claim conformance with this guide, a server…SHALL support the $status operation on the Subscription resource.",SHALL,Server,,,,Yes,,Yes,,conformance,conformance-in-fhir-r4,,2.7.2,Status Operation,,,,"Inferno will invoke the $status operation on a previously created Subscription and verify that a valid 200 response is received, and that the Bundle received contains the expected Subscription resource id in the SubscriptionTopic (Parameters) resource. The Parameters resource will be validated with the R4 Backported R5 SubscriptionStatus  profile",SIMULATED: Inferno will use tagged requests / responses to determine what Subscriptions are present and their status.,Status API,Implemented,,,"Emily's Original: The $status operation test will ensure a valid 200 response is received, and that the Bundle received contains the expected Subscription resource id in the SubscriptionTopic (Parameters) resource. The Parameters resource will be validated with the R4 Backported R5 SubscriptionStatus  profile

Update to be clearer on the test procedure.",SIMULATION DESIGN: how to handle Subscription reads and keeping the status consistent?,"Conformance in FHIR R4
In order to claim conformance with this guide, a server:In order to claim conformance with this guide, a server:

SHALL support the Subscription resource (read/write).
SHALL support the $status operation on the Subscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload Type

SHALL support the Subscription resource (read/write).SHALL support the SubscriptionSubscription resource (read/write).
SHALL support the $status operation on the Subscription resource.SHALL support the $status$status operation on the SubscriptionSubscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extensionSHOULD support topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guideSHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload TypeSHALL support at least one Payload Type

Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription Components page.Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription ComponentsTopic-Based Subscription Components page.
Conformance Artifacts"
46,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#conformance-in-fhir-r4,48,"In order to claim conformance with this guide, a server…SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension",SHOULD,Server,,,,Yes,,Yes,,conformance,conformance-in-fhir-r4,,2.7.2,Topic Discovery,,,,There will be an optional Subscription Topic Discovery test that will check if the server's Capability Statement contains the SubscriptionTopic Canonical extension. Will load any Subscription requests made (using tags) and add a warning if any of them are not present on the capability statement.,SIMULATED: Inferno publishes a CapabilityStatement  with topics present.,CapabilityStatement,Requested,,,"Emily's Original: There will be an optional Subscription Topic Discovery test that will check if the server's Capability Statement contains the SubscriptionTopic Canonical extension. The test will check if the inputted Subscription Topic URL is included in this extension

modified to be separate from the Subscription test context, but still check them (using tags!)","SIMULATION DESIGN: does Inferno publsih a static CapabilityStatement, or do we allow systems to provide one that Inferno will echo? Pros of the echo approach: flexibility and tailoring to specific implementation's needs. Cons: need to identify session when /metadata calls should be open. Likely, we should have a static capability statement with topics published and maybe there is a test that clients can discover and initiate a subscription for those topics, though there is no such explicit client requirement.","Conformance in FHIR R4
In order to claim conformance with this guide, a server:In order to claim conformance with this guide, a server:

SHALL support the Subscription resource (read/write).
SHALL support the $status operation on the Subscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload Type

SHALL support the Subscription resource (read/write).SHALL support the SubscriptionSubscription resource (read/write).
SHALL support the $status operation on the Subscription resource.SHALL support the $status$status operation on the SubscriptionSubscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extensionSHOULD support topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guideSHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload TypeSHALL support at least one Payload Type

Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription Components page.Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription ComponentsTopic-Based Subscription Components page.
Conformance Artifacts"
47,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#conformance-in-fhir-r4,49,"In order to claim conformance with this guide, a server…SHALL support at least one channel type",SHALL,Server,,,,Yes,,Yes,,conformance,conformance-in-fhir-r4,,2.7.2,Notification Delivery,,,,Verify that a successful notification can be provided across any Inferno-supported channel.,SIMULATED: Inferno will support rest-hook,Duplicate - 7,,,,"Since Inferno doesn't support all channel types, and will never support all custom channels, a system can be conformant even if it can't be verified by Inferno.",,"Conformance in FHIR R4
In order to claim conformance with this guide, a server:In order to claim conformance with this guide, a server:

SHALL support the Subscription resource (read/write).
SHALL support the $status operation on the Subscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload Type

SHALL support the Subscription resource (read/write).SHALL support the SubscriptionSubscription resource (read/write).
SHALL support the $status operation on the Subscription resource.SHALL support the $status$status operation on the SubscriptionSubscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extensionSHOULD support topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guideSHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload TypeSHALL support at least one Payload Type

Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription Components page.Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription ComponentsTopic-Based Subscription Components page.
Conformance Artifacts"
48,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#conformance-in-fhir-r4,50,"In order to claim conformance with this guide, a server…SHOULD include one [channel type] from this guide",SHOULD,Server,,,,Yes,,Yes,Partial validation only - cannot confirm conformance for systems not supporting Rest Hook channels,conformance,conformance-in-fhir-r4,,2.7.2,Notification Delivery,,,,,SIMULATED: Inferno will support rest-hook,,,,,,,"Conformance in FHIR R4
In order to claim conformance with this guide, a server:In order to claim conformance with this guide, a server:

SHALL support the Subscription resource (read/write).
SHALL support the $status operation on the Subscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload Type

SHALL support the Subscription resource (read/write).SHALL support the SubscriptionSubscription resource (read/write).
SHALL support the $status operation on the Subscription resource.SHALL support the $status$status operation on the SubscriptionSubscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extensionSHOULD support topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guideSHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload TypeSHALL support at least one Payload Type

Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription Components page.Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription ComponentsTopic-Based Subscription Components page.
Conformance Artifacts"
49,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#conformance-in-fhir-r4,51,"In order to claim conformance with this guide, a server…SHALL support at least one Payload Type",SHALL,Server,,,,Yes,,Yes,,conformance,conformance-in-fhir-r4,,2.7.2,Notification Content,,,,"The user will be able to decide which payload type they want to test by including it in the Subscription backport-payload-content extension. The notification validation test will only pass if the received notification passes all the requirements for that specific payload type, indicating the server does support at least that one payload type","SIMULATED: Inferno will support all payload content types, so this is an empty check",EMPTY,,,,,,"Conformance in FHIR R4
In order to claim conformance with this guide, a server:In order to claim conformance with this guide, a server:

SHALL support the Subscription resource (read/write).
SHALL support the $status operation on the Subscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload Type

SHALL support the Subscription resource (read/write).SHALL support the SubscriptionSubscription resource (read/write).
SHALL support the $status operation on the Subscription resource.SHALL support the $status$status operation on the SubscriptionSubscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extensionSHOULD support topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guideSHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload TypeSHALL support at least one Payload Type

Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription Components page.Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription ComponentsTopic-Based Subscription Components page.
Conformance Artifacts"
50,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#conformance-artifacts-1,52,"FHIR Servers claiming conformance to this Implementation Guide must conform to the expectations described in the Capability Statement appropriate to the implemented FHIR version. For FHIR R4 servers, this guide defines the R4 Server CapabilityStatement (https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html).",SHALL,Server,,,,Yes,,Yes,,conformance,conformance-artifacts-1,,2.7.2.1,CapabilityStatement,,,,Tested as a part of the specific requirements indicated in the capability statement.,SIMULATED: Inferno publishes a CapabilityStatement based on the referenced CapabilityStatement and will support the named APIs,CapabilityStatement,Requested,,,,,"Conformance Artifacts
FHIR Servers claiming conformance to this Implementation Guide must conform to the expectations described in the Capability Statement appropriate to the implemented FHIR version.  For FHIR R4 servers, this guide defines the R4 Server CapabilityStatement.FHIR Servers claiming conformance to this Implementation Guide must conform to the expectations described in the Capability Statement appropriate to the implemented FHIR version.  For FHIR R4 servers, this guide defines the R4 Server CapabilityStatementR4 Server CapabilityStatement.
Some options of the Subscriptions Framework are not easily expressed in a CapabilityStatement.  In addition to the basic support in the CapabilityStatement (e.g., resources, interactions, and operations), a conformant server SHALL support at least one Payload Type and SHOULD support one Channel Type listed in this IG.Some options of the Subscriptions Framework are not easily expressed in a CapabilityStatementCapabilityStatement.  In addition to the basic support in the CapabilityStatement (e.g., resources, interactions, and operations), a conformant server SHALL support at least one Payload TypePayload Type and SHOULD support one Channel TypeChannel Type listed in this IG.
Note that the future publication of FHIR R5 may define capabilities included in this specification as cross-version extensions. Since FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements described by this guide.Note that the future publication of FHIR R5 may define capabilities included in this specification as cross-version extensions. Since FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements described by this guide.
Profile Support"
51,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#conformance-artifacts-1,53,"In addition to the basic support in the CapabilityStatement (e.g., resources, interactions, and operations), a conformant server SHALL support at least one Payload Type … listed in this IG.",SHALL,Server,,,,Yes,,Yes,,conformance,conformance-artifacts-1,,2.7.2.1,Notification Content,,,,"The user will be able to decide which payload type they want to test by including it in the Subscription backport-payload-content extension. The notification validation test will only pass if the received notification passes all the requirements for that specific payload type, indicating the server does support at least that one payload type","SIMULATED: Inferno will support all payload content types, so this is an empty check",EMPTY,,,,,,"Conformance Artifacts
FHIR Servers claiming conformance to this Implementation Guide must conform to the expectations described in the Capability Statement appropriate to the implemented FHIR version.  For FHIR R4 servers, this guide defines the R4 Server CapabilityStatement.FHIR Servers claiming conformance to this Implementation Guide must conform to the expectations described in the Capability Statement appropriate to the implemented FHIR version.  For FHIR R4 servers, this guide defines the R4 Server CapabilityStatementR4 Server CapabilityStatement.
Some options of the Subscriptions Framework are not easily expressed in a CapabilityStatement.  In addition to the basic support in the CapabilityStatement (e.g., resources, interactions, and operations), a conformant server SHALL support at least one Payload Type and SHOULD support one Channel Type listed in this IG.Some options of the Subscriptions Framework are not easily expressed in a CapabilityStatementCapabilityStatement.  In addition to the basic support in the CapabilityStatement (e.g., resources, interactions, and operations), a conformant server SHALL support at least one Payload TypePayload Type and SHOULD support one Channel TypeChannel Type listed in this IG.
Note that the future publication of FHIR R5 may define capabilities included in this specification as cross-version extensions. Since FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements described by this guide.Note that the future publication of FHIR R5 may define capabilities included in this specification as cross-version extensions. Since FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements described by this guide.
Profile Support"
52,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#conformance-artifacts-1,54,"In addition to the basic support in the CapabilityStatement (e.g., resources, interactions, and operations), a conformant server ... SHOULD support one Channel Type listed in this IG.",SHOULD,Server,,,,Yes,,Yes,Partial validation only - cannot confirm conformance for systems not supporting Rest Hook channels,conformance,conformance-artifacts-1,,2.7.2.1,Notification Delivery,,,,,SIMULATED: Inferno will support rest-hook,,,,,,,"Conformance Artifacts
FHIR Servers claiming conformance to this Implementation Guide must conform to the expectations described in the Capability Statement appropriate to the implemented FHIR version.  For FHIR R4 servers, this guide defines the R4 Server CapabilityStatement.FHIR Servers claiming conformance to this Implementation Guide must conform to the expectations described in the Capability Statement appropriate to the implemented FHIR version.  For FHIR R4 servers, this guide defines the R4 Server CapabilityStatementR4 Server CapabilityStatement.
Some options of the Subscriptions Framework are not easily expressed in a CapabilityStatement.  In addition to the basic support in the CapabilityStatement (e.g., resources, interactions, and operations), a conformant server SHALL support at least one Payload Type and SHOULD support one Channel Type listed in this IG.Some options of the Subscriptions Framework are not easily expressed in a CapabilityStatementCapabilityStatement.  In addition to the basic support in the CapabilityStatement (e.g., resources, interactions, and operations), a conformant server SHALL support at least one Payload TypePayload Type and SHOULD support one Channel TypeChannel Type listed in this IG.
Note that the future publication of FHIR R5 may define capabilities included in this specification as cross-version extensions. Since FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements described by this guide.Note that the future publication of FHIR R5 may define capabilities included in this specification as cross-version extensions. Since FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements described by this guide.
Profile Support"
53,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#conformance-artifacts-1,55,"In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements also described by this guide",DEPRECATED,,,,,,,,,conformance,conformance-artifacts-1,,2.7.2.1,,,,,,,,,,,DEPRECATED - duplicate of 5 / 2.2.2-1,,"Conformance Artifacts
FHIR Servers claiming conformance to this Implementation Guide must conform to the expectations described in the Capability Statement appropriate to the implemented FHIR version.  For FHIR R4 servers, this guide defines the R4 Server CapabilityStatement.FHIR Servers claiming conformance to this Implementation Guide must conform to the expectations described in the Capability Statement appropriate to the implemented FHIR version.  For FHIR R4 servers, this guide defines the R4 Server CapabilityStatementR4 Server CapabilityStatement.
Some options of the Subscriptions Framework are not easily expressed in a CapabilityStatement.  In addition to the basic support in the CapabilityStatement (e.g., resources, interactions, and operations), a conformant server SHALL support at least one Payload Type and SHOULD support one Channel Type listed in this IG.Some options of the Subscriptions Framework are not easily expressed in a CapabilityStatementCapabilityStatement.  In addition to the basic support in the CapabilityStatement (e.g., resources, interactions, and operations), a conformant server SHALL support at least one Payload TypePayload Type and SHOULD support one Channel TypeChannel Type listed in this IG.
Note that the future publication of FHIR R5 may define capabilities included in this specification as cross-version extensions. Since FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements described by this guide.Note that the future publication of FHIR R5 may define capabilities included in this specification as cross-version extensions. Since FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements described by this guide.
Profile Support"
54,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#profile-support-1,56,a conformant server…SHALL communicate all profile data elements that are mandatory by that profile’s StructureDefinition.,DEPRECATED,,,,,Yes,,Yes,,conformance,profile-support-1,,2.7.2.1.1,Subscription Access,,,,Read a Subscription instance and validate it using the HL7 validator.,"SIMULATED: Inferno will echo back Susbcriptions provided by the client, with small modifications e.g., to the status. These Subscriptions must themselves be conformant for the tests to pass.",Subscription API,Implemented,,,DEPRECATED - split into 137-139,,"Profile Support
Profile Support refers to the support of the profiles defined in this guide in a system exposing FHIR resources. Specifically, a conformant server:Profile Support refers to the support of the profiles defined in this guide in a system exposing FHIR resources. Specifically, a conformant server:

SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.
SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.
SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription

SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.
SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiatesCapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.
SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscriptionSHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfileCapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscriptionhttp://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription

Must-support"
55,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#profile-support-1,57,a conformant server…SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the server’s CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.,SHOULD,Server,,,,Yes,,Yes,,conformance,profile-support-1,,2.7.2.1.1,CapabilityStatement,,,,The optional Subscription Topic Discovery test  will check if the server's Capability Statement contains the Backport Subscription Server official URL in the server’s CapabilityStatement.instantiates element,SIMULATED: Inferno publishes a CapabilityStatement declaring said support.,CapabilityStatement,Requested,,,,,"Profile Support
Profile Support refers to the support of the profiles defined in this guide in a system exposing FHIR resources. Specifically, a conformant server:Profile Support refers to the support of the profiles defined in this guide in a system exposing FHIR resources. Specifically, a conformant server:

SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.
SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.
SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription

SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.
SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiatesCapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.
SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscriptionSHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfileCapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscriptionhttp://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription

Must-support"
56,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#profile-support-1,58,"a conformant server…SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the server’s CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription",SHALL,Server,,,,Yes,,No,Conflicts with requirement 120 and is removed in future versions of the spec.,conformance,profile-support-1,,2.7.2.1.1,CapabilityStatement,,,,,NOT SIMULATED: contradictory,,,,,,,"Profile Support
Profile Support refers to the support of the profiles defined in this guide in a system exposing FHIR resources. Specifically, a conformant server:Profile Support refers to the support of the profiles defined in this guide in a system exposing FHIR resources. Specifically, a conformant server:

SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.
SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.
SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription

SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.
SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiatesCapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.
SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscriptionSHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfileCapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscriptionhttp://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription

Must-support"
57,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#backport-channel-type-1,59,Servers supporting this guide SHALL be able to read values present in this [backport-channel-type extension - https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-channel-type.html] element. ,SHALL,Server,,,,Yes,,Yes,,conformance,backport-channel-type-1,,2.7.2.2.1,Subscription Creation,,,,Test with Requirement 60,SIMULATED: Inferno will reject Subscriptions not using rest-hook.,Duplicate - 7,Implemented,,,,,"backport-channel-type
The backport-channel-type extension is used to allow for custom channels not described in this guide.The backport-channel-typebackport-channel-type extension is used to allow for custom channels not described in this guide.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values present in this element.  A server SHALL reject the subscription request if a client requests an unsupported channel via this element.Servers supporting this guide SHALL be able to read values present in this element.  A server SHALL reject the subscription request if a client requests an unsupported channel via this element.

Client Support
Clients supporting this guide MAY support this extension, as necessary for their use case.

Client Support
Clients supporting this guide MAY support this extension, as necessary for their use case.Client Support
Clients supporting this guide MAY support this extension, as necessary for their use case.

backport-filter-criteria"
58,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#backport-channel-type-1,60,A server SHALL reject the subscription request if a client requests an unsupported channel via this [backport-channel-type extension - https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-channel-type.html] element.,SHALL,Server,,,,Yes,,Yes,,conformance,backport-channel-type-1,,2.7.2.2.1,Subscription Creation,,,,"Identify a value that the server will not support (default with ability for tester to override), create a subscription with that value and verify that the Subscription is rejected.",SIMULATED: Inferno will reject Subscriptions not using rest-hook.,Duplicate - 7,Implemented,,,,IG AUTHORS: is modified ok?,"backport-channel-type
The backport-channel-type extension is used to allow for custom channels not described in this guide.The backport-channel-typebackport-channel-type extension is used to allow for custom channels not described in this guide.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values present in this element.  A server SHALL reject the subscription request if a client requests an unsupported channel via this element.Servers supporting this guide SHALL be able to read values present in this element.  A server SHALL reject the subscription request if a client requests an unsupported channel via this element.

Client Support
Clients supporting this guide MAY support this extension, as necessary for their use case.

Client Support
Clients supporting this guide MAY support this extension, as necessary for their use case.Client Support
Clients supporting this guide MAY support this extension, as necessary for their use case.

backport-filter-criteria"
59,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#backport-channel-type-1,61,"Clients supporting this guide MAY support this [backport-channel-type extension - https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-channel-type.html] extension, as necessary for their use case.",MAY,Client,,,,No,"In the context of this implementation guide, details on how to receive notifications over a custom channel do not exist.",No,Not Verifiable,conformance,backport-channel-type-1,,2.7.2.2.1,Subscription Creation,,,,,NOT SIMULATED: Inferno will not test custom channel types,,,,,,,"backport-channel-type
The backport-channel-type extension is used to allow for custom channels not described in this guide.The backport-channel-typebackport-channel-type extension is used to allow for custom channels not described in this guide.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values present in this element.  A server SHALL reject the subscription request if a client requests an unsupported channel via this element.Servers supporting this guide SHALL be able to read values present in this element.  A server SHALL reject the subscription request if a client requests an unsupported channel via this element.

Client Support
Clients supporting this guide MAY support this extension, as necessary for their use case.

Client Support
Clients supporting this guide MAY support this extension, as necessary for their use case.Client Support
Clients supporting this guide MAY support this extension, as necessary for their use case.

backport-filter-criteria"
60,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#backport-filter-criteria-1,62,Servers supporting this guide SHALL be able to read values in this [backport-filter-criteria - https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-filter-criteria.html] extension and SHALL be able to apply filters as described by any Subscription Topics the server advertises support for.,DEPRECATED,Server,,,,,,,,conformance,backport-filter-criteria-1,,2.7.2.2.2,Subscription Creation,,,,,,,,,,"Split into 135 and 136

Emily's original: The user may include this extension in their inputted Subscription resource. If included, the test will extract the resource type included in this extension to be used in the notification validation test to make sure the notification is related to the correct resource the Subscription is focused on. Otherwise if not included, the resource type must manually be included as an input

Because filters and notification shapes are formally defined in SubscriptionTopics which are out of scope for R4, I think we want to stay away from these validations",,"backport-filter-criteria
The backport-filter-criteria extension is used to describe the actual filters used in a specific instance of a subscription.The backport-filter-criteriabackport-filter-criteria extension is used to describe the actual filters used in a specific instance of a subscription.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values in this extension and SHALL be able to apply filters as described by any Subscription Topics the server advertises support for.Servers supporting this guide SHALL be able to read values in this extension and SHALL be able to apply filters as described by any Subscription Topics the server advertises support for.
If a server is capable of supporting filter criteria in general but unable to support criteria requested in a subscription, the server SHALL reject the subscription.If a server is capable of supporting filter criteria in general but unable to support criteria requested in a subscription, the server SHALL reject the subscription.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write values in this extension.Clients supporting this guide SHALL be able to write values in this extension.
backport-payload-content"
61,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#backport-filter-criteria-1,63,"If a server is capable of supporting filter criteria in general but unable to support criteria requested in a subscription [via the extension backport-filter-criteria - https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-filter-criteria.html], the server SHALL reject the subscription.",SHALL,Server,,,,Yes,,Yes,,conformance,backport-filter-criteria-1,,2.7.2.2.2,Subscription Creation,,,,"Identify a value that the server will not support (default with ability for tester to override), create a subscription with that value and verify that the Subscription is rejected.",NOT SIMULATED: Inferno will not reject Subscriptions due to criteria.,NONE,,,,,IG AUTHORS: is it ok to accept but modified without the filter? Seems like not…,"backport-filter-criteria
The backport-filter-criteria extension is used to describe the actual filters used in a specific instance of a subscription.The backport-filter-criteriabackport-filter-criteria extension is used to describe the actual filters used in a specific instance of a subscription.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values in this extension and SHALL be able to apply filters as described by any Subscription Topics the server advertises support for.Servers supporting this guide SHALL be able to read values in this extension and SHALL be able to apply filters as described by any Subscription Topics the server advertises support for.
If a server is capable of supporting filter criteria in general but unable to support criteria requested in a subscription, the server SHALL reject the subscription.If a server is capable of supporting filter criteria in general but unable to support criteria requested in a subscription, the server SHALL reject the subscription.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write values in this extension.Clients supporting this guide SHALL be able to write values in this extension.
backport-payload-content"
62,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#backport-filter-criteria-1,64,Clients supporting this guide SHALL be able to write values in this [backport-filter-criteria - https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-filter-criteria.html] extension.,SHALL,Client,,,,Yes,,Yes,,conformance,backport-filter-criteria-1,,2.7.2.2.2,Subscription Creation,,,,Require that a client provide a Subscription with a filter value.,TESTER-DIRECTED: Subscriptions that Inferno uses are provided by the tester and verified against the relevant requirements. Tester can decide within those requirements whether to include this element on a particular Subscription instance.,,,,,,,"backport-filter-criteria
The backport-filter-criteria extension is used to describe the actual filters used in a specific instance of a subscription.The backport-filter-criteriabackport-filter-criteria extension is used to describe the actual filters used in a specific instance of a subscription.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values in this extension and SHALL be able to apply filters as described by any Subscription Topics the server advertises support for.Servers supporting this guide SHALL be able to read values in this extension and SHALL be able to apply filters as described by any Subscription Topics the server advertises support for.
If a server is capable of supporting filter criteria in general but unable to support criteria requested in a subscription, the server SHALL reject the subscription.If a server is capable of supporting filter criteria in general but unable to support criteria requested in a subscription, the server SHALL reject the subscription.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write values in this extension.Clients supporting this guide SHALL be able to write values in this extension.
backport-payload-content"
63,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#backport-payload-content-1,65,Servers supporting this guide SHALL be able to read values from this [backport-payload-content - https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-payload-content.html] extension.,SHALL,Server,,,,Yes,,Yes,,conformance,backport-payload-content-1,,2.7.2.2.3,Subscription Creation,,,,"When creating a Subscription on the server, verify that the returned extension value is the same as what was passed in (can preserve the value), and when receiving a notification for that Subscription verify that the content matches what is specified in this extension and meets its requirements.",SIMULATED: Inferno will use the extension to determine how to validate the notification provided by the tester.,Apply existing server validation to tester-provided notifications,requested,,,,,"backport-payload-content
The backport-payload-content extension is used to describe the amount of detail included in notification payloads.The backport-payload-contentbackport-payload-content extension is used to describe the amount of detail included in notification payloads.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values from this extension.  A server SHALL reject the subscription request if a client asks for a content level the server does not intend to support (e.g., does not meet security requirements).  Servers SHALL include information in notifications as described in this guide based on this value.Servers supporting this guide SHALL be able to read values from this extension.  A server SHALL reject the subscription request if a client asks for a content level the server does not intend to support (e.g., does not meet security requirements).  Servers SHALL include information in notifications as described in this guide based on this value.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write values in this extension.Clients supporting this guide SHALL be able to write values in this extension.
Notification entry: SubscriptionStatus"
64,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#backport-payload-content-1,66,"A server SHALL reject the subscription request if a client asks for a content level the server does not intend to support (e.g., does not meet security requirements) [using the extension backport-payload-content - https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-payload-content.html].",SHALL,Server,,,,Yes,,Yes,,conformance,backport-payload-content-1,,2.7.2.2.3,Subscription Creation,,,,"Identify a value that the server will not support (default with ability for tester to override), create a subscription with that value and verify that the Subscription is rejected.",NOT SIMULATED: Inferno will support all content types,NONE,,,,,IG AUTHORS: is it ok to accept but modified without the filter? Seems like not…,"backport-payload-content
The backport-payload-content extension is used to describe the amount of detail included in notification payloads.The backport-payload-contentbackport-payload-content extension is used to describe the amount of detail included in notification payloads.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values from this extension.  A server SHALL reject the subscription request if a client asks for a content level the server does not intend to support (e.g., does not meet security requirements).  Servers SHALL include information in notifications as described in this guide based on this value.Servers supporting this guide SHALL be able to read values from this extension.  A server SHALL reject the subscription request if a client asks for a content level the server does not intend to support (e.g., does not meet security requirements).  Servers SHALL include information in notifications as described in this guide based on this value.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write values in this extension.Clients supporting this guide SHALL be able to write values in this extension.
Notification entry: SubscriptionStatus"
65,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#backport-payload-content-1,67,Servers SHALL include information in notifications as described in this guide based on this value [in the extension backport-payload-content - https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-payload-content.html].,SHALL,Server,,,,Yes,,Yes,,conformance,backport-payload-content-1,,2.7.2.2.3,Subscription Creation,,,,When receiving a notification for that Subscription verify that the content matches what is specified in this extension and meets its requirements.,SIMULATED: Inferno will use the extension to determine how to validate the notification provided by the tester.,Apply existing server validation to tester-provided notifications,requested,,,,,"backport-payload-content
The backport-payload-content extension is used to describe the amount of detail included in notification payloads.The backport-payload-contentbackport-payload-content extension is used to describe the amount of detail included in notification payloads.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values from this extension.  A server SHALL reject the subscription request if a client asks for a content level the server does not intend to support (e.g., does not meet security requirements).  Servers SHALL include information in notifications as described in this guide based on this value.Servers supporting this guide SHALL be able to read values from this extension.  A server SHALL reject the subscription request if a client asks for a content level the server does not intend to support (e.g., does not meet security requirements).  Servers SHALL include information in notifications as described in this guide based on this value.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write values in this extension.Clients supporting this guide SHALL be able to write values in this extension.
Notification entry: SubscriptionStatus"
66,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#backport-payload-content-1,68,Clients supporting this guide SHALL be able to write values in this [backport-payload-content - https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-payload-content.html] extension.,SHALL,Client,,,,Yes,,Yes,,conformance,backport-payload-content-1,,2.7.2.2.3,Subscription Creation,,,,Verify that the value is present on Client-provided Subscriptions using the HL7 validator (Required element),TESTER-DIRECTED: Subscriptions that Inferno uses are provided by the tester and verified against the relevant requirements. Tester can decide within those requirements whether to include this element on a particular Subscription instance.,,,,,,,"backport-payload-content
The backport-payload-content extension is used to describe the amount of detail included in notification payloads.The backport-payload-contentbackport-payload-content extension is used to describe the amount of detail included in notification payloads.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values from this extension.  A server SHALL reject the subscription request if a client asks for a content level the server does not intend to support (e.g., does not meet security requirements).  Servers SHALL include information in notifications as described in this guide based on this value.Servers supporting this guide SHALL be able to read values from this extension.  A server SHALL reject the subscription request if a client asks for a content level the server does not intend to support (e.g., does not meet security requirements).  Servers SHALL include information in notifications as described in this guide based on this value.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write values in this extension.Clients supporting this guide SHALL be able to write values in this extension.
Notification entry: SubscriptionStatus"
67,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#notification-entry-subscriptionstatus-1,69,Servers supporting this guide SHALL be able to generate a valid and correct R4 Backported R5 SubscriptionStatus resource for each notification. ,SHALL,Server,,,,Yes,,Yes,,conformance,notification-entry-subscriptionstatus-1,,2.7.2.2.4,Notification Content,,,,pull the first entry out of the Bundle and ensure the resource is a Parameters resource and it will validate it with the R4 Backported R5 SubscriptionStatus profile. ,TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,Implemented,,notification_validation,,,"Notification entry: SubscriptionStatus
Notification bundles SHALL contain a FHIR R4 Parameters resource, conforming to the R4 Backported R5 SubscriptionStatus profile, as the first entry.Notification bundles SHALL contain a FHIR R4 ParametersParameters resource, conforming to the R4 Backported R5 SubscriptionStatusR4 Backported R5 SubscriptionStatus profile, as the first entry.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to generate a valid and correct R4 Backported R5 SubscriptionStatus resource for each notification.  The status entry SHALL be the first entry of each notification bundle.Servers supporting this guide SHALL be able to generate a valid and correct R4 Backported R5 SubscriptionStatusR4 Backported R5 SubscriptionStatus resource for each notification.  The status entry SHALL be the first entry of each notification bundle.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to process a valid R4 Backported R5 SubscriptionStatus resource without errors.Clients supporting this guide SHALL be able to process a valid R4 Backported R5 SubscriptionStatusR4 Backported R5 SubscriptionStatus resource without errors.
Subscription.criteria"
68,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#notification-entry-subscriptionstatus-1,70,The status entry SHALL be the first entry of each notification bundle.,SHALL,Server,,,,Yes,,Yes,,conformance,notification-entry-subscriptionstatus-1,,2.7.2.2.4,Notification Content,,,,pull the first entry out of the Bundle and ensure the resource is a Parameters resource and it will validate it with the R4 Backported R5 SubscriptionStatus profile. ,TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,Implemented,,notification_validation,,,"Notification entry: SubscriptionStatus
Notification bundles SHALL contain a FHIR R4 Parameters resource, conforming to the R4 Backported R5 SubscriptionStatus profile, as the first entry.Notification bundles SHALL contain a FHIR R4 ParametersParameters resource, conforming to the R4 Backported R5 SubscriptionStatusR4 Backported R5 SubscriptionStatus profile, as the first entry.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to generate a valid and correct R4 Backported R5 SubscriptionStatus resource for each notification.  The status entry SHALL be the first entry of each notification bundle.Servers supporting this guide SHALL be able to generate a valid and correct R4 Backported R5 SubscriptionStatusR4 Backported R5 SubscriptionStatus resource for each notification.  The status entry SHALL be the first entry of each notification bundle.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to process a valid R4 Backported R5 SubscriptionStatus resource without errors.Clients supporting this guide SHALL be able to process a valid R4 Backported R5 SubscriptionStatusR4 Backported R5 SubscriptionStatus resource without errors.
Subscription.criteria"
69,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#notification-entry-subscriptionstatus-1,71,Clients supporting this guide SHALL be able to process a valid R4 Backported R5 SubscriptionStatus resource without errors.,SHALL,Client,,,,Yes,,Yes,,conformance,notification-entry-subscriptionstatus-1,,2.7.2.2.4,Notification Content,,,,"After event notificaiton and/or handshake, tester attests that their system properly processed the notification.",SIMULATED: Inferno will process notification messages for testing verification.,,,,,,"TEST DESIGN: is a 200 response (or similar) enough to indicate processing ""without errors"" or would some kind of attestation provide a better coverage?","Notification entry: SubscriptionStatus
Notification bundles SHALL contain a FHIR R4 Parameters resource, conforming to the R4 Backported R5 SubscriptionStatus profile, as the first entry.Notification bundles SHALL contain a FHIR R4 ParametersParameters resource, conforming to the R4 Backported R5 SubscriptionStatusR4 Backported R5 SubscriptionStatus profile, as the first entry.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to generate a valid and correct R4 Backported R5 SubscriptionStatus resource for each notification.  The status entry SHALL be the first entry of each notification bundle.Servers supporting this guide SHALL be able to generate a valid and correct R4 Backported R5 SubscriptionStatusR4 Backported R5 SubscriptionStatus resource for each notification.  The status entry SHALL be the first entry of each notification bundle.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to process a valid R4 Backported R5 SubscriptionStatus resource without errors.Clients supporting this guide SHALL be able to process a valid R4 Backported R5 SubscriptionStatusR4 Backported R5 SubscriptionStatus resource without errors.
Subscription.criteria"
70,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#subscriptioncriteria-1,72,"The Subscription.criteria element is required (cardinality of 1..1), so any compatible implementation SHALL be able to read and/or write as necessary.",SHALL,Server,,,,Yes,,Yes,,conformance,subscriptioncriteria-1,,2.7.2.2.5,Subscription Creation,,,,"Use the HL7 validator to verify a conformant Subscription instance, which includes this element. Additionally, check it explicitly since if the filter extension is present, it counts as populated even if there is no value in the base element.",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Apply existing server validation to tester-provided notifications,Implemented,,,"Emily's Original: The validator will ensure the Subscription resource has the Subscription.criteria element populated. The Subscription creation test will then ensure that the value of this field is equal to the user inputted SubscriptionTopic url

Because the topic is present in the Subscription provided, there doesn't seem to be value in taking it as a second input and validating they are the same.",,"Subscription.criteria
The Subscription.criteria element is required (cardinality of 1..1), so any compatible implementation SHALL be able to read and/or write as necessary.  Compared with the core specification, this guide specifies that the element SHALL contain the canonical URL for the Subscription Topic.The Subscription.criteriaSubscription.criteria element is required (cardinality of 1..1), so any compatible implementation SHALL be able to read and/or write as necessary.  Compared with the core specification, this guide specifies that the element SHALL contain the canonical URL for the Subscription Topic.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values in this element and process requests for subscription topics referenced by it.  If a server does not support a requested topic or will not honor the subscription otherwise, a server SHALL reject the subscription request.Servers supporting this guide SHALL be able to read values in this element and process requests for subscription topics referenced by it.  If a server does not support a requested topic or will not honor the subscription otherwise, a server SHALL reject the subscription request.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write subscription topic URLs into this element.Clients supporting this guide SHALL be able to write subscription topic URLs into this element.

 
 
 
 
 "
71,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#subscriptioncriteria-1,73,"Compared with the core specification, this guide specifies that the [Subscription.criteria] element SHALL contain the canonical URL for the Subscription Topic.",SHALL,Server,,,,Yes,,Yes,,conformance,subscriptioncriteria-1,,2.7.2.2.5,Subscription Creation,,,,Verify that the Subscription.criteria element is a valid url data type (in addition to HL7 validator checks),TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Add additional server validation to tester-provided notifications,,,,"Emily's Original: The validator will ensure the Subscription resource has the Subscription.criteria element populated. The Subscription creation test will then ensure that the value of this field is equal to the user inputted SubscriptionTopic url

Can verify that the element is a url, not just a string like is required by the profile.",,"Subscription.criteria
The Subscription.criteria element is required (cardinality of 1..1), so any compatible implementation SHALL be able to read and/or write as necessary.  Compared with the core specification, this guide specifies that the element SHALL contain the canonical URL for the Subscription Topic.The Subscription.criteriaSubscription.criteria element is required (cardinality of 1..1), so any compatible implementation SHALL be able to read and/or write as necessary.  Compared with the core specification, this guide specifies that the element SHALL contain the canonical URL for the Subscription Topic.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values in this element and process requests for subscription topics referenced by it.  If a server does not support a requested topic or will not honor the subscription otherwise, a server SHALL reject the subscription request.Servers supporting this guide SHALL be able to read values in this element and process requests for subscription topics referenced by it.  If a server does not support a requested topic or will not honor the subscription otherwise, a server SHALL reject the subscription request.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write subscription topic URLs into this element.Clients supporting this guide SHALL be able to write subscription topic URLs into this element.

 
 
 
 
 "
72,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#subscriptioncriteria-1,74,Servers supporting this guide SHALL be able to read values in this [Subscription.criteria] element and process requests for subscription topics referenced by it.,SHALL,Server,,,,Yes,,Yes,"Inferno can't see inside the triggering process to verify that a notification is appropriate vis-à-vis the requested topic,  particularly without a formal SubscriptionTopic definition. However, testers can verify that the notifications are appropriate (as opposed to random)",conformance,subscriptioncriteria-1,,2.7.2.2.5,Subscription Creation,,,,,SIMULATED: Inferno will use this value to validate the provided notification(s) if the topic is also present there.,,,,,"Emily's Original: The validator will ensure the Subscription resource has the Subscription.criteria element populated. The Subscription creation test will then ensure that the value of this field is equal to the user inputted SubscriptionTopic url

What does it mean to read values from this field? I think it means to recognize what events should be triggered for it. That's something that we can't test mechanically, particularly without a formal SubscriptionTopic definition.",TEST DESIGN: I think this is partly about when to trigger events for a given subscription. Is this important enough to add an attestation for it?,"Subscription.criteria
The Subscription.criteria element is required (cardinality of 1..1), so any compatible implementation SHALL be able to read and/or write as necessary.  Compared with the core specification, this guide specifies that the element SHALL contain the canonical URL for the Subscription Topic.The Subscription.criteriaSubscription.criteria element is required (cardinality of 1..1), so any compatible implementation SHALL be able to read and/or write as necessary.  Compared with the core specification, this guide specifies that the element SHALL contain the canonical URL for the Subscription Topic.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values in this element and process requests for subscription topics referenced by it.  If a server does not support a requested topic or will not honor the subscription otherwise, a server SHALL reject the subscription request.Servers supporting this guide SHALL be able to read values in this element and process requests for subscription topics referenced by it.  If a server does not support a requested topic or will not honor the subscription otherwise, a server SHALL reject the subscription request.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write subscription topic URLs into this element.Clients supporting this guide SHALL be able to write subscription topic URLs into this element.

 
 
 
 
 "
73,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#subscriptioncriteria-1,75,"If a server does not support a requested topic [in the Subscription.criteria element] or will not honor the subscription otherwise, a server SHALL reject the subscription request.",SHALL,Server,,,,Yes,,Yes,,conformance,subscriptioncriteria-1,,2.7.2.2.5,Subscription Creation,,,,"Identify a value that the server will not support (default with ability for tester to override), create a subscription with that value and verify that the Subscription is rejected.",NOT SIMULATED: Inferno will support any topic provided.,NONE,,,,,,"Subscription.criteria
The Subscription.criteria element is required (cardinality of 1..1), so any compatible implementation SHALL be able to read and/or write as necessary.  Compared with the core specification, this guide specifies that the element SHALL contain the canonical URL for the Subscription Topic.The Subscription.criteriaSubscription.criteria element is required (cardinality of 1..1), so any compatible implementation SHALL be able to read and/or write as necessary.  Compared with the core specification, this guide specifies that the element SHALL contain the canonical URL for the Subscription Topic.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values in this element and process requests for subscription topics referenced by it.  If a server does not support a requested topic or will not honor the subscription otherwise, a server SHALL reject the subscription request.Servers supporting this guide SHALL be able to read values in this element and process requests for subscription topics referenced by it.  If a server does not support a requested topic or will not honor the subscription otherwise, a server SHALL reject the subscription request.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write subscription topic URLs into this element.Clients supporting this guide SHALL be able to write subscription topic URLs into this element.

 
 
 
 
 "
74,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#subscriptioncriteria-1,76,Clients supporting this guide SHALL be able to write subscription topic URLs into this [Subscription.criteria] element.,SHALL,Client,,,,Yes,,Yes,,conformance,subscriptioncriteria-1,,2.7.2.2.5,Subscription Creation,,,,check client-provided Subscriptions to make sure they have a topic URL in Subscription.cirteria,TESTER-DIRECTED: Subscriptions that Inferno uses are provided by the tester and verified against the relevant requirements. Tester can decide within those requirements whether to include this element on a particular Subscription instance.,,,,,,,"Subscription.criteria
The Subscription.criteria element is required (cardinality of 1..1), so any compatible implementation SHALL be able to read and/or write as necessary.  Compared with the core specification, this guide specifies that the element SHALL contain the canonical URL for the Subscription Topic.The Subscription.criteriaSubscription.criteria element is required (cardinality of 1..1), so any compatible implementation SHALL be able to read and/or write as necessary.  Compared with the core specification, this guide specifies that the element SHALL contain the canonical URL for the Subscription Topic.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values in this element and process requests for subscription topics referenced by it.  If a server does not support a requested topic or will not honor the subscription otherwise, a server SHALL reject the subscription request.Servers supporting this guide SHALL be able to read values in this element and process requests for subscription topics referenced by it.  If a server does not support a requested topic or will not honor the subscription otherwise, a server SHALL reject the subscription request.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write subscription topic URLs into this element.Clients supporting this guide SHALL be able to write subscription topic URLs into this element.

 
 
 
 
 "
75,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/errors.html#handling-errors-as-a-server,77,A server SHALL…Increment the eventsSinceSubscriptionStart counter internally.,SHALL,Server,,,,Yes,,Yes,,errors,handling-errors-as-a-server,,2.8.1,Error Handling,,,,"When validating a Subscription notification and its Status, if the events-since-subscription-start is present, make sure that it is equal to the highest notification-event number present in the notification (only event notifications, not handshake or heartbeats)",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Add additional server validation to tester-provided notifications,,,,"Emily's Original: The notification validation test will check that the notification has the correct events-since-subscription-start and notification-event number - should be 1 since this is the first notification since creating the subscription

Note that while delivery is technically best effort, I think that we can more strict and say that the first delivery has to be successful. Doesn't appear the the IG says anywhere that the events since Subscription start needs to be exposed - onlly Must Support without defining what that means. Also loosened to not just be 1 since we want Subscription validation to be general to more than just the first notification.","IG AUTHORS: Is the events-since-subscription-start parameter required to be provided on notifications? It is must support but not required and the IG doesn't define what must support means.

Scenario question: say two notifications are triggered roughly simultaneously but maxCount is 1, so two notification POSTs are made. Is the events-since-subscription-start in each intended to be the number of the event, or would they both be the higher number? The former would make some verification and interpretation easier and less confusing for clients - they wouldn't mistakenly think they'd missed something, but not clear that the other approach is invalid.

SIMULATION DESIGN: will Inferno need to send back multiple notifications - probably yes to handle this requrirement. though it could send the same notification over and over modifying the event stuff...","Handling Errors as a Server
Error handling as a Server is intended to be simple.  A server is not expected to know the best process for every use case of every subscriber, so the focus is on allowing clients to detect there is an issue.  A server SHALL:Error handling as a Server is intended to be simple.  A server is not expected to know the best process for every use case of every subscriber, so the focus is on allowing clients to detect there is an issue.  A server SHALL:

Increment the eventsSinceSubscriptionStart counter internally.
Update the status of the subscription internally.
Continue to respond to $status requests.

Increment the eventsSinceSubscriptionStart counter internally.Increment the eventsSinceSubscriptionStarteventsSinceSubscriptionStart counter internally.
Update the status of the subscription internally.Update the statusstatus of the subscription internally.
Continue to respond to $status requests.Continue to respond to $status$status requests.

A server MAY:A server MAY:

Continue to send heartbeat messages (with an error status set).

Continue to send heartbeat messages (with an error status set).Continue to send heartbeatheartbeat messages (with an errorerror status set).

Discovering the error state and recovering from it are responsibilities of the subscriber.  This includes resetting the Subscription to an active or requested status - a client is responsible for requesting re-activation of a subscription.  Note: this is important because a subscriber must make the determination of how to recover from an error state; if a server arbitrarily resets a subscription, a subscriber may not be aware of missing notifications.Discovering the error state and recovering from it are responsibilities of the subscriber.  This includes resetting the SubscriptionSubscription to an activeactive or requestedrequested status - a client is responsible for requesting re-activation of a subscription.  Note: this is important because a subscriber must make the determination of how to recover from an error state; if a server arbitrarily resets a subscription, a subscriber may not be aware of missing notifications.
Detecting Errors as a Subscriber"
76,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/errors.html#handling-errors-as-a-server,78,A server SHALL…Update the status of the subscription internally.,SHALL,Server,,,,Yes,,Yes,,errors,handling-errors-as-a-server,,2.8.1,Error Handling,,,,"On a failed handshake, verify using $status that the status has been updated to '""error"".",SIMULATED: Inferno will look for the presence of tagged requests to determine the status of a subscription.,Subscription Status Tracking,Implemented,,,"Emily's Original: The handshake test checks that the SubscriptionTopic (Parameters) status is set to `requested`, and the $status operation test will later check that the status was updated to `active`

Update to tie to an error case",SIMULATION DESIGN: how to handle Subscription reads and keeping the status consistent?,"Handling Errors as a Server
Error handling as a Server is intended to be simple.  A server is not expected to know the best process for every use case of every subscriber, so the focus is on allowing clients to detect there is an issue.  A server SHALL:Error handling as a Server is intended to be simple.  A server is not expected to know the best process for every use case of every subscriber, so the focus is on allowing clients to detect there is an issue.  A server SHALL:

Increment the eventsSinceSubscriptionStart counter internally.
Update the status of the subscription internally.
Continue to respond to $status requests.

Increment the eventsSinceSubscriptionStart counter internally.Increment the eventsSinceSubscriptionStarteventsSinceSubscriptionStart counter internally.
Update the status of the subscription internally.Update the statusstatus of the subscription internally.
Continue to respond to $status requests.Continue to respond to $status$status requests.

A server MAY:A server MAY:

Continue to send heartbeat messages (with an error status set).

Continue to send heartbeat messages (with an error status set).Continue to send heartbeatheartbeat messages (with an errorerror status set).

Discovering the error state and recovering from it are responsibilities of the subscriber.  This includes resetting the Subscription to an active or requested status - a client is responsible for requesting re-activation of a subscription.  Note: this is important because a subscriber must make the determination of how to recover from an error state; if a server arbitrarily resets a subscription, a subscriber may not be aware of missing notifications.Discovering the error state and recovering from it are responsibilities of the subscriber.  This includes resetting the SubscriptionSubscription to an activeactive or requestedrequested status - a client is responsible for requesting re-activation of a subscription.  Note: this is important because a subscriber must make the determination of how to recover from an error state; if a server arbitrarily resets a subscription, a subscriber may not be aware of missing notifications.
Detecting Errors as a Subscriber"
77,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/errors.html#handling-errors-as-a-server,79,A server SHALL…Continue to respond to $status requests.,SHALL,Server,,,,Yes,,Yes,,errors,handling-errors-as-a-server,,2.8.1,Status Operation,,,,"After a failed handshake, invoke the $status operation and verify that it continues to return information on the errored Subscription.","SIMULATED: as long as the wait is active, Inferno will respond. Outside of a the wait it was provided during, Inferno will no longer respond to status requests for a given subscription",Status API,Implemented,,,"Emily's Original: $status test ensures the server correctly responds to $status requests

Update to be in an error context",SIMULATION DESIGN: how to handle Subscription reads and keeping the status consistent?,"Handling Errors as a Server
Error handling as a Server is intended to be simple.  A server is not expected to know the best process for every use case of every subscriber, so the focus is on allowing clients to detect there is an issue.  A server SHALL:Error handling as a Server is intended to be simple.  A server is not expected to know the best process for every use case of every subscriber, so the focus is on allowing clients to detect there is an issue.  A server SHALL:

Increment the eventsSinceSubscriptionStart counter internally.
Update the status of the subscription internally.
Continue to respond to $status requests.

Increment the eventsSinceSubscriptionStart counter internally.Increment the eventsSinceSubscriptionStarteventsSinceSubscriptionStart counter internally.
Update the status of the subscription internally.Update the statusstatus of the subscription internally.
Continue to respond to $status requests.Continue to respond to $status$status requests.

A server MAY:A server MAY:

Continue to send heartbeat messages (with an error status set).

Continue to send heartbeat messages (with an error status set).Continue to send heartbeatheartbeat messages (with an errorerror status set).

Discovering the error state and recovering from it are responsibilities of the subscriber.  This includes resetting the Subscription to an active or requested status - a client is responsible for requesting re-activation of a subscription.  Note: this is important because a subscriber must make the determination of how to recover from an error state; if a server arbitrarily resets a subscription, a subscriber may not be aware of missing notifications.Discovering the error state and recovering from it are responsibilities of the subscriber.  This includes resetting the SubscriptionSubscription to an activeactive or requestedrequested status - a client is responsible for requesting re-activation of a subscription.  Note: this is important because a subscriber must make the determination of how to recover from an error state; if a server arbitrarily resets a subscription, a subscriber may not be aware of missing notifications.
Detecting Errors as a Subscriber"
78,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/errors.html#handling-errors-as-a-server,80,A server MAY Continue to send heartbeat messages (with an error status set).,MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",errors,handling-errors-as-a-server,,2.8.1,Heartbeat,,,,,NOT SIMULATED: Inferno will send heartbeat notifications during a circumscribed amount of time for testing and won't continue beyond that.,,,,,,,"Handling Errors as a Server
Error handling as a Server is intended to be simple.  A server is not expected to know the best process for every use case of every subscriber, so the focus is on allowing clients to detect there is an issue.  A server SHALL:Error handling as a Server is intended to be simple.  A server is not expected to know the best process for every use case of every subscriber, so the focus is on allowing clients to detect there is an issue.  A server SHALL:

Increment the eventsSinceSubscriptionStart counter internally.
Update the status of the subscription internally.
Continue to respond to $status requests.

Increment the eventsSinceSubscriptionStart counter internally.Increment the eventsSinceSubscriptionStarteventsSinceSubscriptionStart counter internally.
Update the status of the subscription internally.Update the statusstatus of the subscription internally.
Continue to respond to $status requests.Continue to respond to $status$status requests.

A server MAY:A server MAY:

Continue to send heartbeat messages (with an error status set).

Continue to send heartbeat messages (with an error status set).Continue to send heartbeatheartbeat messages (with an errorerror status set).

Discovering the error state and recovering from it are responsibilities of the subscriber.  This includes resetting the Subscription to an active or requested status - a client is responsible for requesting re-activation of a subscription.  Note: this is important because a subscriber must make the determination of how to recover from an error state; if a server arbitrarily resets a subscription, a subscriber may not be aware of missing notifications.Discovering the error state and recovering from it are responsibilities of the subscriber.  This includes resetting the SubscriptionSubscription to an activeactive or requestedrequested status - a client is responsible for requesting re-activation of a subscription.  Note: this is important because a subscriber must make the determination of how to recover from an error state; if a server arbitrarily resets a subscription, a subscriber may not be aware of missing notifications.
Detecting Errors as a Subscriber"
79,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/errors.html#handling-errors-as-a-server,81,"Discovering the error state and recovering from it are responsibilities of the subscriber. This includes resetting the Subscription to an active or requested status - a client is responsible for requesting re-activation of a subscription. Note: this is important because a subscriber must make the determination of how to recover from an error state; if a server arbitrarily resets a subscription, a subscriber may not be aware of missing notifications.",SHALL,Client,,,,Yes,,Yes,,errors,handling-errors-as-a-server,,2.8.1,Error Handling,,,,Create an error state and require that the client take steps to re-activate the subscription.,SIMULATED: Inferno will intentionally return an error on a subscription notification and then subsequently request reactivation and accept the notification.,,,,,Is this simulation needed to test any server requirements?,SIMULATION DESIGN: Does this need to be a server requirement to allow re-starting after an error state?,"Handling Errors as a Server
Error handling as a Server is intended to be simple.  A server is not expected to know the best process for every use case of every subscriber, so the focus is on allowing clients to detect there is an issue.  A server SHALL:Error handling as a Server is intended to be simple.  A server is not expected to know the best process for every use case of every subscriber, so the focus is on allowing clients to detect there is an issue.  A server SHALL:

Increment the eventsSinceSubscriptionStart counter internally.
Update the status of the subscription internally.
Continue to respond to $status requests.

Increment the eventsSinceSubscriptionStart counter internally.Increment the eventsSinceSubscriptionStarteventsSinceSubscriptionStart counter internally.
Update the status of the subscription internally.Update the statusstatus of the subscription internally.
Continue to respond to $status requests.Continue to respond to $status$status requests.

A server MAY:A server MAY:

Continue to send heartbeat messages (with an error status set).

Continue to send heartbeat messages (with an error status set).Continue to send heartbeatheartbeat messages (with an errorerror status set).

Discovering the error state and recovering from it are responsibilities of the subscriber.  This includes resetting the Subscription to an active or requested status - a client is responsible for requesting re-activation of a subscription.  Note: this is important because a subscriber must make the determination of how to recover from an error state; if a server arbitrarily resets a subscription, a subscriber may not be aware of missing notifications.Discovering the error state and recovering from it are responsibilities of the subscriber.  This includes resetting the SubscriptionSubscription to an activeactive or requestedrequested status - a client is responsible for requesting re-activation of a subscription.  Note: this is important because a subscriber must make the determination of how to recover from an error state; if a server arbitrarily resets a subscription, a subscriber may not be aware of missing notifications.
Detecting Errors as a Subscriber"
80,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/errors.html#recovering-from-errors,82,"Once an application has returned to a functional state, it should request the subscription is reactivated by updating the status to either requested or active as appropriate.",SHALL,Client,,,,Yes,,Yes,,errors,recovering-from-errors,,2.8.4,Error Handling,,,,Create an error state and require that the client take steps to re-activate the subscription.,SIMULATED: Inferno will intentionally return an error on a subscription notification and then subsequently request reactivation and accept the notification.,,,,,Is this simulation needed to test any server requirements?,SIMULATION DESIGN: Does this need to be a server requirement to allow re-starting after an error state?,"Recovering from Errors
Clients are responsible for devising an appropriate method for recovering from errors.  Often, this process will include a series or batch of requests that allow a client to know the current state.  For example, an application may need to query all relevant resources for a patient in order to ensure nothing has been missed.  Once an application has returned to a functional state, it should request the subscription is reactivated by updating the status to either requested or active as appropriate.Clients are responsible for devising an appropriate method for recovering from errors.  Often, this process will include a series or batch of requests that allow a client to know the current state.  For example, an application may need to query all relevant resources for a patient in order to ensure nothing has been missed.  Once an application has returned to a functional state, it should request the subscription is reactivated by updating the statusstatus to either requestedrequested or activeactive as appropriate.
Using the $events operation"
81,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/errors.html#using-the-events-operation,83,"Servers MAY choose to support the $events operation, as defined in this IG.",MAY,Server,,,,Yes,,Yes,"Support for this MAY requirement implies other requirements must be supported, so these will be checked in conjunction with this one.",errors,using-the-events-operation,,2.8.4.1,Events Operation,,,,Invoke the $events operation and verify that a success status is returned.,SIMULATED: use tagged requests to gather notifications sent and return the appropriate ones.,Events API,,,,,"SIMULATION DESIGN: how to handle Notification reads? Can used tagged requests, likely, though it may get complicated. Filtering will be seomthing…","Using the $events operation
Servers MAY choose to support the $events operation, as defined in this IG.  The $events operation allows clients to request events which have occurred in the past.  Servers which implement the operation MAY use implementation-specific criteria to restrict availability of events (e.g., most recent 10 events, events within the past 30 days, etc.).Servers MAY choose to support the $events$events operation, as defined in this IG.  The $events$events operation allows clients to request events which have occurred in the past.  Servers which implement the operation MAY use implementation-specific criteria to restrict availability of events (e.g., most recent 10 events, events within the past 30 days, etc.).
During a recovery process, clients MAY try to retrieve missing events via the $events operation, which should allow processing to continue as normal.During a recovery process, clients MAY try to retrieve missing events via the $events$events operation, which should allow processing to continue as normal.

 
 
 
 
 "
82,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/errors.html#using-the-events-operation,84,"Servers which implement the operation MAY use implementation-specific criteria to restrict availability of events (e.g., most recent 10 events, events within the past 30 days, etc.).",MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",errors,using-the-events-operation,,2.8.4.1,Events Operation,,,,,NOT SIMULATED: Inferno will include all available notifications.,,,,,,,"Using the $events operation
Servers MAY choose to support the $events operation, as defined in this IG.  The $events operation allows clients to request events which have occurred in the past.  Servers which implement the operation MAY use implementation-specific criteria to restrict availability of events (e.g., most recent 10 events, events within the past 30 days, etc.).Servers MAY choose to support the $events$events operation, as defined in this IG.  The $events$events operation allows clients to request events which have occurred in the past.  Servers which implement the operation MAY use implementation-specific criteria to restrict availability of events (e.g., most recent 10 events, events within the past 30 days, etc.).
During a recovery process, clients MAY try to retrieve missing events via the $events operation, which should allow processing to continue as normal.During a recovery process, clients MAY try to retrieve missing events via the $events$events operation, which should allow processing to continue as normal.

 
 
 
 
 "
83,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/errors.html#using-the-events-operation,85,"During a recovery process, clients MAY try to retrieve missing events via the $events operation, which should allow processing to continue as normal.",MAY,Client,,,,Yes,,Yes,"Support for this MAY requirement implies other requirements must be supported, so these will be checked in conjunction with this one.",errors,using-the-events-operation,,2.8.4.1,Error Handling,,,,ask clients to invoke the $evernts operation and validate that it is a conformant invocation.,TESTER-DIRECTED: get $event operation invocations from the tester.,,,,,,SIMULATION DESIGN: how to handle Subscription reads and keeping the status consistent?,"Using the $events operation
Servers MAY choose to support the $events operation, as defined in this IG.  The $events operation allows clients to request events which have occurred in the past.  Servers which implement the operation MAY use implementation-specific criteria to restrict availability of events (e.g., most recent 10 events, events within the past 30 days, etc.).Servers MAY choose to support the $events$events operation, as defined in this IG.  The $events$events operation allows clients to request events which have occurred in the past.  Servers which implement the operation MAY use implementation-specific criteria to restrict availability of events (e.g., most recent 10 events, events within the past 30 days, etc.).
During a recovery process, clients MAY try to retrieve missing events via the $events operation, which should allow processing to continue as normal.During a recovery process, clients MAY try to retrieve missing events via the $events$events operation, which should allow processing to continue as normal.

 
 
 
 
 "
84,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscriptions,86,"In order to promote widespread compatibility, cross version extensions SHOULD NOT be used [clients should not put into Subscriptions they create] on R4 subscriptions to describe any elements also described by this guide",SHOULD NOT,Client,,,,Yes,,Yes,,components,subscriptions,,2.2.2,Subscription Creation,,,,"During validation of subscription requests, check that there are no cross-version extensions (see https://hl7.org/fhir/r5/versions.html#extensions) present (e.g., http://hl7.org/fhir/5.0/StructureDefinition/extension-Subscription.content instead of the defined content extension on R4 Subscription.payload). NOTE that Inferno will not recognize or respond to these extensions.",TESTER-DIRECTED: Subscriptions that Inferno uses are provided by the tester and verified against the relevant requirements. Tester can decide within those requirements whether to include this element on a particular Subscription instance.,,,,,,,"Subscriptions
The Subscription resource is used to request notifications for a specific client about a specific topic. Conceptually, a subscription is a concrete request for a single client to receive notifications per a single topic.The SubscriptionSubscription resource is used to request notifications for a specific client about a specific topic. Conceptually, a subscription is a concrete request for a single client to receive notifications per a single topic.
For example, a subscription may ask for notifications based on an âEncounter in-progressâ topic, such as the one briefly described as an example in Subscription Topics.  The subscription requires a link to the canonical URL of the topic, such as http://server.example.org/fhir/subscriptiontopics/encounter-in-progress, information about the channel, such as requesting notifications via rest-hook to the endpoint at http://client.example.org/notification-endpoint/abc), and payload configuration, such as requesting that bundles are encoded as application/fhir+json and include only identifiers (id-only).  Additionally, a subscription sets the filters which are applied to determine when notifications should be sent, such as indicating that only notifications for Patient/123 should be sent.  More details about filters can be found in the Subscription Filters section.For example, a subscription may ask for notifications based on an âEncounter in-progressâ topic, such as the one briefly described as an example in Subscription TopicsSubscription Topics.  The subscription requires a link to the canonical URL of the topic, such as http://server.example.org/fhir/subscriptiontopics/encounter-in-progresshttp://server.example.org/fhir/subscriptiontopics/encounter-in-progress, information about the channel, such as requesting notifications via rest-hookrest-hook to the endpoint at http://client.example.org/notification-endpoint/abchttp://client.example.org/notification-endpoint/abc), and payload configuration, such as requesting that bundles are encoded as application/fhir+jsonapplication/fhir+json and include only identifiers (id-onlyid-only).  Additionally, a subscription sets the filters which are applied to determine when notifications should be sent, such as indicating that only notifications for Patient/123Patient/123 should be sent.  More details about filters can be found in the Subscription FiltersSubscription Filters section.
In order to support topic-based subscriptions in R4, this guide defines several extensions for use on the R4 Subscription resource.  A list of extensions defined by this guide can be found on the Artifacts page. Note that the future FHIR R5 publication may define capabilities included in this specification as cross-version extensions. Since the FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements also described by this guideIn order to support topic-based subscriptions in R4, this guide defines several extensions for use on the R4 SubscriptionR4 Subscription resource.  A list of extensions defined by this guide can be found on the ArtifactsArtifacts page. Note that the future FHIR R5 publication may define capabilities included in this specification as cross-version extensions. Since the FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements also described by this guide
In order to link a Subscription to a SubscriptionTopic and prevent any confusion between the R4 query-based and topic-based implementations, the link to a SubscriptionTopic is specified in the Subscription.criteria field.  For more details, please see the Subscription Profile in this guide.In order to link a SubscriptionSubscription to a SubscriptionTopicSubscriptionTopic and prevent any confusion between the R4 query-based and topic-based implementations, the link to a SubscriptionTopicSubscriptionTopic is specified in the Subscription.criteriaSubscription.criteria field.  For more details, please see the Subscription ProfileSubscription Profile in this guide.
Subscription Filters"
85,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscriptions,87,"In order to promote widespread compatibility, cross version extensions SHOULD NOT be used [servers should ?? Subscriptions that include them] on R4 subscriptions to describe any elements also described by this guide",DEPRECATED,,,,,,,,,components,subscriptions,,,,,,,,,,,,,no longer interpreted as a server requirement,,"Subscriptions
The Subscription resource is used to request notifications for a specific client about a specific topic. Conceptually, a subscription is a concrete request for a single client to receive notifications per a single topic.The SubscriptionSubscription resource is used to request notifications for a specific client about a specific topic. Conceptually, a subscription is a concrete request for a single client to receive notifications per a single topic.
For example, a subscription may ask for notifications based on an âEncounter in-progressâ topic, such as the one briefly described as an example in Subscription Topics.  The subscription requires a link to the canonical URL of the topic, such as http://server.example.org/fhir/subscriptiontopics/encounter-in-progress, information about the channel, such as requesting notifications via rest-hook to the endpoint at http://client.example.org/notification-endpoint/abc), and payload configuration, such as requesting that bundles are encoded as application/fhir+json and include only identifiers (id-only).  Additionally, a subscription sets the filters which are applied to determine when notifications should be sent, such as indicating that only notifications for Patient/123 should be sent.  More details about filters can be found in the Subscription Filters section.For example, a subscription may ask for notifications based on an âEncounter in-progressâ topic, such as the one briefly described as an example in Subscription TopicsSubscription Topics.  The subscription requires a link to the canonical URL of the topic, such as http://server.example.org/fhir/subscriptiontopics/encounter-in-progresshttp://server.example.org/fhir/subscriptiontopics/encounter-in-progress, information about the channel, such as requesting notifications via rest-hookrest-hook to the endpoint at http://client.example.org/notification-endpoint/abchttp://client.example.org/notification-endpoint/abc), and payload configuration, such as requesting that bundles are encoded as application/fhir+jsonapplication/fhir+json and include only identifiers (id-onlyid-only).  Additionally, a subscription sets the filters which are applied to determine when notifications should be sent, such as indicating that only notifications for Patient/123Patient/123 should be sent.  More details about filters can be found in the Subscription FiltersSubscription Filters section.
In order to support topic-based subscriptions in R4, this guide defines several extensions for use on the R4 Subscription resource.  A list of extensions defined by this guide can be found on the Artifacts page. Note that the future FHIR R5 publication may define capabilities included in this specification as cross-version extensions. Since the FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements also described by this guideIn order to support topic-based subscriptions in R4, this guide defines several extensions for use on the R4 SubscriptionR4 Subscription resource.  A list of extensions defined by this guide can be found on the ArtifactsArtifacts page. Note that the future FHIR R5 publication may define capabilities included in this specification as cross-version extensions. Since the FHIR R5 is currently under development, there are no guarantees these extensions will meet the requirements of this guide. In order to promote widespread compatibility, cross version extensions SHOULD NOT be used on R4 subscriptions to describe any elements also described by this guide
In order to link a Subscription to a SubscriptionTopic and prevent any confusion between the R4 query-based and topic-based implementations, the link to a SubscriptionTopic is specified in the Subscription.criteria field.  For more details, please see the Subscription Profile in this guide.In order to link a SubscriptionSubscription to a SubscriptionTopicSubscriptionTopic and prevent any confusion between the R4 query-based and topic-based implementations, the link to a SubscriptionTopicSubscriptionTopic is specified in the Subscription.criteriaSubscription.criteria field.  For more details, please see the Subscription ProfileSubscription Profile in this guide.
Subscription Filters"
86,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscriptions-and-fhir-versions,88,"Note that subscription notifications, by default, are made using the same FHIR version as the server. The Subscription.channel.payload element can be used [by clients] to specify a different FHIR version, using syntax and values defined by the MIME Type Parameter.",MAY,Client,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements. Additionally, Inferno won't be able to accept non-R4 subscriptions.",components,subscriptions-and-fhir-versions,,2.2.2.2,Subscription Creation,,,,,NOT SIMULATED: Inferno only supports FHIR R4 at this time.,,,,,,,"Subscriptions and FHIR Versions
Note that subscription notifications, by default, are made using the same FHIR version as the server.  The Subscription.channel.payload element can be used to specify a different FHIR version, using syntax and values defined by the MIME Type Parameter.  Servers SHALL look for this parameter during subscription negotiation and SHALL not accept requests for notification FHIR versions it cannot support (servers MAY reject or coerce, according to their policies).Note that subscription notifications, by default, are made using the same FHIR version as the server.  The Subscription.channel.payloadSubscription.channel.payload element can be used to specify a different FHIR version, using syntax and values defined by the MIME Type ParameterMIME Type Parameter.  Servers SHALL look for this parameter during subscription negotiation and SHALL not accept requests for notification FHIR versions it cannot support (servers MAY reject or coerce, according to their policies).
For example, a request for notifications encoded as application/fhir+json; fhirVersion=4.3 explicitly asks for notifications conforming to the FHIR R4B notification format, while a request for application/fhir+json; fhirVersion=4.0 explicitly asks for notifications conformant to FHIR R4.  This mechanism allows for more flexibility during upgrades, ensuring that servers and clients can continue to operate across version changes.For example, a request for notifications encoded as application/fhir+json; fhirVersion=4.3application/fhir+json; fhirVersion=4.3 explicitly asks for notifications conforming to the FHIR R4B notification format, while a request for application/fhir+json; fhirVersion=4.0application/fhir+json; fhirVersion=4.0 explicitly asks for notifications conformant to FHIR R4.  This mechanism allows for more flexibility during upgrades, ensuring that servers and clients can continue to operate across version changes.
More information about the differences in notifications can be found on the Notifications page.More information about the differences in notifications can be found on the NotificationsNotifications page.
Accepting Subscription Requests"
87,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscriptions-and-fhir-versions,89,Servers SHALL look for this [Subscription.channel.payload element] parameter during subscription negotiation,DEPRECATED,,,,,,,,,,,,,,,,,,,,,,,added to Requirement 90,,"Subscriptions and FHIR Versions
Note that subscription notifications, by default, are made using the same FHIR version as the server.  The Subscription.channel.payload element can be used to specify a different FHIR version, using syntax and values defined by the MIME Type Parameter.  Servers SHALL look for this parameter during subscription negotiation and SHALL not accept requests for notification FHIR versions it cannot support (servers MAY reject or coerce, according to their policies).Note that subscription notifications, by default, are made using the same FHIR version as the server.  The Subscription.channel.payloadSubscription.channel.payload element can be used to specify a different FHIR version, using syntax and values defined by the MIME Type ParameterMIME Type Parameter.  Servers SHALL look for this parameter during subscription negotiation and SHALL not accept requests for notification FHIR versions it cannot support (servers MAY reject or coerce, according to their policies).
For example, a request for notifications encoded as application/fhir+json; fhirVersion=4.3 explicitly asks for notifications conforming to the FHIR R4B notification format, while a request for application/fhir+json; fhirVersion=4.0 explicitly asks for notifications conformant to FHIR R4.  This mechanism allows for more flexibility during upgrades, ensuring that servers and clients can continue to operate across version changes.For example, a request for notifications encoded as application/fhir+json; fhirVersion=4.3application/fhir+json; fhirVersion=4.3 explicitly asks for notifications conforming to the FHIR R4B notification format, while a request for application/fhir+json; fhirVersion=4.0application/fhir+json; fhirVersion=4.0 explicitly asks for notifications conformant to FHIR R4.  This mechanism allows for more flexibility during upgrades, ensuring that servers and clients can continue to operate across version changes.
More information about the differences in notifications can be found on the Notifications page.More information about the differences in notifications can be found on the NotificationsNotifications page.
Accepting Subscription Requests"
88,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscriptions-and-fhir-versions,90,"Servers SHALL look for this [Subscription.channel.payload element] parameter during subscription negotiation and SHALL not accept requests for notification FHIR versions it cannot support (servers MAY reject or coerce, according to their policies)",SHALL,Server,,,,Yes,,Yes,"NOTE: Inferno doesn't currently support versions other than R4 so wouldn't actually be able to receive notifications in other versions, but that isn't necessary to verify the requirement.",components,subscriptions-and-fhir-versions,,2.2.2.2,Subscription Creation,,,,,SIMULATED: Inferno will reject Subscriptions that specify a FHIR version other than R4,,,,,,,"Subscriptions and FHIR Versions
Note that subscription notifications, by default, are made using the same FHIR version as the server.  The Subscription.channel.payload element can be used to specify a different FHIR version, using syntax and values defined by the MIME Type Parameter.  Servers SHALL look for this parameter during subscription negotiation and SHALL not accept requests for notification FHIR versions it cannot support (servers MAY reject or coerce, according to their policies).Note that subscription notifications, by default, are made using the same FHIR version as the server.  The Subscription.channel.payloadSubscription.channel.payload element can be used to specify a different FHIR version, using syntax and values defined by the MIME Type ParameterMIME Type Parameter.  Servers SHALL look for this parameter during subscription negotiation and SHALL not accept requests for notification FHIR versions it cannot support (servers MAY reject or coerce, according to their policies).
For example, a request for notifications encoded as application/fhir+json; fhirVersion=4.3 explicitly asks for notifications conforming to the FHIR R4B notification format, while a request for application/fhir+json; fhirVersion=4.0 explicitly asks for notifications conformant to FHIR R4.  This mechanism allows for more flexibility during upgrades, ensuring that servers and clients can continue to operate across version changes.For example, a request for notifications encoded as application/fhir+json; fhirVersion=4.3application/fhir+json; fhirVersion=4.3 explicitly asks for notifications conforming to the FHIR R4B notification format, while a request for application/fhir+json; fhirVersion=4.0application/fhir+json; fhirVersion=4.0 explicitly asks for notifications conformant to FHIR R4.  This mechanism allows for more flexibility during upgrades, ensuring that servers and clients can continue to operate across version changes.
More information about the differences in notifications can be found on the Notifications page.More information about the differences in notifications can be found on the NotificationsNotifications page.
Accepting Subscription Requests"
89,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/components.html#subscriptions-and-fhir-versions,91,"servers MAY reject or coerce [the FHIR version requested via the Subscription.channel.payload element], according to their policies",DEPRECATED,,,,,,,,,,,,,,,,,,,,,,,added to Requirement 90,,"Subscriptions and FHIR Versions
Note that subscription notifications, by default, are made using the same FHIR version as the server.  The Subscription.channel.payload element can be used to specify a different FHIR version, using syntax and values defined by the MIME Type Parameter.  Servers SHALL look for this parameter during subscription negotiation and SHALL not accept requests for notification FHIR versions it cannot support (servers MAY reject or coerce, according to their policies).Note that subscription notifications, by default, are made using the same FHIR version as the server.  The Subscription.channel.payloadSubscription.channel.payload element can be used to specify a different FHIR version, using syntax and values defined by the MIME Type ParameterMIME Type Parameter.  Servers SHALL look for this parameter during subscription negotiation and SHALL not accept requests for notification FHIR versions it cannot support (servers MAY reject or coerce, according to their policies).
For example, a request for notifications encoded as application/fhir+json; fhirVersion=4.3 explicitly asks for notifications conforming to the FHIR R4B notification format, while a request for application/fhir+json; fhirVersion=4.0 explicitly asks for notifications conformant to FHIR R4.  This mechanism allows for more flexibility during upgrades, ensuring that servers and clients can continue to operate across version changes.For example, a request for notifications encoded as application/fhir+json; fhirVersion=4.3application/fhir+json; fhirVersion=4.3 explicitly asks for notifications conforming to the FHIR R4B notification format, while a request for application/fhir+json; fhirVersion=4.0application/fhir+json; fhirVersion=4.0 explicitly asks for notifications conformant to FHIR R4.  This mechanism allows for more flexibility during upgrades, ensuring that servers and clients can continue to operate across version changes.
More information about the differences in notifications can be found on the Notifications page.More information about the differences in notifications can be found on the NotificationsNotifications page.
Accepting Subscription Requests"
90,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/channels.html#rest-hook-1,92,Server may send notifications of type heartbeat at any time.,MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",channels,rest-hook-1,,2.4.0.1,Heartbeat - Rest Hook,,,,,NOT SIMULATED: Inferno will send heartbeat notifications as directed by requirements 93 and 94.,,,,,,IG AUTHORS: what is the intention of this requirement and how does it square with requirements 93 and 94 which proscribe when servers send heartbeat notifications?,"REST-Hook
To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hookrest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.
To convey an event notification, the server POSTs a Bundle to the clientâs nominated endpoint URL per the format requests in the Subscription:To convey an event notification, the server POSTs a BundleBundle to the clientâs nominated endpoint URL per the format requests in the Subscription:

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).The content-typecontent-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payloadSubscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.Each Subscription.channel.headerSubscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.The bundle SHALL comply with the Backported R5 Notification Bundle ProfileBackported R5 Notification Bundle Profile.

When a Subscription is created for a REST Hook channel type, the server SHALL set initial status to requested, pending verification of the nominated endpoint URL. After a successful handshake notification has been sent and accepted, the server SHALL update the status to active. Any errors in the initial handshake SHALL result in the status being changed to error.When a SubscriptionSubscription is created for a REST Hook channel type, the server SHALL set initial status to requestedrequested, pending verification of the nominated endpoint URL. After a successful handshakehandshake notification has been sent and accepted, the server SHALL update the status to activeactive. Any errors in the initial handshakehandshake SHALL result in the status being changed to errorerror.
An example workflow for establishing a rest-hook subscription is shown below.An example workflow for establishing a rest-hookrest-hook subscription is shown below.

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OK
Diagram showing a possible workflow for rest-hook subscriptions

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerFHIR ServerREST APIREST APIFHIR ServerFHIR ServerREST APIREST APIClientClientClientClientClient EndpointClient Endpoint(HTTP/S)(HTTP/S)Client EndpointClient Endpoint(HTTP/S)(HTTP/S)Subscription NegotiationSubscription Negotiation11Create SubscriptionCreate Subscriptionchannel.type:Â rest-hookchannel.type:Â rest-hook22SuccessSuccessSubscription.status:Â requestedSubscription.status:Â requested33HTTP POST - HandshakeHTTP POST - HandshakeBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â handshakeSubscriptionStatus.type:Â handshake44HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OKServer updates Subscription:Server updates Subscription:Subscription.status:Â activeSubscription.status:Â activeREST Subscription ProcessingREST Subscription Processing[Server sends heartbeat][Server sends heartbeat]55HTTP POST - HeartbeatHTTP POST - HeartbeatBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â heartbeatSubscriptionStatus.type:Â heartbeat66HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK[Server sends event-notification][Server sends event-notification]77HTTP POST - NotificationHTTP POST - NotificationBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â event-notificationSubscriptionStatus.type:Â event-notification88HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK
Diagram showing a possible workflow for rest-hook subscriptionsDiagram showing a possible workflow for rest-hook subscriptions


Client creates a Subscription with the channel.type set to rest-hook.
Server responds with a success code and creates the subscription with a state of requested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).
Server may send notifications of type heartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).
Server may send notifications of type event-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).

Client creates a Subscription with the channel.type set to rest-hook.Client creates a SubscriptionSubscription with the channel.typechannel.type set to rest-hookrest-hook.
Server responds with a success code and creates the subscription with a state of requested.Server responds with a success code and creates the subscription with a state of requestedrequested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.Server performs an HTTP POST to the requested endpoint with a handshakehandshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200200).
Server may send notifications of type heartbeat at any time.Server may send notifications of type heartbeatheartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).
Server may send notifications of type event-notification at any time.Server may send notifications of type event-notificationevent-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).

Security Notes"
91,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-definitions.html#root,93,"Subscription.channel.extension:heartbeatPeriod: If present, a 'hearbeat' notification (keepalive) is sent via this channel with an the interval period equal to this elements integer value in seconds.  ",SHALL,Server,,,,Yes,,Yes,,StructureDefinition-backport-subscription-definitions,root,,5.10.5,Heartbeat,,,,"Create a Subscription with a heartbeat period set for X seconds, wait for notifications to come in for Y seconds and validate that X/Y heartbeat notifications were received (probably some fudge factor)","SIMULATED: If a client submits a subscription with a heartbeat period, Inferno may update it to be a smaller period to fit within an Subscription client test timeframe. During the interaction period, Inferno will send a heartbeat at regular intervals as defined by the period.",Heartbeat,,,,,TEST DESIGN: How many would we want to receive? At least 2?,Resource Profile: BackportSubscription - Detailed Descriptions
92,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-definitions.html#root,94,"Subscription.channel.extension:heartbeatPeriod: If not present, a heartbeat notification is not sent.",SHALL,Server,,,,Yes,,Yes,,StructureDefinition-backport-subscription-definitions,root,,5.10.5,Heartbeat,,,,Create a Subscription without a heartbeat period and wait for notifications to come in for X seconds. Validate that some notifications but no heartbeats were received during that period.,"SIMULATED: If a client submits a subcription without a heartbeat period, no heartbeat notifications will be sent.",EMPTY,,,,,TEST DESIGN: how long would we need to wait to verify that heartbeats are never sent? What is a typical value for heartbeat period?,Resource Profile: BackportSubscription - Detailed Descriptions
93,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-definitions.html#root,95,"Subscription.criteria.extension:filterCriteria: When multiple filters are applied, evaluates to true if all the conditions are met; otherwise it returns false. (i.e., logical AND). ",SHALL,Server,,,,Yes,,Yes,"Formal definitions are not available in R4, but testers have access to filter details and can verify filter application in the context of a specific subscription.",StructureDefinition-backport-subscription-definitions,root,,5.10.5,Notification Trigger,,,,,TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. Inferno will NOT check that the provided bundles meet the filter criteria.,,,,,,,Resource Profile: BackportSubscription - Detailed Descriptions
94,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-definitions.html#root,96,Subscription.criteria.extension:filterCriteria: Keys can be either search parameters appropriate to the filtering resource or keys defined within the subscription topic.,SHALL,Client,,,,Yes,,Yes,"Formal definitions are not available in R4, but testers can attest that the search parameters sent are appropriate",StructureDefinition-backport-subscription-definitions,root,,5.10.5,Notification Trigger,,,,,TESTER-DIRECTED: Subscriptions that Inferno uses are provided by the tester and verified against the relevant requirements. Tester can decide within those requirements whether to include this element on a particular Subscription instance.,,,,,,,Resource Profile: BackportSubscription - Detailed Descriptions
95,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-definitions.html#root,97,"Subscription.channel.extension:timeout: If present, the maximum amount of time a server will allow before failing a notification attempt. ",SHALL,Server,,,,Yes,,Yes,,StructureDefinition-backport-subscription-definitions,root,,5.10.5,Error Handling,,,,"Create a Subscription with an indicated timeout and a URL that will respond only after a time longer than the timeout for an event notification only. Wait for a notification on that subscription and after it is supposed to have timed out, make a $status request and validate that the status is error due to the timeout.","SIMULATED: Inferno will respond within the timeframe, unless it is experiencing unmanageable load.",EMPTY,,,,,"IG AUTHORS: How should this be used? Does the client request this timeout, or is the server adding this to signal to the client that they expect a response within a certain time-frame?",Resource Profile: BackportSubscription - Detailed Descriptions
96,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-definitions.html#root,98,"Subscription.channel.extension:maxCount: If present, the maximum number of triggering resources that will be included in a notification bundle (e.g., a server will not include more than this number of trigger resources in a single notification). Note that this is not a strict limit on the number of entries in a bundle, as dependent resources can be included.",SHALL,Server,,,,Yes,,Yes,Need to include attestation that multiple triggers have been hit and that a set of event notifications larger than the maxCount have been triggered.,StructureDefinition-backport-subscription-definitions,root,,5.10.5,Notification Content,,,,"Submit a subscription with maxCount specified as 1. Ask for an attestation that at least two tiggers have been hit together, then verify that instead of a single notification with both triggers that at least two notifications each with 1 event are received.",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Add additional server validation to tester-provided notifications,,,,,,Resource Profile: BackportSubscription - Detailed Descriptions
97,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-status-r4-definitions.html,99,Parameters.parameter:topic.value[x]: This value SHOULD NOT be present when using empty payloads ,SHOULD NOT,Server,,,,Yes,,Yes,,,,,5.13.5,Notification Content - empty,,,,Create a warning if Parameters.parameter:topic.value[x] is included for notifications with the empty content type.,TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Add additional server validation to tester-provided notifications,,,,,,Resource Profile: BackportSubscriptionStatusR4 - Detailed Descriptions
98,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-status-r4-definitions.html,100,Parameters.parameter:topic.value[x]: This value … MAY be present when using id-only payloads,MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",,,,5.13.5,Notification Content - id-only,,,,,TESTER-DIRECTED: Notifications that Inferno delivers are provided by the tester and verified against the relevant requirements. Tester can decide within those requirements whether this option is used or not.,,,,,,,Resource Profile: BackportSubscriptionStatusR4 - Detailed Descriptions
99,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-status-r4-definitions.html,101,Parameters.parameter:topic.value[x]: This value … SHOULD be present when using full-resource payloads.,SHOULD,Server,,,,Yes,,Yes,,,,,5.13.5,Notification Content - full-resource,,,,Create a warning if Parameters.parameter:topic.value[x] is not included for notifications with the full-resource content type.,TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Add additional server validation to tester-provided notifications,,,,,,Resource Profile: BackportSubscriptionStatusR4 - Detailed Descriptions
100,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-status-r4-definitions.html,102,Parameters.parameter:eventsSinceSubscriptionStart.value[x]: The total number of actual events which have been generated since the Subscription was created (inclusive of this notification) - regardless of how many have been successfully communicated. This number is NOT incremented for handshake and heartbeat notifications.,SHALL,Server,,,,Yes,,Yes,,,,,5.13.5,Notification Content,,,,"If populated on a subcription status instance with a notification entry in a notification request, check that the number is in-line with the event number of at least one entry.",TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Add additional server validation to tester-provided notifications,,,,"I suspect we need to be careful here - may want to allow some fuzziness in case of concurrent events. If the $events operation is supported, we might be able to do better.",,Resource Profile: BackportSubscriptionStatusR4 - Detailed Descriptions
101,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-status-r4-definitions.html,103,Parameters.parameter:notificationEvent.part:eventNumber.value[x]: The sequential number of this event in this subscription context.,SHALL,Server,,,,Yes,,Yes,,,,,5.13.5,Notification Content,,,,Verify that the first event is 1 (or a low #) and that subsequent ones increase (mostly) linearly.,TESTER-DIRECTED: Inferno will rely on testers to provide appropriate notifications because generating notification that have the expected outcome within a client system is not generally possible for a testing tool like Inferno. These Bundles will be validated using the logic descriped in the Test Plan.,Add additional server validation to tester-provided notifications,,,,"I suspect we need to be careful here - may want to allow some fuzziness in case of concurrent events. If the $events operation is supported, we might be able to do better.",,Resource Profile: BackportSubscriptionStatusR4 - Detailed Descriptions
102,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-status-r4-definitions.html,104,Parameters.parameter:notificationEvent.part:eventFocus.value[x]: MAY contain a reference to a non-FHIR object.,MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",,,,5.13.5,Notification Content,,,,,TESTER-DIRECTED: Notifications that Inferno delivers are provided by the tester and verified against the relevant requirements. Tester can decide within those requirements whether this option is used or not.,,,,,,,Resource Profile: BackportSubscriptionStatusR4 - Detailed Descriptions
103,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-status-r4-definitions.html,105,Parameters.parameter:notificationEvent.part:eventAdditionalContext.value[x]: MAY refer to non-FHIR objects.,MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",,,,5.13.5,Notification Content,,,,,TESTER-DIRECTED: Notifications that Inferno delivers are provided by the tester and verified against the relevant requirements. Tester can decide within those requirements whether this option is used or not.,,,,,,,Resource Profile: BackportSubscriptionStatusR4 - Detailed Descriptions
104,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/OperationDefinition-backport-subscription-status.html,106,"id Parameter: At the Instance level, this parameter is ignored.",SHALL,Server,,,,Yes,,Yes,,,,,5.5.1,Status Operation,,,,Invoke the $status operation on an instance and provide an id parameter with a different instance id. Validate that onlly the instance the operation is invoked on is returned.,SIMULATED: Inferno will ignore the id parameter when $status is invoked at the instance level and will not error if it is populated,Status API,,,,,,"OperationDefinition: Subscription Status Operation

  "
105,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/OperationDefinition-backport-subscription-status.html,107,"id Parameter: At the Resource level … multiple  values are joined via OR (e.g., ""id1"" OR ""id2"").",SHALL,Server,,,,Yes,,Yes,,,,,5.5.1,Status Operation,,,,Invoke the $status operation at the resource level and include two Subscription ids. Verify that both are returned in the response.,SIMULATED: Inferno will filter using the provided id value.,Status API,,,,,,"OperationDefinition: Subscription Status Operation

  "
106,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/OperationDefinition-backport-subscription-status.html,108,"id Parameter: At the Resource level … In the absence of any specified ids, the server returns the status for all Subscriptions available to the caller.",SHALL,Server,,,,Yes,,Yes,,,,,5.5.1,Status Operation,,,,Invoke the $status operation at the resource level without any specified ids. Verify that all Subscriptions associated with the session (via tags) are included.,SIMULATED: Inferno will start by only supporting one subscription at a time.,Status API,,,,,,"OperationDefinition: Subscription Status Operation

  "
107,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/OperationDefinition-backport-subscription-status.html,109,"status Parameter: At the Instance level, this parameter is ignored.",SHALL,Server,,,,Yes,,Yes,,,,,5.5.1,Status Operation,,,,Invoke the $status operation on an instance and provide a status parameter value different from the current status of that Subscription. Verify that the status of the subscription is still returned.,SIMULATED: Inferno will ignore the status parameter when $status is invoked at the instance level and will not error if it is populated,Status API,,,,,,"OperationDefinition: Subscription Status Operation

  "
108,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/OperationDefinition-backport-subscription-status.html,110,"status Parameter: At the resource level, … Multiple values are joined via OR (e.g., ""error"" OR ""off"").",SHALL,Server,,,,Yes,,Yes,,,,,5.5.1,Status Operation,,,,"Invoke the $status operation at the resource level with multiple status value, including at least one that a Subscription is known to have. Verify that the returned subscriptions all have one of the identified values and that the known Subscription is returned.",SIMULATED: Inferno will filter using the provided status value.,Status API,,,,,,"OperationDefinition: Subscription Status Operation

  "
109,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/OperationDefinition-backport-subscription-status.html,111,"status Parameter: At the resource level, … In the absence of any specified status values, the server does not filter contents based on the status.",SHALL,Server,,,,Yes,,Yes,,,,,5.5.1,Status Operation,,,,Invoke the $status operation at the resource level without any status values and verify that errored Subscriptions are returned.,SIMULATED: Inferno will not filter on status when none is provided.,Status API,,,,,,"OperationDefinition: Subscription Status Operation

  "
110,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/OperationDefinition-backport-subscription-status.html,112,"return Parameter: The operation returns a bundle containing one or more subscription status resources, one per Subscription being queried. The Bundle type is ""searchset"".",SHALL,Server,,,,Yes,,Yes,,,,,5.5.1,Status Operation,,,,Check the response of a status operation verifying that it is a search set bundle and that each instance returned conforms to the Subscription status profile using the HL7 validator.,SIMULATED: Inferno will build a SubscriptionStatus parameter instance for the Subscription currently under test.,Status API,,,,,,"OperationDefinition: Subscription Status Operation

  "
111,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/channels.html#rest-hook-1,113,Server may send notifications of type event-notification at any time.,MAY,Server,,,,Yes,,Yes,,channels,rest-hook-1,,2.4.0.1,Notification Delivery - Rest Hook,,,,Inferno will listen for event notifications until the tester indicates the ones to evaluate have been sent.,SIMULATED: Inferno will control the timing of the event notification sent after the subscription creation.,For Basic Workflow,Implemented,,,,,"REST-Hook
To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.To receive notifications via HTTP/S POST, a client should request a subscription with the channel type of rest-hookrest-hook and set the endpoint to the appropriate client URL. Note that this URL must be accessible by the hosting server.
To convey an event notification, the server POSTs a Bundle to the clientâs nominated endpoint URL per the format requests in the Subscription:To convey an event notification, the server POSTs a BundleBundle to the clientâs nominated endpoint URL per the format requests in the Subscription:

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.

The content-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payload).The content-typecontent-type of the POST SHALL match the MIME type on the Subscription (Subscription.channel.payloadSubscription.channel.payload).
Each Subscription.channel.header value SHALL be conveyed as an HTTP request header.Each Subscription.channel.headerSubscription.channel.header value SHALL be conveyed as an HTTP request header.
The bundle SHALL comply with the Backported R5 Notification Bundle Profile.The bundle SHALL comply with the Backported R5 Notification Bundle ProfileBackported R5 Notification Bundle Profile.

When a Subscription is created for a REST Hook channel type, the server SHALL set initial status to requested, pending verification of the nominated endpoint URL. After a successful handshake notification has been sent and accepted, the server SHALL update the status to active. Any errors in the initial handshake SHALL result in the status being changed to error.When a SubscriptionSubscription is created for a REST Hook channel type, the server SHALL set initial status to requestedrequested, pending verification of the nominated endpoint URL. After a successful handshakehandshake notification has been sent and accepted, the server SHALL update the status to activeactive. Any errors in the initial handshakehandshake SHALL result in the status being changed to errorerror.
An example workflow for establishing a rest-hook subscription is shown below.An example workflow for establishing a rest-hookrest-hook subscription is shown below.

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OK
Diagram showing a possible workflow for rest-hook subscriptions

FHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerREST APIFHIR ServerREST APIClientClientClient Endpoint(HTTP/S)Client Endpoint(HTTP/S)Subscription Negotiation1Create Subscriptionchannel.type:Â rest-hook2SuccessSubscription.status:Â requested3HTTP POST - HandshakeBundle:Bundle.type:Â historySubscriptionStatus.type:Â handshake4HTTP Success, e.g.:200:Â OKServer updates Subscription:Subscription.status:Â activeREST Subscription Processing[Server sends heartbeat]5HTTP POST - HeartbeatBundle:Bundle.type:Â historySubscriptionStatus.type:Â heartbeat6HTTP Success, e.g.:200:Â OK[Server sends event-notification]7HTTP POST - NotificationBundle:Bundle.type:Â historySubscriptionStatus.type:Â event-notification8HTTP Success, e.g.:200:Â OKFHIR ServerFHIR ServerREST APIREST APIFHIR ServerFHIR ServerREST APIREST APIClientClientClientClientClient EndpointClient Endpoint(HTTP/S)(HTTP/S)Client EndpointClient Endpoint(HTTP/S)(HTTP/S)Subscription NegotiationSubscription Negotiation11Create SubscriptionCreate Subscriptionchannel.type:Â rest-hookchannel.type:Â rest-hook22SuccessSuccessSubscription.status:Â requestedSubscription.status:Â requested33HTTP POST - HandshakeHTTP POST - HandshakeBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â handshakeSubscriptionStatus.type:Â handshake44HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OKServer updates Subscription:Server updates Subscription:Subscription.status:Â activeSubscription.status:Â activeREST Subscription ProcessingREST Subscription Processing[Server sends heartbeat][Server sends heartbeat]55HTTP POST - HeartbeatHTTP POST - HeartbeatBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â heartbeatSubscriptionStatus.type:Â heartbeat66HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK[Server sends event-notification][Server sends event-notification]77HTTP POST - NotificationHTTP POST - NotificationBundle:Bundle:Bundle.type:Â historyBundle.type:Â historySubscriptionStatus.type:Â event-notificationSubscriptionStatus.type:Â event-notification88HTTP Success, e.g.:HTTP Success, e.g.:200:Â OK200:Â OK
Diagram showing a possible workflow for rest-hook subscriptionsDiagram showing a possible workflow for rest-hook subscriptions


Client creates a Subscription with the channel.type set to rest-hook.
Server responds with a success code and creates the subscription with a state of requested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).
Server may send notifications of type heartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).
Server may send notifications of type event-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).

Client creates a Subscription with the channel.type set to rest-hook.Client creates a SubscriptionSubscription with the channel.typechannel.type set to rest-hookrest-hook.
Server responds with a success code and creates the subscription with a state of requested.Server responds with a success code and creates the subscription with a state of requestedrequested.
Server performs an HTTP POST to the requested endpoint with a handshake notification.Server performs an HTTP POST to the requested endpoint with a handshakehandshake notification.
Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200200).
Server may send notifications of type heartbeat at any time.Server may send notifications of type heartbeatheartbeat at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).
Server may send notifications of type event-notification at any time.Server may send notifications of type event-notificationevent-notification at any time.
Endpoints should respond with appropriate HTTP status codes (e.g., 200).Endpoints should respond with appropriate HTTP status codes (e.g., 200200).

Security Notes"
112,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html#subscription,114,[Subscription Resource] Conformance Expectation: SHALL,SHALL,Server,,,,Yes,,Yes,,CapabilityStatement-backport-subscription-server-r4,subscription,,5.2.1.1.2,CapabilityStatement,,,,Verify that the Subscription resource is present in the CapabilityStatement.,SIMULATED: Inferno will publish a static capability statement indicating support for the Subscription resource.,CapabilityStatement,,,,,,"SubscriptionConformance Expectation: SHALLConformance Expectation: SHALLSHALLSupported Profiles:Supported Profiles:SHALL support: Backported R5 SubscriptionSHALL support: Backported R5 SubscriptionSHALLSHALL support: Backported R5 SubscriptionBackported R5 SubscriptionOperation Summary:Operation Summary:SHALL support the $status operationMAY support the $events operation , $get-ws-binding-token operationSHALL support the $status operationSHALLSHALL support the $status$status operationMAY support the $events operation , $get-ws-binding-token operationMAYMAY support the $events$events operation , $get-ws-binding-token$get-ws-binding-token operationFetch and Search Criteria:Fetch and Search Criteria:A Server SHALL be capable of returning a Subscription resource using: GET [base]/Subscription/[id]A Server SHOULD be capable of creating a Subscription resource using either: POST [base]/Subscription or PUT [base]/Subscription/[id]A Server SHOULD be capable of modifying a Subscription resource using either: PUT [base]/Subscription/[id] or PATCH [base]/Subscription/[id]A Server SHOULD be capable of deleting a Subscription resource using: DELETE [base]/Subscription/[id]A Server SHOULD be capable of searching for Subscription resources using: GET [base]/Subscription/?[parameters]A Server SHALL be capable of returning a Subscription resource using: GET [base]/Subscription/[id]A Server SHALLSHALL be capable of returning a Subscription resource using: GET [base]/Subscription/[id]GET [base]/Subscription/[id]A Server SHOULD be capable of creating a Subscription resource using either: POST [base]/Subscription or PUT [base]/Subscription/[id]A Server SHOULDSHOULD be capable of creating a Subscription resource using either: POST [base]/SubscriptionPOST [base]/Subscription or PUT [base]/Subscription/[id]PUT [base]/Subscription/[id]A Server SHOULD be capable of modifying a Subscription resource using either: PUT [base]/Subscription/[id] or PATCH [base]/Subscription/[id]A Server SHOULDSHOULD be capable of modifying a Subscription resource using either: PUT [base]/Subscription/[id]PUT [base]/Subscription/[id] or PATCH [base]/Subscription/[id]PATCH [base]/Subscription/[id]A Server SHOULD be capable of deleting a Subscription resource using: DELETE [base]/Subscription/[id]A Server SHOULDSHOULD be capable of deleting a Subscription resource using: DELETE [base]/Subscription/[id]DELETE [base]/Subscription/[id]A Server SHOULD be capable of searching for Subscription resources using: GET [base]/Subscription/?[parameters]A Server SHOULDSHOULD be capable of searching for Subscription resources using: GET [base]/Subscription/?[parameters]GET [base]/Subscription/?[parameters]Search Parameter Summary:Search Parameter Summary:ConformanceParameterTypeSHOULDurluriSHOULDstatustokenConformanceParameterTypeConformanceParameterTypeConformanceConformanceParameterParameterTypeTypeSHOULDurluriSHOULDstatustokenSHOULDurluriSHOULDSHOULDSHOULDurlurlurluriuriSHOULDstatustokenSHOULDSHOULDSHOULDstatusstatusstatustokentoken


 
 
 
 
 "
113,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/OperationDefinition-backport-subscription-events.html,115,"	
The [$events] operation returns a valid notification bundle, with the first entry being the subscription status information resource. The bundle type is ""history"".",SHALL,Server,,,,Yes,,Yes,,,,,5.3.1,Events Operation,,,,Verify that the bundle returned from the $events operation is a history bundle with the subscription status instance as the first entry. (use general Subscription notification validation rules),SIMULATED: Inferno will provide an $events operation that includes the tester-provided event notification body.,Events API,,,,,,"OperationDefinition: Subscription Events Operation

  "
114,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/OperationDefinition-backport-subscription-events.html,116,"[the content input indicates the] Requested content style of returned data. Codes from backport-content-value-set (e.g., empty, id-only, full-resource).",SHALL,Client,,,,Yes,,Yes,,,,,5.3.1,Events Operation,,,,"When testing that the client can invoke the $events operation, verify that the client provides a valid code for the content type.","SIMULATED: Inferno will make $events requests using the content type from the Subscription in question, which are restricted to these values.",,,,,,,"OperationDefinition: Subscription Events Operation

  "
115,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/OperationDefinition-backport-subscription-events.html,117,"[the content input indicates the]  Requested content style of returned data [from the $events operation]…. This is a hint to the server what a client would prefer, and MAY be ignored.",MAY,Server,,,,Yes,,No,"MAY requirement, support for which doesn't imply other requirements.",,,,5.3.1,Events Operation,,,,,"TESTER-DIRECTED: Inferno will return the notification provided by the tester for the Subscription regardless of what value is provided in this input argument, so the tester can determine whether the input is ignored or not.",,,,,,,"OperationDefinition: Subscription Events Operation

  "
116,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/OperationDefinition-backport-subscription-events.html,118,"[The eventsSinceNumber input indicates] The starting event number, inclusive of this event (lower bound).",SHALL,Server,,,,Yes,,Yes,,,,,5.3.1,Events Operation,,,,"Make an $events request with a lower bound indicated and verify that the lower bound # is included, but no lower.",SIMULATED: Inferno will filter using this logic,Events API,,,,,,"OperationDefinition: Subscription Events Operation

  "
117,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/OperationDefinition-backport-subscription-events.html,119,"[The eventsUntilNumber input indicates] The ending event number, inclusive of this event (upper bound).",SHALL,Server,,,,Yes,,Yes,,,,,5.3.1,Events Operation,,,,"Make an $events request with an upper bound indicated and verify that the upper bound # is included, but no higher.",SIMULATED: Inferno will filter using this logic,Events API,,,,,,"OperationDefinition: Subscription Events Operation

  "
118,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html#summary,120,"
[servers] SHOULD support [profile]: Backported R5 Subscription [NOTE: narrative says SHALL, resource says SHOULD, future versions correct the narrative to SHOULD]",SHOULD,Server,,,,Yes,,Yes,,CapabilityStatement-backport-subscription-server-r4,summary,,5.2.1.1.2,CapabilityStatement,,,,Verify that the Subscription profile is indicated under the Subscription resource. Warning / optional fail if not.,SIMULATED: Inferno will publish a static capability statement indicating support for the referenced profile.,CapabilityStatement,,,,,,"CapabilityStatement: R4 Topic-Based Subscription Server Capability Statement

  "
119,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html#summary,121,SHALL support the $status operation,SHALL,Server,,,,Yes,,Yes,,CapabilityStatement-backport-subscription-server-r4,summary,,5.2.1.1.2,CapabilityStatement,,,,Verify that the $status operation is listed under Subscription resource operations.,SIMULATED: Inferno will publish a static capability statement indicating support for the $status operation.,Status API,,,,actual status operation tested elsewhere,,"CapabilityStatement: R4 Topic-Based Subscription Server Capability Statement

  "
120,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html#summary,122,MAY support the $events operation,MAY,Server,,,,Yes,,Yes,,CapabilityStatement-backport-subscription-server-r4,summary,,5.2.1.1.2,CapabilityStatement,,,,Verify that the $events operation is listed under Subscription resource operations.,SIMULATED: Inferno will publish a static capability statement indicating support for the $events operation.,Events API,,,,actual events operation tested elsewhere,,"CapabilityStatement: R4 Topic-Based Subscription Server Capability Statement

  "
121,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html#summary,123,MAY support the $get-ws-binding-token operation,MAY,Server,,,,Yes,,No,Used for Websocket channels that Inferno does not currently support,CapabilityStatement-backport-subscription-server-r4,summary,,5.2.1.1.2,CapabilityStatement,,,,,NOT SIMULATED: Inferno will not include this operation in its CapabilityStatement as it doesn't support websocket Subscriptions at this time.,,,,,,,"CapabilityStatement: R4 Topic-Based Subscription Server Capability Statement

  "
122,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html#summary,124,A Server SHALL be capable of returning a Subscription resource using: GET [base]/Subscription/[id],SHALL,Server,,,,Yes,,Yes,,CapabilityStatement-backport-subscription-server-r4,summary,,5.2.1.1.2,CapabilityStatement,,,,Verify that the read interaction is listed under the Subscription resource.,SIMULATED: Inferno will publish a static capability statement indicating support for Subscription read.,Subscription API,,,,actual read tested in 134,,"CapabilityStatement: R4 Topic-Based Subscription Server Capability Statement

  "
123,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html#summary,125,A Server SHOULD be capable of creating a Subscription resource using either: POST [base]/Subscription or PUT [base]/Subscription/[id],SHOULD,Server,,,,Yes,,Yes,,CapabilityStatement-backport-subscription-server-r4,summary,,5.2.1.1.2,CapabilityStatement,,,,Verify that the Create interaction is listed under the Subscription resource,SIMULATED: Inferno will publish a static capability statement indicating support for Subscription create.,CapabilityStatement,,,,,IG AUTHORS: conflicts with requirement 133. Which is correct?,"CapabilityStatement: R4 Topic-Based Subscription Server Capability Statement

  "
124,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html#summary,126,A Server SHOULD be capable of modifying a Subscription resource using either: PUT [base]/Subscription/[id] or PATCH [base]/Subscription/[id],SHOULD,Server,,,,Yes,,Yes,,CapabilityStatement-backport-subscription-server-r4,summary,,5.2.1.1.2,CapabilityStatement,,,,Verify that the Update interaction is listed under the Subscription resource,SIMULATED: Inferno will publish a static capability statement indicating support for Subscription update.,Subscription API,,,,,,"CapabilityStatement: R4 Topic-Based Subscription Server Capability Statement

  "
125,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html#summary,127,A Server SHOULD be capable of deleting a Subscription resource using: DELETE [base]/Subscription/[id],SHOULD,Server,,,,Yes,,Yes,,CapabilityStatement-backport-subscription-server-r4,summary,,5.2.1.1.2,CapabilityStatement,,,,Verify that the Delete interaction is listed under the Subscription resource,SIMULATED: Inferno will publish a static capability statement indicating support for Subscription delete.,Subscription API,,,,,,"CapabilityStatement: R4 Topic-Based Subscription Server Capability Statement

  "
126,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html#summary,128,A Server [MAY] be capable of searching for Subscription resources using: GET [base]/Subscription/?[parameters],MAY,Server,,,,Yes,,Yes,Tested because there are requirements for search parameters if search is supported.,CapabilityStatement-backport-subscription-server-r4,summary,,5.2.1.1.2,CapabilityStatement,,,,,NOT SIMULATED: Inferno will publish a static capability statement that does not indicate support for Subscription search.,,,,,"MAY is interpreted over SHOULD for the following reasons:
- Not listed in the CapabiltiyStatement resource and future version of the narrative don't indicate support for search.
- there is a requirement for search parameter support suggesting that search is allowed in some cases",,"CapabilityStatement: R4 Topic-Based Subscription Server Capability Statement

  "
127,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html#summary,129,"Search Parameter Summary: SHALL [support] url [narrative says SHOULD, resource says SHALL, future versions correct the narrative to SHALL]",SHALL,Server,,,,Yes,,Yes,,CapabilityStatement-backport-subscription-server-r4,summary,,5.2.1.1.2,CapabilityStatement,,,,,NOT SIMULATED: Inferno will publish a static capability statement that does not indicate support for Subscription search or any search parameters,,,,,,IG AUTHORS: CapabilityStatement requires support for search parameters but not for the search interaction - what is the intention?,"CapabilityStatement: R4 Topic-Based Subscription Server Capability Statement

  "
128,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/CapabilityStatement-backport-subscription-server-r4.html#summary,130,Search Parameter Summary: SHOULD [support] status,SHOULD,Server,,,,Yes,,Yes,,CapabilityStatement-backport-subscription-server-r4,summary,,5.2.1.1.2,CapabilityStatement,,,,,NOT SIMULATED: Inferno will publish a static capability statement that does not indicate support for Subscription search or any search parameters,,,,,,IG AUTHORS: CapabilityStatement requires support for search parameters but not for the search interaction - what is the intention?,"CapabilityStatement: R4 Topic-Based Subscription Server Capability Statement

  "
129,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-status-r4.html,131,[several SubscriptionStatus profile elements are flagged as must support],MAY,Server,,,,No,IG doesn't indicate what must support requirements are for the SubscriptionStatus profile (in contrast to the Subscription profile where they are provided),No,Not Verifiable,,,,5.13.1,Notification Content,,,,,NOT SIMULATED: No verification of subscription status must supports will be performed at this time,,,,,,"IG AUTHORS: What do must support flags on the R4 Backported R5 SubscriptionStatus profile mean? Must support flags in the other R4-related profiles are detailed in the must support section, but it does not discuss this profile.","Resource Profile:

    R4 Backported R5 SubscriptionStatus





  "
130,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-subscription-status-r4.html,132,[several SubscriptionStatus profile elements are flagged as must support],MAY,Client,,,,No,IG doesn't indicate what must support requirements are for the SubscriptionStatus profile (in contrast to the Subscription profile where they are provided),No,Not Verifiable,,,,5.13.1,Notification Content,,,,,NOT SIMULATED: No verification of subscription status must supports will be performed at this time,,,,,,"IG AUTHORS: What do must support flags on the R4 Backported R5 SubscriptionStatus profile mean? Must support flags in the other R4-related profiles are detailed in the must support section, but it does not discuss this profile.","Resource Profile:

    R4 Backported R5 SubscriptionStatus





  "
131,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#conformance-in-fhir-r4,133,"In order to claim conformance with this guide, a server…SHALL support the Subscription resource (...write).",SHALL,Server,,,,Yes,,Yes,,conformance,conformance-in-fhir-r4,,2.7.2,Subscription Creation,,,,Write a Subscription instance and validate an appropriate successful response.,SIMULATED: requests will be recorded for future evaluation,For Basic Workflow,Implemented,,,,"IG AUTHORS: create interaction is a SHOULD on the CapabilityStatement, which is in conflict with this requirement.","Conformance in FHIR R4
In order to claim conformance with this guide, a server:In order to claim conformance with this guide, a server:

SHALL support the Subscription resource (read/write).
SHALL support the $status operation on the Subscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload Type

SHALL support the Subscription resource (read/write).SHALL support the SubscriptionSubscription resource (read/write).
SHALL support the $status operation on the Subscription resource.SHALL support the $status$status operation on the SubscriptionSubscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extensionSHOULD support topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guideSHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload TypeSHALL support at least one Payload Type

Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription Components page.Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription ComponentsTopic-Based Subscription Components page.
Conformance Artifacts"
132,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#conformance-in-fhir-r4,134,"In order to claim conformance with this guide, a server…SHALL support the Subscription resource (read...).",SHALL,Server,,,,Yes,,Yes,,conformance,conformance-in-fhir-r4,,2.7.2,Subscription Access,,,,Read a Subscription instance.,"SIMULATED: Support reading of previously established Subscriptions for a session - using tags to find the list of Subscriptions and return whichever matches the requested id, if found.",Subscription API,Implemented,,,,,"Conformance in FHIR R4
In order to claim conformance with this guide, a server:In order to claim conformance with this guide, a server:

SHALL support the Subscription resource (read/write).
SHALL support the $status operation on the Subscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload Type

SHALL support the Subscription resource (read/write).SHALL support the SubscriptionSubscription resource (read/write).
SHALL support the $status operation on the Subscription resource.SHALL support the $status$status operation on the SubscriptionSubscription resource.
SHOULD support topic discovery via the CapabilityStatement SubscriptionTopic Canonical extensionSHOULD support topic discovery via the CapabilityStatement SubscriptionTopic CanonicalCapabilityStatement SubscriptionTopic Canonical extension
SHALL support at least one channel type, and SHOULD include one from this guideSHALL support at least one channel type, and SHOULD include one from this guide
SHALL support at least one Payload TypeSHALL support at least one Payload Type

Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription Components page.Note that in FHIR R4, there is no representation of Subscription Topics.  Detailed discussion can be found on the Topic-Based Subscription ComponentsTopic-Based Subscription Components page.
Conformance Artifacts"
133,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#backport-filter-criteria-1,135,Servers supporting this guide SHALL be able to read values in this [backport-filter-criteria - https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-filter-criteria.html] extension.,SHALL,Server,,,,Yes,,Yes,,conformance,backport-filter-criteria-1,,2.7.2.2.2,Subscription Creation,,,,"Require that the tester provide a Subscription with a filter value. If the server accepts the Subscription, verify it can provide a notification based on it (no check of the specifics of the filter since not formally defined). If it fails, or modifies the Subscription to not include them, that is a signal it doesn't support filters, which is fine, too.","NOT SIMULATED: criteria not formalized in R4 subscriptions, so nothing to check",NONE,,,,"Emily's original: The user may include this extension in their inputted Subscription resource. If included, the test will extract the resource type included in this extension to be used in the notification validation test to make sure the notification is related to the correct resource the Subscription is focused on. Otherwise if not included, the resource type must manually be included as an input

Because filters and notification shapes are formally defined in SubscriptionTopics which are out of scope for R4, I think we want to stay away from these validations",,"backport-filter-criteria
The backport-filter-criteria extension is used to describe the actual filters used in a specific instance of a subscription.The backport-filter-criteriabackport-filter-criteria extension is used to describe the actual filters used in a specific instance of a subscription.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values in this extension and SHALL be able to apply filters as described by any Subscription Topics the server advertises support for.Servers supporting this guide SHALL be able to read values in this extension and SHALL be able to apply filters as described by any Subscription Topics the server advertises support for.
If a server is capable of supporting filter criteria in general but unable to support criteria requested in a subscription, the server SHALL reject the subscription.If a server is capable of supporting filter criteria in general but unable to support criteria requested in a subscription, the server SHALL reject the subscription.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write values in this extension.Clients supporting this guide SHALL be able to write values in this extension.
backport-payload-content"
134,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#backport-filter-criteria-1,136,Servers supporting this guide...SHALL be able to apply filters [from the backport-filter-criteria - https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/StructureDefinition-backport-filter-criteria.html extension] as described by any Subscription Topics the server advertises support for.,SHALL,Server,,,,Yes,,Yes,"Formal definitions are not available in R4, but testers have access to filter details and can verify filter application in the context of a specific subscription.",conformance,backport-filter-criteria-1,,2.7.2.2.2,Subscription Creation,,,,,TESTER-DIRECTED: Inferno will use notifications provided by testers and assume that they meet filter criteria and will not perform additional validation.,,,,,"Emily's original: The user may include this extension in their inputted Subscription resource. If included, the test will extract the resource type included in this extension to be used in the notification validation test to make sure the notification is related to the correct resource the Subscription is focused on. Otherwise if not included, the resource type must manually be included as an input

Because filters and notification shapes are formally defined in SubscriptionTopics which are out of scope for R4, I think we want to stay away from these validations",TEST DESIGN: Is this important enough that we would consider an attestation since we can't validate it mechanically?,"backport-filter-criteria
The backport-filter-criteria extension is used to describe the actual filters used in a specific instance of a subscription.The backport-filter-criteriabackport-filter-criteria extension is used to describe the actual filters used in a specific instance of a subscription.

Server Support

Server SupportServer Support

Servers supporting this guide SHALL be able to read values in this extension and SHALL be able to apply filters as described by any Subscription Topics the server advertises support for.Servers supporting this guide SHALL be able to read values in this extension and SHALL be able to apply filters as described by any Subscription Topics the server advertises support for.
If a server is capable of supporting filter criteria in general but unable to support criteria requested in a subscription, the server SHALL reject the subscription.If a server is capable of supporting filter criteria in general but unable to support criteria requested in a subscription, the server SHALL reject the subscription.

Client Support

Client SupportClient Support

Clients supporting this guide SHALL be able to write values in this extension.Clients supporting this guide SHALL be able to write values in this extension.
backport-payload-content"
135,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#profile-support-1,137,a conformant server…SHALL communicate all profile data elements that are mandatory by that profile’s StructureDefinition [for the R4/B Topic-Based Subscription profile],SHALL,Server,,,,,,,,conformance,profile-support-1,,,,,,,Read a Subscription instance and validate it using the HL7 validator.,"SIMULATED: Inferno will echo back Susbcriptions provided by the client, with small modifications e.g., to the status. The provided Subscriptions must themselves be conformant for the tests to pass.",,,,,from 56,,"Profile Support
Profile Support refers to the support of the profiles defined in this guide in a system exposing FHIR resources. Specifically, a conformant server:Profile Support refers to the support of the profiles defined in this guide in a system exposing FHIR resources. Specifically, a conformant server:

SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.
SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.
SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription

SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.
SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiatesCapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.
SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscriptionSHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfileCapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscriptionhttp://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription

Must-support"
136,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#profile-support-1,138,a conformant server…SHALL communicate all profile data elements that are mandatory by that profile’s StructureDefinition [for the R4 Topic-Based Subscription Notification Bundle],SHALL,Server,,,,,,,,conformance,profile-support-1,,,,,,,Verify notification bundles,TESTER-DIRECTED: Inferno will use notifications provided by testers and assume that they meet filter criteria and will not perform additional validation.,,,,,,,"Profile Support
Profile Support refers to the support of the profiles defined in this guide in a system exposing FHIR resources. Specifically, a conformant server:Profile Support refers to the support of the profiles defined in this guide in a system exposing FHIR resources. Specifically, a conformant server:

SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.
SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.
SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription

SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.
SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiatesCapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.
SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscriptionSHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfileCapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscriptionhttp://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription

Must-support"
137,https://hl7.org/fhir/uv/subscriptions-backport/STU1.1/conformance.html#profile-support-1,139,a conformant server…SHALL communicate all profile data elements that are mandatory by that profile’s StructureDefinition [for the R4 Backported R5 SubscriptionStatus],SHALL,Server,,,,,,,,conformance,profile-support-1,,,,,,,Verify notification status within Notification bundles,TESTER-DIRECTED: Inferno will use notifications provided by testers and assume that they meet filter criteria and will not perform additional validation.,,,,,,,"Profile Support
Profile Support refers to the support of the profiles defined in this guide in a system exposing FHIR resources. Specifically, a conformant server:Profile Support refers to the support of the profiles defined in this guide in a system exposing FHIR resources. Specifically, a conformant server:

SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.
SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.
SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription

SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.SHALL communicate all profile data elements that are mandatory by that profileâs StructureDefinition.
SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.SHOULD declare conformance with the Backport Subscription Server Capability Statement by including its official URL in the serverâs CapabilityStatement.instantiatesCapabilityStatement.instantiates element: http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4http://hl7.org/fhir/uv/subscriptions-backport/CapabilityStatement/backport-subscription-server-r4.
SHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscriptionSHALL specify the full capability details from the CapabilityStatement it claims to implement, including declaring support for the Backport Subscription Profile by including its official URL in the serverâs CapabilityStatement.rest.resource.supportedProfileCapabilityStatement.rest.resource.supportedProfile element: http://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscriptionhttp://hl7.org/fhir/uv/subscriptions-backport/StructureDefinition/backport-subscription

Must-support"
